,text,code,generation,bleu,1-gram bleu,2-gram bleu,3-gram bleu,4-gram bleu,precision,recall,F1,F3
0,Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ","def longest_subseq_len(arr, n): 
	n = n 
	if n == 1 or n == 2: 
		return 1
	if (n == 1): 
		return 2
	if (n == 2): 
		return 3
	if (n == 3): 
		return 1
	if (n == 2): 
		return 2 
	if (n > 2): 
		return 1
	if (n == 1): 
		return 2",0.0060549117734055,0.1996796885644805,0.001850863423414,0.0018878806918823,0.0019264088692677,0.8424531817436218,0.7773372530937195,0.8085864186286926,0.7833923697471619
1,Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","def sum_even(n) : 
    for i in range(0,n) : 
        if (i % 2) : 
            count=1
            else: 
                count = count + 1
    return count ",0.0516690428763136,0.373541202115471,0.0869619729792631,0.0456550358141131,0.0048057932435908,0.9115974307060242,0.8913602232933044,0.9013652801513672,0.8933433890342712
2,Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2):
        str2 = str2 + str1[i - 1]
 return str2",0.8136749447931934,0.8817092306864348,0.840040552487643,0.7945838126344156,0.7447978594618332,0.9972233772277832,0.9865743517875671,0.9918702244758606,0.9876291155815125
3,Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","def sum_positivenum(n): 
	if n == 0: 
		return 0
	elif n == 1: 
		return 1
	else: 
		return 2 * arr[n] ",0.0443533954552702,0.4736842105263157,0.2222222222222222,0.0058823529411764,0.00625,0.8654266595840454,0.8852750658988953,0.8752383589744568,0.8832492828369141
4,Write a python function to count the pairs with xor as an odd number.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ","def find_even_Pair(A): 
    evenPair = 0
    for i in range(0,len(A)): 
        for j in range(i + 1,len(A)): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",0.3656441731409301,0.629175697852899,0.4233982343198332,0.3207562381210857,0.2091888509485341,0.9644401669502258,0.9578275680541992,0.9611225128173828,0.9584847688674927
5,Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","def remove_consecutive_duplicates(list1):
    return [i for i in list1 if list1[:i]!= list1[i + 1:]]",0.0219728138749971,0.3076923076923076,0.0083333333333333,0.009090909090909,0.01,0.786828339099884,0.796967625617981,0.7918654680252075,0.795941948890686
6,Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","def nCr_line(n, r, p): 
	if (r > n- r): 
		r = n - r 
	for i in range(1, n + 1): 
		r = (2 * r + i)*(1 - r) 
	return r ",0.0914950985299812,0.3129879367243867,0.1174852079200044,0.0607006907586689,0.0313969090131046,0.8539884090423584,0.8352779150009155,0.8445295095443726,0.8371120095252991
7,Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","def is_dict_present(dict,key):
  if key in dict:
    return True
  else:
    return False",0.3945881255591767,0.7272727272727273,0.4,0.3333333333333333,0.25,0.9653042554855347,0.9655384421348572,0.9654213786125183,0.9655150771141052
8,Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())","def is_lower(string):
  return (string.lower())",1.0,1.0,1.0,1.0,1.0,0.9999997615814209,0.9999997615814209,0.9999997615814209,0.9999998211860657
9,Write a function to return true if the password is valid.,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","def check_password(password):
  if any(password == password for x in range(len(password))):
    return True
  else:
    return False",0.0085997686830705,0.0881594070515128,0.0354211903331971,0.0012715299093968,0.0013774907351798,0.7639835476875305,0.701833188533783,0.7315908074378967,0.7075893878936768
10,Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","def remove_words(str1, K):
  res = []
  for word in str1.split():
    if len(word)>K:
      res.append(word)
  return (res) ",0.0284026216956614,0.351987731706019,0.0838066027871473,0.0045126632270002,0.0048887184959169,0.898373007774353,0.8951490521430969,0.8967581391334534,0.8954704403877258
11,Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","def add_tuple(test_list, test_list):
  res = [test_list[idx] for idx in range(len(test_list))]
  return (res) ",0.0538636636883186,0.4166666666666667,0.1818181818181818,0.01,0.0111111111111111,0.8588119149208069,0.9040810465812683,0.880865216255188,0.8993405103683472
12,Write a function to get the sum of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))","def sum_non_negative(num):
  sum = 0
  for i in range(num):
    if i % 2:
      sum = sum + (i * i * (i - 1))
  return sum",0.0113716819348752,0.2307692307692307,0.004,0.0041666666666666,0.0043478260869565,0.8162423372268677,0.834014356136322,0.825032651424408,0.8322024345397949
13,Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","def insert_string(list,string):
 list = [v for x in list for v in (string, x)]
 return list",0.0173957973756422,0.25,0.0066666666666666,0.0071428571428571,0.0076923076923076,0.9096131920814514,0.9054950475692749,0.9075494408607483,0.9059052467346191
14,Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","def similar_elements(test_list1, test_list2):
  res = list(set(test_list1) & set(test_list2))
  return (res) ",0.0698534205658009,0.6,0.2222222222222222,0.0125,0.0142857142857142,0.9624854922294617,0.9400927424430847,0.9511573314666748,0.9422849416732788
15,Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False","def check_num_position(str1):
    for i in range(len(str1)):
        if str1[i] == '0' and str1[i + 1] == '1':
            return True
    else:
        return False",0.1849304691034943,0.3333333333333333,0.2,0.1578947368421052,0.111111111111111,0.8051273226737976,0.8140210509300232,0.8095497488975525,0.8131229281425476
16,Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1","import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def get_Pos_Of_Right_most_Set_Bit(n): 
    if (n == 0): 
        return 0
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return n[pos] ",0.0541531525351089,0.2105263157894736,0.111111111111111,0.0588235294117647,0.00625,0.8501705527305603,0.945796549320221,0.8954377174377441,0.9352765679359436
17,Write a python function to find the maximum length of sublist.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ","def Find_Max_Len_Of_List(lst): 
    maxList = max((x) for x in lst) 
    return maxList",0.1013054242349556,0.4980549361539613,0.1826201432564524,0.1014556351424735,0.0114137589535282,0.950512707233429,0.9617675542831421,0.9561070203781128,0.9606301188468933
18,Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","def zip_tuple(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",0.0608059975103827,0.3636363636363636,0.1428571428571428,0.05,0.0052631578947368,0.8894408345222473,0.9020930528640747,0.8957222104072571,0.9008116126060486
19,Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","def adjacent_elements(test_tup1):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",0.0470104082139191,0.5333333333333333,0.1428571428571428,0.0076923076923076,0.0083333333333333,0.9036229848861694,0.9209604263305664,0.9122093319892883,0.9191968441009521
20,Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) ","def find_rectangular(n, k): 
	n = len(n) 
	if (k == 0 or k == n): 
		return 1
	return find_rectangular(n - 1, k - 1) + find_rectangular(n - 1, k + 1) 
def find_nth_rectangular(n, m): 
	if (n == 0 and m == 0): 
		return 0
	if (n == 1 and m == 0): 
		return 1
	return",0.008520286737487,0.074074074074074,0.0188679245283018,0.0019230769230769,0.0019607843137254,0.7522995471954346,0.8450270891189575,0.7959718704223633,0.8347382545471191
21,Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","def count_vowels(str1):
    result = {}
    for i in range(len(str1)):
        if str1[i] in ""aeiou"":
            result[ord(str1[i])] += 1
    else:
        result[ord(str1[i])] = 1
    return result",0.0047386100548386,0.0708144194050929,0.0134884608390653,0.0007081441940509,0.0007454149411062,0.8504012823104858,0.7676946520805359,0.8069342970848083,0.7752342224121094
22,Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","def odd_Number(n): 
    if n < 2: 
        return n 
    count = 0
    for i in range(0, n) : 
        count += 1
        for j in range(i + 1, n): 
            if (i % 2!= 0): 
                count+=1
            break
    return count ",0.0091708406956226,0.2777777777777778,0.0028571428571428,0.0029411764705882,0.003030303030303,0.8553627729415894,0.85358726978302,0.8544741272926331,0.853764533996582
23,Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","def sort_list(my_list):
    arr_len = len(my_list)
    while arr_len > 0:
        arr_len = int(arr_len / 2)
        arr[0] = arr[0];
        arr[1] = arr[1];
        arr[2] = arr[2];
    return arr_len;",0.011627311433509,0.1753483780771862,0.0332099200903761,0.0017326914829761,0.0018114501867477,0.8135207891464233,0.8048185110092163,0.8091462254524231,0.8056803345680237
24,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","def check_monthnum_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False",0.200597677945697,0.4187822512699643,0.2004427869326324,0.1628597643827639,0.1184434650056464,0.9379016757011414,0.9230793714523315,0.9304315447807312,0.9245404005050659
25,Write a function to check if a binary tree is balanced or not.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","from collections import deque
def check_balanced_tree(node):
	if node is None:
		return False
	else:
		left = Node()
		right = Node()
		for n in range(1, n + 1):
		if Node.left == Node:
			left = Node()
			right = Node()
		if Node.right == Node:
				left = Node()
		right = Node()
		else:",0.0237716098993161,0.2369349279797302,0.0484171374567274,0.0164976912815515,0.0016872638810677,0.8189135789871216,0.7708426713943481,0.7941513657569885,0.7753943204879761
26,Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","def is_undotify(x):
    if x == 1:
        return True
    else:
        return False",0.0209574393342245,0.1832241715849976,0.0671821962478324,0.0037323442359906,0.0041988872654895,0.8623079061508179,0.8034924268722534,0.8318618535995483,0.8090105056762695
27,Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","def third_largest(nums):
    if (nums[0] > 0):
        return nums[0]
    for i in nums:
        if (nums[i] < 0):
            return i 
    return third_largest(nums) + third_largest(nums)",0.0135966343872898,0.2727272727272727,0.0047619047619047,0.005,0.0052631578947368,0.8254764676094055,0.8038771152496338,0.8145337104797363,0.8059859871864319
28,"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result","from itertools import groupby
def extract_sum_subset(nums, N):
    result = [bisect.bisect_left(nums, N) for i in range(N)]
    return result",0.2280551110540383,0.5113954113409694,0.2963768861180618,0.1580676725962996,0.1129054804259283,0.8782864809036255,0.8907409906387329,0.8844698667526245,0.8894796371459961
29,Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] ","def split(str): 
    return (str[0]) ",0.0351487760467425,0.1839397205857211,0.012262648039048,0.0183939720585721,0.0367879441171442,0.9002503156661987,0.8510352969169617,0.8749513030052185,0.8557133078575134
30,"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","def entringer_number(n, k):
  if (k == 0):
    return 1
  else:
    return 2",0.0992102882893908,0.1539672431849319,0.1119761768617686,0.0821158630319637,0.0684298858599697,0.8801670670509338,0.8443780541419983,0.8619011640548706,0.8478254675865173
31,Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum","def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",0.02239302892148,0.2361832763705073,0.0429424138855467,0.0047236655274101,0.0052485172526779,0.857208251953125,0.8087321519851685,0.8322649002075195,0.813331663608551
32,Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","def count_char(str1):
  for i in range(len(str1)):
    count_chars = 0
  for j in range(i + 1,len(str1)):
    if str1[i] == str2[j] and count_chars[j] == count_chars:
      count_chars[i] = count_chars[j] + 1
  return count_chars",0.0723282344923903,0.3333333333333333,0.2068965517241379,0.1071428571428571,0.0037037037037037,0.811705470085144,0.8819364905357361,0.8453648090362549,0.8743712902069092
33,Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","def volume_triangular(a,b,c): 
    i = 2
    for i in range(a,b+1): 
        for j in range(a + 1,b+1): 
            if (i * i <= b): 
                volume = (volume * i * j * k) 
    return volume",0.0082510129100279,0.125,0.0032258064516129,0.0033333333333333,0.0034482758620689,0.7549564838409424,0.8206489682197571,0.7864332795143127,0.8135697245597839
34,Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","def find_last(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",0.8715457484400297,0.9433962264150944,0.8846153846153846,0.8431372549019608,0.82,0.9893263578414917,0.9771761298179626,0.9832137227058411,0.9783777594566345
35,Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","def longest_chain(arr, n): 
	n1 = len(arr) 
	n2 = len(arr) 
	for i in range(0, n1): 
		for j in range(i + 1, n2): 
			if ((arr[i] - arr[j]) % 2!= 0): 
				n1 += 1
		d = 1
		while (i < n1 and j < n2): 
			if (arr[i] - arr[j] ==",0.0326560197673173,0.2876145237861415,0.0773334245878069,0.031620778053681,0.0016169716050177,0.8437608480453491,0.8120320439338684,0.8275924324989319,0.8150971531867981
36,Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n): 
        temp = i; 
        while (temp): 
            if (temp % 2): 
                res = i; 
            break; 
    return res; ",0.4675733568029993,0.5994934106932114,0.5004466732743329,0.4359952077768809,0.3654055074701478,0.944444477558136,0.9062153697013855,0.9249351024627686,0.9098984003067017
37,Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","def sum_of_even_coefficient(n, k): 
    res = 1 
    for i in range(k + 1): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % k == 0): 
            count+=1 
            n = n / k 
            curr_term *= i 
            curr_sum += curr_term * n 
            curr_term = 1 
            n = n / k 
    return res 
def sum_of",0.0045454351418702,0.0566037735849056,0.0019230769230769,0.0019607843137254,0.002,0.674475371837616,0.745193600654602,0.7080731987953186,0.7374613881111145
38,Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","def smallest_Power_of_2(n): 
    res = 0; 
    for i in range(n): 
        temp = i; 
        while (temp): 
            if (temp % 2): 
                res = i; 
            break; 
    return res; ",0.0170851667051951,0.1691534054480489,0.0353015802674189,0.0036906197552301,0.0038663635530982,0.8546331524848938,0.8278643488883972,0.841035783290863,0.8304654955863953
39,Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ","def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",0.7397630673919846,0.8433740467435463,0.7600366903459628,0.710943411304477,0.6571745818780881,0.9777494668960571,0.9773049354553223,0.9775271415710449,0.9773493409156799
40,Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ","import re 
def vowels(string): 
    patterns = '\a\xe5\xe4\xf6'
    if re.search(patterns, string): 
        return ['Yes a match!'] 
    else: 
        return ('No match!')",0.028724953480912,0.2777777777777778,0.0588235294117647,0.00625,0.0066666666666666,0.7952766418457031,0.8011114001274109,0.7981833219528198,0.800524115562439
41,Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","def split_list(text):
 return (text.upper()[-1].split('A'))",0.0451319218094826,0.2361832763705073,0.0157455517580338,0.0236183276370507,0.0472366552741014,0.8699221014976501,0.8137009739875793,0.8408728837966919,0.8189939260482788
42,Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
","from itertools import groupby
def freq_consecutive_duplicate(nums):
    temp = [len(list(group)) for key, group in groupby(nums)]
    return (sum(temp))",0.0049506284827858,0.0841082339778699,0.0017943089915278,0.0019224739194941,0.002070356528686,0.7162749767303467,0.6929001808166504,0.704393744468689,0.6951687335968018
43,Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","def largest_palindic(arr): 
	n = len(arr) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(2, n): 
		L[i][i] = 1
	for i in range(2, n): 
		L[i][i] = L[i - 1][i] 
	return L[::2]",0.0153589399117513,0.1192670638408017,0.0408915647454177,0.0105235644565413,0.0010842460349163,0.8155063390731812,0.7690418362617493,0.7915927767753601,0.7734487056732178
44,"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n","import math 
def check_abundant(x): 
	if (x < 0): 
		return False
	if (x == 1): 
		return True
	else: 
		return False
def get_sum(n): 
	sum = 0
	i = 1
	while (i <= n): 
		if (n % i == 0): 
			if (n / i == i): 
				sum = sum + i 
			else: 
				sum",0.0057399950473749,0.12,0.0020408163265306,0.0020833333333333,0.002127659574468,0.7705384492874146,0.7484610080718994,0.7593392729759216,0.7506116628646851
45,Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","def move_zero(arr, n):
    a = [0 for i in range(n)]
    for i in range(n):
        if i == 0:
            a.append(0)
    if len(a) == 0:
        a.extend(a)
    else:
        a.extend(a)
    return (a)",0.0627698893078481,0.379074121003431,0.1429505102773881,0.0742243034132592,0.0038596637774894,0.8402491807937622,0.8570766448974609,0.848579466342926,0.8553636074066162
46,Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)","import re
def extract_max_numerics(text1):
  result = re.findall(r""\d+"", text1)
  return result",0.0971702834321306,0.4093653765389909,0.1819401673506626,0.1023413441347477,0.0116961536153997,0.8816682696342468,0.8807064890861511,0.8811871409416199,0.8808026313781738
47,Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","def next_Square(n) :
    for i in range(2,n) :
        if ((i % 2) == 0):
            return i 
    return None",0.0128461897267677,0.111111111111111,0.0058823529411764,0.00625,0.0066666666666666,0.796668291091919,0.7976493835449219,0.7971585392951965,0.797551155090332
48,Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result","def is_sorted(l,s):
    if (len(s) < len(l)):
        return False
    else:
        return True",0.0186901837215249,0.1515914396500328,0.0083375291807518,0.0092639213119464,0.0104219114759397,0.8235130310058594,0.7458857297897339,0.7827795147895813,0.752983570098877
49,Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","def find_lcm(x, y): 
    if x % y == 0: 
        return y 
    return find_lcm(x, y) ",0.0293582437175291,0.1434408172382763,0.0686554338918245,0.0371883600247383,0.0020284560013493,0.8898134827613831,0.8249191641807556,0.8561383485794067,0.830979585647583
50,Write a function to extract values between quotation marks of a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))","import re
def extract_quotation(text):
  return (re.findall(r'""(.*?)""', text))",0.274941620352113,0.8571428571428571,0.6666666666666666,0.4,0.025,0.9658230543136597,0.9778553247451782,0.9718019962310791,0.9766385555267334
51,Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","def find_gcd(x,y):
  if x==y:
    return y
  else:
    return 0",0.0086299462453942,0.0751862684647848,0.0169169104045765,0.0019333611890944,0.0022555880539435,0.8723261952400208,0.8146939277648926,0.8425257205963135,0.8201121687889099
52,Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","def count_Average_Of_Inverse_Swaps(n): 
    res = 0
    for i in range(1,n): 
        j = 2
        for j in range(n): 
            if (i*i<=j): 
                res += 1
    return res ",0.0098493494688887,0.0869565217391304,0.0045454545454545,0.0047619047619047,0.005,0.7346199750900269,0.7152139544487,0.7247871160507202,0.7171083092689514
53,Write a function to convert rgb color to hsv color.,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","def rgb_to_hsv(rgb):
    import math
    for i in range(3):
        r, g, b = [math.pow(r, 2.0), math.pow(g, 2.0)]
    hsv = rgb_to_hsv(r, g, b)
    return hsv",0.0087256156204417,0.025758359096193,0.0134645968002827,0.0056423072305946,0.0029622112960621,0.8032519817352295,0.6973243355751038,0.7465493679046631,0.7066431641578674
54,Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","def count_Range_list(list1, m, n):
    result = 0
    for x in list1:
        if (x < m):
            result = result + 1
    return result",0.1980316235382625,0.4090909090909091,0.238095238095238,0.15,0.1052631578947368,0.8858405351638794,0.8828803300857544,0.8843579888343811,0.8831754326820374
55,Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","def big_sum(nums):
    if (len(nums)<2):
        return 0
    smallest = nums[0]
    for i in range(1,n):
        if (nums[i] < nums[i+1]):
            smallest = nums[i]
            else:
                smallest = i
    return smallest ",0.017004630721751,0.1153846153846154,0.04,0.0041666666666666,0.0043478260869565,0.7517566680908203,0.8566774129867554,0.8007948994636536,0.8448855876922607
56,Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","def multiply_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)",0.855526185871245,0.9285714285714286,0.8461538461538461,0.8333333333333334,0.8181818181818182,0.9972545504570007,0.9972545504570007,0.9972545504570007,0.9972545504570007
57,Write a python function to find minimum sum of factors of a given number.,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum","import math 
def min_Sum_of_Factors(n): 
    res = 1
    while n % 2: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term 
           ",0.0295932661483704,0.2653061224489796,0.0625,0.0212765957446808,0.0021739130434782,0.7752125263214111,0.8555945754051208,0.8134225010871887,0.8468139171600342
58,Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","def octagonal_number(n): 
	return n + 1",0.0197656093009439,0.1839397205857211,0.0073575888234288,0.009196986029286,0.012262648039048,0.8746374249458313,0.8241811990737915,0.8486599922180176,0.8289633393287659
59,Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","def sort_counter(nums):
    start = 0
    for i in range(len(nums)):
        if nums[i] > nums[i+1]:
            start = nums[i]
        else:
            stop = 1
    return stop",0.0114333611157874,0.1363636363636363,0.0047619047619047,0.005,0.0052631578947368,0.743676483631134,0.7793620824813843,0.7611011862754822,0.775640070438385
60,"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","from itertools import zip_longest, chain, tee
def assign_pairwise(test_tup):
  res = [tuple(a, b) for a, b in zip_longest(tup1, tup2)]
  return (res) ",0.033124989794664,0.3499999999999999,0.1052631578947368,0.0055555555555555,0.0058823529411764,0.7518820762634277,0.8221545815467834,0.7854496836662292,0.8145416975021362
61,Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ","def list_strings(str1):
    result = map(lambda x:x.strip(), str1) 
    return list(result)",0.0603072536040776,0.4444444444444444,0.125,0.0142857142857142,0.0166666666666666,0.8746339678764343,0.9095312356948853,0.8917413353919983,0.905916690826416
62,Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","import re
def put_spaces(text1):
  return (re.sub('[A-Z][^A-Z]*', '',text1))",0.1320135584022327,0.4294155960430205,0.2504924310250953,0.1502954586150572,0.0187869323268821,0.9373106956481934,0.8964403867721558,0.9164201021194458,0.9003662467002869
63,Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","def count_int(list):
    return len(list) ",0.0022469860767018,0.0117588729280045,0.0007839248618669,0.0011758872928004,0.0023517745856009,0.8794811367988586,0.7620335221290588,0.8165557384490967,0.7723475694656372
64,Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","def first_duplicate(array_nums):
    nums_set = set(array_nums)    
    return next(nums_set, None)",0.0063523972624334,0.0651652287939169,0.0024824849064349,0.0028962323908407,0.0034754788690089,0.8715329766273499,0.8097143769264221,0.8394871354103088,0.8154988288879395
65,Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","def max_sum_pairing(N,K): 
    if (N < K): 
        return 
    S = [0] * (K + 1); 
    S[0] = 1; 
    for i in range(1, N): 
        S[i] = (2 * i+1)*(2 * i+1)*(2 * i+1) 
    return S[0]",0.0884099400153004,0.303030303030303,0.0937499999999999,0.064516129032258,0.0333333333333333,0.7963454723358154,0.7760715484619141,0.7860777974128723,0.7780523300170898
66,Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ","def Extract(lst): 
    return [item[0] for item in lst] ",1.0,1.0,1.0,1.0,1.0,1.0000001192092896,1.0000001192092896,1.0000001192092896,1.0000001192092896
67,Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","def remove_list(list1, list2):
    result = [i for i in list1 if i not in list2]
    return result",0.3673341329152363,0.7647058823529411,0.5,0.3333333333333333,0.1428571428571428,0.9731625914573669,0.9605398774147034,0.9668100476264954,0.9617874026298523
68,Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","def filter_dict(dict1,values):
    result = {key:value for key, value in dict1.items() if value in values}
    return result",0.2187405715612322,0.625,0.3333333333333333,0.1428571428571428,0.0769230769230769,0.9188010692596436,0.9420255422592163,0.9302683472633362,0.9396504759788513
69,Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","def check_Characters(string) : 
    s = set(string) 
    while s : 
        c = s.pop(0) 
        if c == 'a' or c == 'z': 
            return True
        else: 
            return False
    s = ''.join(filter(lambda x: x.isalpha(), string)) 
    return False",0.0097841682136723,0.2727272727272727,0.003125,0.0032258064516129,0.0033333333333333,0.8210887312889099,0.8187289834022522,0.8199071288108826,0.8189643025398254
70,Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","def min_Swaps(str1): 
    c = 0
    for i in range(len(str1)): 
        if str1[i]!= '{' and str1[i]!= '}': 
            c += 1
        elif str1[i] == '}' or str1[i]!= '{': 
            c += 1
    return c 
def find_Min_Swaps(str1): 
    for i in range(len(str1)): 
        if str1[i]!= '{' and str1",0.0335443655930948,0.279762416492854,0.1147025907620701,0.0196072804721487,0.0020123261537205,0.8034971952438354,0.8079394698143005,0.8057122230529785,0.8074930310249329
71,Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","def max_run_of_upper(str1):
  upper_run = -1
  for i in range(len(str1)):
    if str1[i] >= 'A' and str1[i] <= 'Z':
      upper_run = i
      elif str1[i] <= 'a' and str1[i] <= 'z':
        upper_run = i
      else:
        upper_run = 0
  return (upper_run + 1)",0.0153642039732334,0.282051282051282,0.0263157894736842,0.0027027027027027,0.0027777777777777,0.8224831223487854,0.8211387395858765,0.8218103647232056,0.8212730288505554
72,Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","def is_seq(seq,x): 
    if x in seq: 
        return True
    else:
        return False",0.0062249037088232,0.0849114469421503,0.0023350647909091,0.0025945164343434,0.0029188309886364,0.7908729314804077,0.7254275679588318,0.7567379474639893,0.731480598449707
73,Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","def binary_search(arr, x):
    binary_search = lambda x: x == x and return(binary_search(arr, x))
    return binary_search(arr, x)",0.0026498804737627,0.0450198934692041,0.0009604243940096,0.0010290261364389,0.0011081819930881,0.7881505489349365,0.7097210884094238,0.7468824982643127,0.7168545722961426
74,Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","def count_Odd_Factors(arr,n): 
    res = 1
    for i in range(0,n): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while (i < n and j < n): 
            count+=1
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term * i 
            curr_term = 1
            j = 0
    while (i < n and j <",0.0034537838276078,0.0188679245283018,0.0019230769230769,0.0019607843137254,0.002,0.6674328446388245,0.7275727391242981,0.6962064504623413,0.7210754156112671
75,Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ","def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j*j*j)     
    return sm ",0.7161757390211263,0.8433740467435463,0.7600366903459628,0.6691232106395079,0.6133629430862155,0.9896458387374878,0.9923926591873169,0.9910174012184143,0.9921172857284546
76,Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","def max_of_two( x, y ): 
    if x > y: 
        return x 
    return y",0.0219728138749971,0.3076923076923076,0.0083333333333333,0.009090909090909,0.01,0.885424792766571,0.9140337109565735,0.8995018601417542,0.9110899567604065
77,Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","def sort_list(my_dict):
    result = sorted(my_dict.values(), key=lambda x: x[1])
    return result",0.0205771079050828,0.2222454662045153,0.0082313135631302,0.0092602277585214,0.0105831174383102,0.8454195261001587,0.8537774682044983,0.8495779037475586,0.8529342412948608
78,Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","def reverse_Vow(string):
    return (string[::-1] if string.lower() in vowels else string)",0.0017365243179023,0.0275116100282036,0.0006113691117378,0.000687790250705,0.0007860460008058,0.8272337317466736,0.7530874013900757,0.7884211540222168,0.7598984837532043
79,Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ","def find_Average_Of_Evening(n): 
    even = 0
    for i in range(1,n): 
        if (i % 2): 
            even += 1
    return even",0.0105673198342336,0.1021887336587339,0.0216399671277318,0.0022992465073215,0.0024525296078096,0.8208786249160767,0.8185300827026367,0.819702684879303,0.8187642693519592
80,Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ","def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",0.0090091134743073,0.0799999999999999,0.0041666666666666,0.0043478260869565,0.0045454545454545,0.8266181349754333,0.8815767765045166,0.8532133102416992,0.875754177570343
81,Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","def next_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x",0.017574285132979,0.3296203151002218,0.0059930966381858,0.0065924063020044,0.007324895891116,0.9247995018959045,0.8842533826828003,0.9040719866752625,0.8881473541259766
82,Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","def volume_cuboid(l,r):
  volume = l * l * l
  return volume",0.044116293593227,0.2727272727272727,0.1,0.0111111111111111,0.0125,0.9407960176467896,0.9213136434555054,0.9309529066085815,0.9232255220413208
83,Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","from collections import defaultdict 
def freq_element(nums):
  result = defaultdict(int)
  for x in nums:
    result[x] += 1
  return result",0.015276780223747,0.2222222222222222,0.0058823529411764,0.00625,0.0066666666666666,0.7938505411148071,0.8470865488052368,0.8196049928665161,0.8414437770843506
84,Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","import re
def remove_uppercase(str1):
  return (re.sub('[A-Z]', '', str1))",0.1407517563566015,0.2759095808785817,0.1576626176449038,0.1226264803904807,0.0735758882342884,0.9724096059799194,0.9122353196144104,0.9413617849349976,0.9179155230522156
85,Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","def count_Unset_Bits(n): 
    count = 0; 
    for i in range(1,n + 1): 
        count += (1 << i) - 1
    return count ",0.0528788375956323,0.3506954833919753,0.1677968820057298,0.0354237862012096,0.0037507538330692,0.8867940902709961,0.8937516212463379,0.8902592062950134,0.8930509090423584
86,Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","def decode_run_length(list1):
    for i in list1:
        if len(i)<1:
            continue
        else:
            res = []
        res.append(i[0])
    return (res) ",0.0333885135629492,0.1941394481604724,0.0591663080108106,0.0316962364343628,0.0034134408467775,0.8402401804924011,0.8065600991249084,0.8230557441711426,0.8098060488700867
87,Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",0.0188897963468497,0.25,0.0571428571428571,0.0029411764705882,0.003030303030303,0.8484925031661987,0.8328689336776733,0.8406081199645996,0.8344054222106934
88,Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","def find_val(n): 
	return (n * (n - 1) + 1) ",0.0003505982131975,0.0055544982691211,0.0001234332948693,0.000138862456728,0.0001586999505463,0.8503563404083252,0.716930091381073,0.7779637575149536,0.7283584475517273
89,Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","def find_average(test_list):
  res = [(sum(ele) / len(ele)) for ele in test_list]
  return (res) ",0.0243169158403997,0.4615384615384615,0.0083333333333333,0.009090909090909,0.01,0.8817973732948303,0.8524095416069031,0.8668544292449951,0.8552599549293518
90,Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","def find_multiples(n,k):
   if (k == 0 or k == n):
       return 1
   return (2 * n + 1) / 2",0.0114519974630675,0.1,0.0052631578947368,0.0055555555555555,0.0058823529411764,0.8054046630859375,0.8232082724571228,0.8142091035842896,0.8213926553726196
91,Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","def find_equilibum(arr, n): 
	result = -1
	for i in range(n): 
		if arr[i] == arr[i + 1]: 
			result = i 
	return result",0.0130773280940815,0.3542423304103877,0.0041328271881211,0.0043503444085486,0.0045920302090235,0.8454129099845886,0.8075268864631653,0.826035737991333,0.8111620545387268
92,Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","def is_Diff(n) :
    i = 1
    while i*i <= n :
        j = 1
        while (j*j <= n) :
            if (i*i-j*j == n) :
                return True
            j = j+1
        i = i+1     
    return False",0.0181204583688717,0.1764705882352941,0.0606060606060606,0.003125,0.0032258064516129,0.7454661130905151,0.8465381860733032,0.7927937507629395,0.8352141976356506
93,Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","def count_hex(l,r):
    return (l - r)",1.3786169215449022e-05,9.46543279677522e-05,5.679259678065133e-06,7.099074597581416e-06,9.46543279677522e-06,0.7858684062957764,0.662468671798706,0.7189116477966309,0.6730368733406067
94,Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1): 
        j = (2*i)*(j*j*j*j) 
        sm = sm + (j*j*j*j*j*j*j)     
    return sm ",0.0560666841119542,0.4,0.125,0.0434782608695652,0.0045454545454545,0.9459384679794312,0.9520612955093384,0.9489900469779968,0.9514455199241638
95,Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result","def anagram_string(str_list):
  result = list(filter(lambda x: x == 'a' and x == 'b'), str_list))
  return result",0.195647514979229,0.5,0.2666666666666666,0.1428571428571428,0.0769230769230769,0.8939453959465027,0.8641549348831177,0.8787977695465088,0.8670443892478943
96,Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","def neg_count(list):
  for num in list: 
    if num <= 0: 
       return num ",0.1659038701421971,0.75,0.4545454545454545,0.2,0.0111111111111111,0.9715360403060913,0.9425698518753052,0.9568337798118591,0.9453885555267334
97,"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","def eulerian_num(n, m): 
	if (n == 0): 
		return 1
	return 2 * eulerian_num(n - 1, m) ",0.1383872077796004,0.2212346463291531,0.1685597305364976,0.1264197979023732,0.0777967987091527,0.9434943199157715,0.916052520275116,0.9295709133148193,0.918724536895752
