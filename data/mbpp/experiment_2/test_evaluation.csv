,text,code,generation,bleu,1-gram bleu,2-gram bleu,3-gram bleu,4-gram bleu,precision,recall,F1,F3
0,Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ","def longest_subseq_len(arr, n): 
	n = n - 1
	longest_subseq = [1]*n 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] > arr[j]) and (l == i) and (l[i] < l[j]): 
				longest_subseq[i] = longest_subseq[j] + 1
	return longest_subseq_len(arr[1:], n",0.0247135820029924,0.3232338974148221,0.0349200055378893,0.0179318947356729,0.0018430002922774,0.8674778342247009,0.8346373438835144,0.8507407903671265,0.8378089666366577
1,Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","def sumofEven(n) : 
    return (n + 1) ",0.0038326161192619,0.0377840097267246,0.0014693781560392,0.0017632537872471,0.0022040672340589,0.8250858783721924,0.7568249702453613,0.7894827127456665,0.7631385326385498
2,Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",0.8942255541978509,0.9615384615384616,0.92,0.875,0.8260869565217391,0.9990590810775757,0.9990590810775757,0.9990590810775757,0.9990592002868652
3,Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","def sum_positive(n):
    if (n < 0):
        return -1
    sum = 0
    for i in range(n + 1):
        sum = sum + (i * i)
    return sum",0.0118184739264915,0.2692307692307693,0.004,0.0041666666666666,0.0043478260869565,0.8470947742462158,0.8852829933166504,0.8657679557800293,0.8813098669052124
4,Write a python function to count the pairs with xor as an odd number.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ","def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",0.365210559422655,0.6251019726640885,0.4220637360187196,0.3209079645762165,0.2101183101391893,0.9818640947341919,0.9766318798065186,0.9792410135269165,0.9771525263786316
5,Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","def remove_consecutive_duplicates(l):
    return [i for i in l if l.count(i)==1]",0.0221115414386905,0.2963272882726872,0.0082313135631302,0.0092602277585214,0.0105831174383102,0.830399751663208,0.8031092286109924,0.8165265321731567,0.8057572841644287
6,Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","def nCr_numba(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] ",0.5287430133493595,0.6530612244897959,0.5625,0.4893617021276595,0.4347826086956521,0.9392146468162537,0.9639402627944946,0.9514168500900269,0.9614092111587524
7,Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","def is_ present(dict, key):
    for k in dict:
        if k in dict:
            return True
    return False",0.0423117854161057,0.4375,0.1333333333333333,0.0071428571428571,0.0076923076923076,0.9087525606155396,0.9121970534324646,0.9104716181755066,0.9118514060974121
8,Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())","def is_lower(string):
  return (string.lower())",1.0,1.0,1.0,1.0,1.0,0.9999997615814209,0.9999997615814209,0.9999997615814209,0.9999998211860657
9,Write a function to return true if the password is valid.,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","def is_valid_password(password):
    if len(password) < 2:
        return False
    return True",0.0028473793776897,0.0244573223870197,0.009058267550748,0.0005095275497295,0.0005823171996909,0.8052109479904175,0.6924896836280823,0.7446084022521973,0.702321469783783
10,Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","def remove_words(text, k):
  return (re.sub('\w+', '',text))",0.0028554913023256,0.0196054905474766,0.0011763294328485,0.0014704117910607,0.0019605490547476,0.7982441782951355,0.7680739164352417,0.782868504524231,0.7709879279136658
11,Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","def add_list(test_list, test_str):
  res = tuple(test_list + test_str for test_list in test_list)
  return (res) ",0.0966926569088086,0.5,0.2307692307692307,0.0833333333333333,0.009090909090909,0.8928514719009399,0.9100230932235718,0.901355504989624,0.9082762598991394
12,Write a function to get the sum of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))","def number_sum(n):
  sum = 0
  for num in range(n):
    sum = sum + (num % 10)
  return sum",0.0161532284064872,0.2777777777777778,0.0058823529411764,0.00625,0.0066666666666666,0.8524936437606812,0.8462011814117432,0.8493357300758362,0.8468261957168579
13,Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","def insert_string(list1,string):
 list1 = [v for sub in list1 for v in (sub, string)]
 return list1",0.0173957973756422,0.25,0.0066666666666666,0.0071428571428571,0.0076923076923076,0.8656294941902161,0.8977481126785278,0.8813962936401367,0.8944293856620789
14,Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","def similar_elements(test_list1, test_list2):
  res = list(set.intersection(*map(set, test_list1)))
  return (res) ",0.067857774292396,0.4971329537857609,0.2237098292035924,0.0127834188116338,0.0149139886135728,0.895536482334137,0.9029478430747986,0.8992268443107605,0.9022011756896973
15,Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False","def check_num(string):
    r = re.compile('^[0-9]+$')
    s = r.search(string)
    return (int(s) for s in re.findall(r, s))",0.0173957973756422,0.2,0.0071428571428571,0.0076923076923076,0.0083333333333333,0.8562789559364319,0.8622530698776245,0.8592556118965149,0.8616518974304199
16,Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1","import math 
def get_Pos_Of_Right_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def get_Pos_Of_Right_Set_Bit(n): 
    return ((1 << (n + 1) - 1) ^ ((1 << (n + 2)) - 1)) ",0.042084990495118,0.1666666666666666,0.0869565217391304,0.0454545454545454,0.0047619047619047,0.8690747022628784,0.9533268213272095,0.9092532396316528,0.9441735744476318
17,Write a python function to find the maximum length of sublist.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ","def Find_Max_Len_Sum(lst):  
    maxList = max((len(x) for x in lst ) )
    return maxList",0.3438931217657843,0.6153846153846154,0.4166666666666667,0.2727272727272727,0.2,0.967079222202301,0.9759526252746582,0.9714956879615784,0.9750578999519348
18,Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","def zip_tuple(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",0.0608059975103827,0.3636363636363636,0.1428571428571428,0.05,0.0052631578947368,0.8894408345222473,0.9020930528640747,0.8957222104072571,0.9008116126060486
19,Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","def adjacent_element_tuples(test_tup):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",0.0470104082139191,0.5333333333333333,0.1428571428571428,0.0076923076923076,0.0083333333333333,0.8928800821304321,0.9076735377311707,0.9002161026000977,0.9061720967292786
20,Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) ","def find_rectangular(n): 
	if (n == 0): 
		return 1
	return find_rectangular(n - 1) + find_rectangular(n - 2)",0.0173957973756422,0.25,0.0066666666666666,0.0071428571428571,0.0076923076923076,0.8484880924224854,0.8842670321464539,0.8660081028938293,0.8805539011955261
21,Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","def count_vowels(str1):
    result = {}
    for i in range(len(str1)):
        if all(char in ""aeiou"":
            result[ord(char)]+=1;
        else:
            result[ord(char)] = 1;
    return result;",0.0017070005328846,0.0421596898247457,0.0005547327608519,0.0005855512475659,0.0006199954385992,0.8308438658714294,0.7399564981460571,0.7827708125114441,0.7481405138969421
22,Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","def odd_num_mean(n): 
    if (n == 0): 
        return 1
    odd = (n - 1) / 2
    even = (2 * n + 1) / 2
    return even",0.0108880093814433,0.274161038983248,0.0035640935067822,0.0037125974028981,0.003874014681285,0.8387860655784607,0.8156675696372986,0.8270652890205383,0.8179218769073486
23,Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","def shell_sort(arr):
    arr_len = len(arr)
    while arr_len > 0:
        arr = arr[0]
        arr[0] = arr[0]
        arr[1] = arr[1]
        arr[0] = arr[0]
        arr[1] = arr[1]
    return arr

def sort_by_shell(arr):
    arr_len = len(arr)
    i = 0
    while i <",0.0125706711635225,0.2609919141310928,0.0206339761172017,0.0021223518291978,0.0021847739418213,0.796556830406189,0.7555344700813293,0.7755035161972046,0.7594455480575562
24,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","def check_monthnum_number(monthnum1):
  if(monthnum1 == 2):
    return True
  else:
    return False",0.151247605232157,0.2207276647028654,0.1635019738539743,0.1379547904392908,0.1051084117632692,0.944036066532135,0.8425632119178772,0.8904179334640503,0.8517181873321533
25,Write a function to check if a binary tree is balanced or not.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","from collections import deque
def is_balanced(node):
	if node is None:
		return False
	else:
		return True
def check_left(node,left):
		return True
def check_right(node, right):
		if (left == right):
		return False
	if (right == None):
		return True
	return False",0.0605684020346224,0.2358050112829915,0.0856031637598759,0.0440604519352302,0.0151318723817962,0.8390909433364868,0.7748664021492004,0.8057007789611816,0.7808429598808289
26,Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","def is_undotify(x): 
    return (x == 0) ",0.0028554913023256,0.0196054905474766,0.0011763294328485,0.0014704117910607,0.0019605490547476,0.8375536799430847,0.7555944323539734,0.7944658398628235,0.7630614042282104
27,Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","def third_largest(nums):
    return max(nums)",0.0129305120899358,0.0676676416183063,0.004511176107887,0.0067667641618306,0.0135335283236612,0.8864911794662476,0.7658975720405579,0.821793794631958,0.7764601707458496
28,"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result","def extract_sublists(list1, n):
    result = []
    for i in range(0, n):
        result.extend(list1[i:i + n])
    return result",0.0629890600124137,0.3658078144733209,0.1463231257893283,0.0522582592104744,0.0056278125303587,0.8480378985404968,0.8033590316772461,0.8250939846038818,0.8076139688491821
29,Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] ","def split(str1):
    str1 = str1.replace('0', '1')
    return str1",0.033031643180138,0.25,0.0142857142857142,0.0166666666666666,0.02,0.8096925020217896,0.8296295404434204,0.8195397853851318,0.8275916576385498
30,"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","def entringer_numer(n, k):
  if (k == 0):
    return 1
  elif ((k - 1) % k!= 0):
    return 2
  else:
    return 3",0.1896391067797032,0.3845184309048033,0.2484580630461806,0.1307674016032529,0.1035241929359086,0.8691571950912476,0.8707155585289001,0.8699356913566589,0.8705595135688782
31,Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum","def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",0.02239302892148,0.2361832763705073,0.0429424138855467,0.0047236655274101,0.0052485172526779,0.857208251953125,0.8087321519851685,0.8322649002075195,0.813331663608551
32,Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","def count_char(str1):
  count_char = 0
  for i in range(len(str1)):
    count_char += 1
  return count_char",0.274062371732805,0.4953587998572467,0.333414576826993,0.2167194749375454,0.1576141635909421,0.905955970287323,0.9219683408737183,0.9138920307159424,0.9203417301177979
33,Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","def volume_triangular(a,b,c): 
    m = a + b - c 
    n = m * (a + 1) 
    return round(m / (3 * m) * (1 - m), 2)",0.0113540922736676,0.2592592592592592,0.0038461538461538,0.004,0.0041666666666666,0.7967601418495178,0.8576710820198059,0.8260943293571472,0.8511641025543213
34,Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","def find_last_occurence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",0.8715457484400297,0.9433962264150944,0.8846153846153846,0.8431372549019608,0.82,0.9877135157585144,0.9909334778785706,0.9893208742141724,0.9906105995178223
35,Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","def longest_chain(pairs):
    maxchain = 0
    for i in range(len(pairs)):
        if i == 0 or j == 0:
            maxchain = pairs[i]
            break
    return maxchain",0.0110276705215298,0.0840175664234617,0.0239554218314828,0.0083653854014702,0.0008783654671543,0.8223643898963928,0.7647529244422913,0.7925130724906921,0.7701482176780701
36,Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ",1.0,1.0,1.0,1.0,1.0,0.997773289680481,0.997773289680481,0.997773289680481,0.997773289680481
37,Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","def binomial_Coeff(n,k): 
    if (k == 0 or k == n): 
        return 1
    res = 0 
    for i in range(n): 
        count = 0
        for j in range(i + 1,n + 1): 
            if (k % 2 == 0): 
                count+=1 
            break 
        else: 
            res = res * (n - i) 
    return res ",0.0120968595913782,0.1041666666666666,0.0425531914893616,0.0021739130434782,0.0022222222222222,0.7265322208404541,0.8200168609619141,0.7704491019248962,0.8095995783805847
38,Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","def smallest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
        return res; ",0.0193067840007765,0.2726860124691876,0.0355059912069254,0.0037049729955052,0.0038733808589373,0.8726530075073242,0.8827109336853027,0.8776531219482422,0.8816947340965271
39,Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ","def get_Inv_Count(arr,n):
    inv_count = 0
    for i in range(n):
        if (arr[i] > arr[i - 1]):
            inv_count += 1
    return inv_count ",0.4048173772179957,0.5926545765453743,0.467885192009506,0.3704091103408589,0.2614652543582534,0.9630993008613586,0.9506860971450806,0.9568524360656738,0.9519129395484924
40,Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ","import re 
def vowels(text): 
    patterns = '\aeiou\uff1a\uff1b\uff2a\uff2b\uff3d\uff4e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\",0.0215181025019712,0.0930627225044365,0.0108573176255175,0.0130287811506211,0.0162859764382763,0.6064590215682983,0.6971690654754639,0.6486580967903137,0.6868950128555298
41,Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))",0.274941620352113,0.8571428571428571,0.6666666666666666,0.4,0.025,0.9849544167518616,0.9731748104095459,0.9790291786193848,0.9743401408195496
42,Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
","defConsecutive_duplicate(nums):
    result = 0
    for x in nums:
        if x!= x.count(x[0]):
            result.append(x[0])
    return result",0.0041314012786279,0.0690809302144259,0.0014878969584645,0.0016118883716699,0.0017584236781853,0.7649742960929871,0.7324482202529907,0.7483580112457275,0.7355758547782898
43,Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","def find_Largest_palindic(arr):
  n = len(arr)
 L = [0] * n
  for i in range(n)]
  for i in range(n):
    for j in range(i):
      L[i][j] = (L[i][j-1] + L[i][j-1]) % 2
  return L",0.0117955926191112,0.0915444491711238,0.025798890220953,0.0088961690417079,0.0009213889364626,0.7973703742027283,0.755744457244873,0.7759996056556702,0.759710431098938
44,"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n","import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(",0.0051077863845984,0.1071428571428571,0.0018181818181818,0.0018518518518518,0.0018867924528301,0.7583972811698914,0.7582361698150635,0.758316695690155,0.7582522630691528
45,Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","def move_zero(arr,n):
    a = [0 for i in range(n)]
    x = [ i for i in range(n)]
    if x == 0:
        return None
    x = a[0]
    for i in range(1, n):
        x.extend(a[i:])
        return (x)",0.0552881683736679,0.3823529411764705,0.1212121212121212,0.0625,0.0032258064516129,0.8366260528564453,0.8566826581954956,0.8465355634689331,0.8546338081359863
46,Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)","import re
def extract_numerics(text):
  return (re.findall(r""\b\d{4,}\b"", text))",0.0859987880668714,0.2797380911754017,0.163180553185651,0.0979083319113906,0.0122385414889238,0.8656995296478271,0.8561622500419617,0.8609043955802917,0.8571065068244934
47,Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","def next_Square(n):
    for i in range(0,n):
        if (n % i == 0):
            return i;
    return False;",0.0146280636536575,0.125,0.0066666666666666,0.0071428571428571,0.0076923076923076,0.8031430840492249,0.8004589080810547,0.8017988204956055,0.8007265329360962
48,Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result","def is_sorted(my_list, sorted_tup):
    return sorted_tup == sorted_list",0.0166699871226248,0.1212493844791285,0.0070728807612825,0.0084874569135389,0.0106093211419237,0.7931169867515564,0.7401304244995117,0.7657081484794617,0.7451083064079285
49,Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","def int_To_Lcm(num1,num2): 
    if (num1 >= 0 and num2 >= 0): 
        return 1
    num1 = num1 + 1
    num2 = num2 - 1
    if (num1 >= 0 and num2 >= 0): 
        return num1 
    else: 
        return 0",0.008932433195406,0.2285714285714285,0.0029411764705882,0.003030303030303,0.003125,0.8097535967826843,0.8237283229827881,0.8166811466217041,0.8223092555999756
50,Write a function to extract values between quotation marks of a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))","import re
def extract_quotation(text):
  return (re.findall(r'""(.*?)""', text))",0.274941620352113,0.8571428571428571,0.6666666666666666,0.4,0.025,0.9658230543136597,0.9778553247451782,0.9718019962310791,0.9766385555267334
51,Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","def find_gcd(x, y):
    if x < y:
        return y
    return find_gcd(x, y) + find_gcd(x, y - 1)",0.0090333867830745,0.1306603230592825,0.0034706648312621,0.0037020424866796,0.003966474092871,0.8525866270065308,0.8255175948143005,0.8388338088989258,0.8281469345092773
52,Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","def count_Of_Series(n): 
    res = 0
    for i in range(1,n + 1): 
        j = 2 * i + 1
        if (j == 1000): 
            break
        res = res + 1
    return res ",0.0082180740772656,0.1,0.0034482758620689,0.0035714285714285,0.0037037037037037,0.7591161727905273,0.7377908825874329,0.74830162525177,0.7398692965507507
53,Write a function to convert rgb color to hsv color.,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","def hsv_to_rgb(colors):
    import re
    import colors
    h = colorsys.hsv_to_hsv(r,g,b)
    return colorsys.hsv_to_rgb(h,s,l)",4.3228715304137896e-05,0.0003315934420198,9.118819655545164e-05,1.0132021839494625e-05,1.1398524569431458e-05,0.7831007242202759,0.6640396118164062,0.7186723351478577,0.6742914319038391
54,Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","def count_Range_list(list1, m, n):
    result = 0
    for x in list1:
        if x < m:
            result += 1
    return result",0.2348836443827469,0.4976605799197778,0.2857381320113556,0.2010749817857687,0.106451460945407,0.8998308181762695,0.8911629915237427,0.8954759240150452,0.8920222520828247
55,Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","def big_sum(nums):
    return max(nums[0], nums[1])",0.1029499418829739,0.4912384518467891,0.2046826882694954,0.0272910251025993,0.0409365376538991,0.9013813734054565,0.9150053858757019,0.9081422686576843,0.9136244654655457
56,Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","def multiply_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)",0.855526185871245,0.9285714285714286,0.8461538461538461,0.8333333333333334,0.8181818181818182,0.9972545504570007,0.9972545504570007,0.9972545504570007,0.9972545504570007
57,Write a python function to find minimum sum of factors of a given number.,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum","import math 
def min_Sum(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term * i 
",0.0303971568302487,0.2830188679245282,0.0769230769230769,0.0196078431372549,0.002,0.7788863182067871,0.8566136360168457,0.8159029483795166,0.8481496572494507
58,Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","def octagonal_number(n): 
	return int(n * (7 * n - 5) / 2) ",0.1002515743147813,0.5,0.1818181818181818,0.1,0.0111111111111111,0.8669294714927673,0.8985331654548645,0.8824484348297119,0.8952694535255432
59,Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","def sort_by_value(x, y):
    y = [i for i in range(y)]
    x = [0] * (len(x) + 1)
    return x
def key_on_key(x, y):
    key = lambda i: x[i]
    return key(key)",0.0162757763136131,0.1379310344827586,0.0357142857142857,0.0037037037037037,0.0038461538461538,0.7684416770935059,0.7918598055839539,0.7799749970436096,0.7894539833068848
60,"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","def assign_pair(test_tup):
  res = tuple(set(test_tup))
  return (res) ",0.0288769658254601,0.1974664618782603,0.0921510155431881,0.0055290609325912,0.0069113261657391,0.8619128465652466,0.8068802356719971,0.8334891200065613,0.8120652437210083
61,Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ","def string_list(str1):
    result = map(lambda x:x.strip(), str1)
    return result",0.0758323567341339,0.5555555555555556,0.25,0.0142857142857142,0.0166666666666666,0.8795549273490906,0.9103450179100037,0.8946851491928101,0.9071694016456604
62,Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","import re
def put_spaces(text1):
  return (re.sub('[a-z]','', text1))",0.1320135584022327,0.4294155960430205,0.2504924310250953,0.1502954586150572,0.0187869323268821,0.9405486583709717,0.8899028301239014,0.9145250916481018,0.8947206139564514
63,Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","def count_Len(list):
    return len(list) ",0.0022469860767018,0.0117588729280045,0.0007839248618669,0.0011758872928004,0.0023517745856009,0.8613121509552002,0.7463722825050354,0.7997335195541382,0.7564671039581299
64,Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","def first_duplicate(nums):
    arr_len = len(nums)
    for i in range(0, arr_len):
        if (arr[i] == nums[i+1]):
            return i
    return None",0.0547062497400985,0.3558832901852479,0.0942044003431538,0.0500460876823005,0.0053382493527787,0.8890230059623718,0.8700544834136963,0.8794364929199219,0.871914803981781
65,Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","def max_sum_pairing(n,m): 
	if (n == 0): 
		return 1
	if (m == 0): 
		return 0
	if (n == 1): 
		return 1
	if (n == 2): 
		return 2
	if (n == 3): 
		return 3
	if (m == 0): 
		return 0
	if (n == 1): 
		return 1
	if (m == 0):",0.005034460682273,0.0625,0.002127659574468,0.0021739130434782,0.0022222222222222,0.801902174949646,0.7304222583770752,0.7644950151443481,0.7369916439056396
66,Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ","def Extract(lst): 
    return [item[0] for item in lst] ",1.0,1.0,1.0,1.0,1.0,1.0000001192092896,1.0000001192092896,1.0000001192092896,1.0000001192092896
67,Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","def remove_list(l1, n):
    result = [i for i in l1 if i not in n]
    return result",0.0478721865238107,0.5882352941176471,0.1875,0.0066666666666666,0.0071428571428571,0.9354561567306519,0.9206865429878235,0.9280125498771667,0.922142505645752
68,Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","def filter_dict(d, filter_name):
  res = {k: v for k, v in d.items() if v >= filter_name}
  return (res) ",0.0169065364648562,0.3333333333333333,0.0058823529411764,0.00625,0.0066666666666666,0.9008351564407349,0.910533607006073,0.9056584239006042,0.9095543622970581
69,Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","def check_One_Digit(string): 
    s = set(string) 
    if (len(s) == 1): 
        return True
    else: 
        return False",0.0094868944726466,0.1818740767186928,0.0032644065052073,0.0035364403806412,0.0038579349606995,0.8426893353462219,0.7989498972892761,0.82023686170578,0.8031184673309326
70,Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","def min_Swaps(str1):
    count = 0
    for i in range(len(str1)):
        if (str1[i]!= str1[i - 1]):
            count += 1
    if (count % 2 == 0):
        return (count // 2)
    else:
        return (count // 2)",0.0333460237915751,0.2174499553358398,0.0863324884708048,0.0356840952345993,0.0018457290638585,0.8261286616325378,0.8135550022125244,0.8197935819625854,0.814795196056366
71,Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","def max_uppercase_character(str1):
    dict = {}
    for i in range(len(str1)):
        if str1[i] >= 'A' and str1[i] <= 'Z':
            dict[i] = max(dict.get(i, i) for i in range(1, len(str1) - 1))
            else:
                dict[i] = max(dict.get(i, i), dict.get(i, i))
    return dict",0.008912246776685,0.2702702702702703,0.0027777777777777,0.0028571428571428,0.0029411764705882,0.8011401891708374,0.8100234866142273,0.805557370185852,0.8091262578964233
72,Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","def check_value(seq,x): 
    if x in seq: 
        return True
    return False",0.0054526389868501,0.0730734096210938,0.0020298169339192,0.0022835440506591,0.0026097646293247,0.7856534123420715,0.720611572265625,0.7517282962799072,0.7266271114349365
73,Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","def binary_search(arr, low, high):
    binary_search = 1
    start = 0
    end = len(arr) - 1
    while start < end:
        if arr[start] > arr[end]:
            binary_search(arr, start, end + 1)
        else:
            start = start + end
            end = end - 1
    return arr[start:end]
    return -1",0.0182818619068442,0.3390408595334034,0.0650837364282872,0.0022223714877951,0.00227793077499,0.843441367149353,0.8209730386734009,0.8320555090904236,0.8231658935546875
74,Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","def count_With_Odd_Factors(n): 
    arr = [0] * (n + 1) 
    count = 0
    for i in range(n + 1): 
        count += 1
        curr_sum = 1
        curr_term = 1
        while (i!= 0): 
            count += 1
            n = n // i 
            if (i % 2!= 0): 
                count += 1
            curr_term *= i 
            curr_sum += 1
    return",0.0041072643014725,0.0377358490566037,0.0019230769230769,0.0019607843137254,0.002,0.6893656253814697,0.7459918260574341,0.7165617346763611,0.7399140000343323
75,Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ","def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum; ",0.0441266002660449,0.3117977522208813,0.0736189137188192,0.0392634206500369,0.0042067950696468,0.9434370398521423,0.910993754863739,0.9269315600395203,0.9141373038291931
76,Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","def max_of_two( x, y ):
    if x > y:
        return x
    return y",0.0219728138749971,0.3076923076923076,0.0083333333333333,0.009090909090909,0.01,0.876299262046814,0.9008101224899292,0.8883856534957886,0.8982975482940674
77,Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","def sort_dict(my_list):
    result = sorted(my_dict.items(), key = lambda x: x[1]) 
    return result",0.0206245744615605,0.2300111036573308,0.0083640401329938,0.0092004441462932,0.0102227157181035,0.8488292694091797,0.8575718998908997,0.8531782627105713,0.8566895723342896
78,Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","def reverse_Vow(str1):
    return (str1[::-1] + str1[1:]) ",0.0001984093906222,0.0013622571461546,8.173542876928134e-05,0.0001021692859616,0.0001362257146154,0.8724130392074585,0.7308269143104553,0.7953680753707886,0.7428833842277527
79,Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ","def even_num_mean(n): 
    if (n % 2 == 0): 
        return (n / 2) 
    even_num = 0
    for i in range(1, n + 1): 
        if (i % 2 == 0): 
            even_num = even_num / 2
        else: 
            even_num = even_num % 2
    return even_num / 2",0.0135553146027871,0.2325581395348837,0.0238095238095238,0.0024390243902439,0.0025,0.8380416631698608,0.842890739440918,0.8404592275619507,0.8424033522605896
80,Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ","def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",0.0090091134743073,0.0799999999999999,0.0041666666666666,0.0043478260869565,0.0045454545454545,0.8266181349754333,0.8815767765045166,0.8532133102416992,0.875754177570343
81,Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","def next_palindrome(num):
    return int(num.replace(str(x)), 2)",0.0057963610685605,0.036287181315765,0.0022679488322353,0.0030239317763137,0.0045358976644706,0.8523893356323242,0.7699999809265137,0.8091026544570923,0.7775152921676636
82,Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","def volume_cuboid(l,r):
  volume = (1.0/3) * math.pi * r * r * r
  return volume",0.0309345882943137,0.2,0.0714285714285714,0.0076923076923076,0.0083333333333333,0.8583237528800964,0.9231445789337158,0.8895548582077026,0.916225254535675
83,Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","def freq_element(test_tup):
  res = len(list(set(test_tup)))
  return (res) ",0.0340522339563737,0.2476793999286233,0.0144479649958363,0.0173375579950036,0.0216719474937545,0.8325828313827515,0.8407504558563232,0.8366466760635376,0.839926540851593
84,Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[a-z]', '', text)
  result =  remove_upper(str1)
  return (result)",0.8153551038173115,0.9375,0.8666666666666667,0.7857142857142857,0.6923076923076923,0.9931081533432007,0.9931081533432007,0.9931081533432007,0.9931082725524902
85,Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","def count_Unset_Bits(n):  
    cnt = 0;  
    for i in range(1,n + 1): 
        temp = i;  
        while (temp): 
            if (temp % 2 == 0): 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ",0.0224697344037896,0.3437499999999999,0.064516129032258,0.0033333333333333,0.0034482758620689,0.8552370667457581,0.8926492929458618,0.8735427856445312,0.8887614607810974
86,Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","def encode_list(list1):
    result = [str(x) for x in list1]
    return result",0.0051900316319683,0.0707951666660037,0.0019468670833151,0.0021631856481278,0.0024335838541438,0.8321146965026855,0.7705675363540649,0.8001592755317688,0.7763095498085022
87,Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",0.0188897963468497,0.25,0.0571428571428571,0.0029411764705882,0.003030303030303,0.8484925031661987,0.8328689336776733,0.8406081199645996,0.8344054222106934
88,Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","def find_snake(n):
  s = (n * (n + 1) * (2 * n + 1)) / 6
  return s",0.0024903019135685,0.0553950149451913,0.0008353216539354,0.0008844582218139,0.0009397368606773,0.8155333995819092,0.7333587408065796,0.7722662091255188,0.7408234477043152
89,Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","def average_value(test_list):
  res = sum(map(lambda x: x[1] / x[0], test_list))
  return (res) ",0.0221625475730487,0.3066814715431077,0.0083640401329938,0.0092004441462932,0.0102227157181035,0.8307132124900818,0.8138812780380249,0.8222111463546753,0.8155336976051331
90,Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","def multi_order(n):
	if (n == 0):
		return 1
	return (n * (n - 1) + 1) / 2",0.0128461897267677,0.111111111111111,0.0058823529411764,0.00625,0.0066666666666666,0.8142282366752625,0.8022233247756958,0.8081812262535095,0.8034078478813171
91,Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","def find_equilibum(arr, n):
  for i in range(0, n):
    for j in range(0, i):
      if arr[i] == arr[j]:
        return i
  return -1",0.0276551818585316,0.3542423304103877,0.0826565437624238,0.0043503444085486,0.0045920302090235,0.8697102069854736,0.8247162103652954,0.8466158509254456,0.8290050029754639
92,Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","def square_Sum(n):
    i = 1
    while i*i <= n:
        j = 1
        while (j*j <= n):
            if (i*i+j*j == n):
                return True
            j = j+1
        i = i+1     
    return False",0.0206673621447291,0.2,0.0689655172413793,0.0035714285714285,0.0037037037037037,0.7462813258171082,0.848164975643158,0.7939680218696594,0.8367416858673096
93,Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","def count_hex(l,r):
    l.sort()
    return (l[0]),(l[1])",2.9007972055004806e-06,1.815997190499394e-05,1.134998244062121e-06,1.5133309920828286e-06,2.269996488124243e-06,0.7777591943740845,0.688980221748352,0.730682909488678,0.6969355344772339
94,Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j*j*j*j*j*j*j); 
    return sm ",0.0585645823327536,0.4166666666666667,0.1304347826086956,0.0454545454545454,0.0047619047619047,0.9499337077140808,0.9598835110664368,0.9548826813697815,0.9588792324066162
95,Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result","def anagram_string(str1):
  result = list(filter(lambda x: x == 'a', str1))
  return result",0.1941225805945736,0.4776875403825261,0.2605568402086506,0.1433062621147578,0.0796145900637543,0.9108418226242065,0.8616055846214294,0.8855398893356323,0.8662883639335632
96,Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","def neg_count(list1):
  neg_count= 0
  for num in list1: 
    if num <= 0: 
      neg_count += 1
  return neg_count ",0.3118181497809655,0.5294117647058824,0.3125,0.2666666666666666,0.2142857142857142,0.8973749279975891,0.9587168097496033,0.9270322322845459,0.9522078037261963
97,"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","def eulerian_number(n, m): 
	if (m == 0): 
		return 1
	return (2 * m + 1) ",0.1133853555891986,0.1870397389455311,0.1233229047992513,0.099606961568626,0.0719383611328965,0.9210004210472107,0.887726366519928,0.9040573239326477,0.8909451961517334
