,text,code,generation,bleu,1-gram bleu,2-gram bleu,3-gram bleu,4-gram bleu,precision,recall,F1,F3
0,Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ","def lcs_of_subseq(arr, n): 
	n = n 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(0, i): 
			if (arr[i] > arr[j] and
				dp[i] < dp[j] + 1): 
				dp[i] = dp[j - 1] + 1
	return dp[n - 1]",0.0491552174966415,0.3870399234989634,0.1440927853719084,0.0553527163318916,0.0018912178080062,0.8636229038238525,0.8406355977058411,0.8519742488861084,0.8428791165351868
1,Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","def even_position(n): 
    return sum(range(i,n+1,2)) ",0.0006437722894531,0.0033689734995427,0.0002245982333028,0.0003368973499542,0.0006737946999085,0.8412116169929504,0.8010192513465881,0.8206235766410828,0.804864764213562
2,Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if (i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",0.766185035460935,0.8888888888888888,0.8076923076923077,0.72,0.6666666666666666,0.9981359243392944,0.9981359243392944,0.9981359243392944,0.9981359839439392
3,Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","def sum_positive_nums(n):
    ans = 0
    while n!= 0:
        n = n // 2
        ans = ans * (n - 1)
        return ans   
def sum_negative(n):
    n = n // 2
    sum_positive = 0
    for i in range(n):
        if n % 10 == 0:
            sum_positive += (n - 1) * n
        else:
            sum_positive += (n - 1) * n",0.0095844603204187,0.1403508771929824,0.0178571428571428,0.0018181818181818,0.0018518518518518,0.7792168259620667,0.8725081086158752,0.8232278823852539,0.8621856570243835
4,Write a python function to count the pairs with xor as an odd number.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ","def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(0,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",0.365210559422655,0.6251019726640885,0.4220637360187196,0.3209079645762165,0.2101183101391893,0.9778090715408325,0.9622775912284851,0.9699811935424805,0.9638084769248962
5,Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","def remove_consecutive_duplicates(l):
    return [i for i in l if l.count(i)==1]",0.0221115414386905,0.2963272882726872,0.0082313135631302,0.0092602277585214,0.0105831174383102,0.830399751663208,0.8031092286109924,0.8165265321731567,0.8057572841644287
6,Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","def nCr_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) * (C[j] + C[j-1]) / 6",0.4250553514147452,0.5490196078431373,0.46,0.3877551020408163,0.3333333333333333,0.9284136295318604,0.9430466890335083,0.9356729388237,0.9415627121925354
7,Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","def check_key(dict, key):
  if key in dict:
    return True
  else:
    return False",0.356550620855925,0.6666666666666666,0.3636363636363636,0.3,0.2222222222222222,0.9560984373092651,0.9463353157043457,0.9511918425559998,0.9473025798797607
8,Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())","def is_lower(string):
  return (string.lower())",1.0,1.0,1.0,1.0,1.0,0.9999997615814209,0.9999997615814209,0.9999997615814209,0.9999998211860657
9,Write a function to return true if the password is valid.,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","def check_password(password):
  if any(password == password for x in range(10)):
    return True
  else:
    return False",0.0085997686830705,0.0881594070515128,0.0354211903331971,0.0012715299093968,0.0013774907351798,0.7588528394699097,0.6999186277389526,0.728195309638977,0.7053969502449036
10,Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","def remove_words(text, K):
  words = re.findall('\w+',text)
  return (words)",0.006024007776505,0.0766774834224642,0.0021907852406418,0.0025559161140821,0.0030670993368985,0.8189741969108582,0.8016368746757507,0.8102127909660339,0.803337574005127
11,Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","def add_list(test_list, test_tup):
  test_list += test_tup
  return (test_list) ",0.0284694693814936,0.2920502936517768,0.0111257254724486,0.01298001305119,0.015576015661428,0.9448506832122803,0.9133226275444031,0.9288191199302673,0.9163804650306702
12,Write a function to get the sum of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))","def number_sum(num):
  sum=0
  for i in range(num):
    if i % 2 == 0:
      sum = sum + i
  return sum",0.0278546851736488,0.3499999999999999,0.0526315789473684,0.0055555555555555,0.0058823529411764,0.8339218497276306,0.8219504356384277,0.8278928399085999,0.8231319785118103
13,Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","def insert_string(list,element):
 list = [element for i in list if i!= element]
 return list",0.080322768728153,0.3571428571428572,0.1538461538461538,0.0833333333333333,0.009090909090909,0.9168892502784729,0.9121938943862915,0.9145355224609375,0.9126611948013306
14,Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","def closest(test_list1, test_list2):
  res = list(set(test_list1) & set(test_list2))
  return (res) ",0.0698534205658009,0.6,0.2222222222222222,0.0125,0.0142857142857142,0.9466314315795898,0.9071494936943054,0.9264699816703796,0.9109488725662231
15,Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False","def check_num_position(text):
    n = len(text)
    for i in range(n):
        if (text[i] == '\n'):
            return True
    return False",0.0395671672945243,0.4117647058823529,0.125,0.0066666666666666,0.0071428571428571,0.8334247469902039,0.8084536790847778,0.8207494020462036,0.8108832240104675
16,Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1","import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def get_Pos_Of_Right_most_Set_Bit(n): 
    if (n == 0): 
        return 0
    pos = get_Pos_Of_Right_most_Set_Bit(n)      
    return pos",0.0541531525351089,0.2105263157894736,0.111111111111111,0.0588235294117647,0.00625,0.8493971228599548,0.9354798793792725,0.8903626203536987,0.9260942935943604
17,Write a python function to find the maximum length of sublist.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ","def max_length_list(lst):
    max_length = 0
    for i in lst:
        max_length = max(len(x) for x in i)
    return max_length ",0.2186976686325118,0.3888888888888889,0.2352941176470588,0.1875,0.1333333333333333,0.9184516072273254,0.9441357851028442,0.9311165809631348,0.9415029287338257
18,Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","def zip_tuple(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",0.0608059975103827,0.3636363636363636,0.1428571428571428,0.05,0.0052631578947368,0.8885379433631897,0.9022336006164551,0.8953334093093872,0.9008451700210571
19,Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","def adjacent_elements(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",0.0437481143122464,0.5,0.1333333333333333,0.0071428571428571,0.0076923076923076,0.9004484415054321,0.9182736873626709,0.9092736840248108,0.916459321975708
20,Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) ","def rectangular_num(n): 
	if (n == 0): 
		return 1
	return rectangular_num(n - 1) + rectangular_num(n - 2)",0.0173957973756422,0.25,0.0066666666666666,0.0071428571428571,0.0076923076923076,0.8531298041343689,0.8821048736572266,0.867375373840332,0.8791190385818481
21,Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","def Check_Vow(string, vowels):
    final = [each for each in string if each in vowels]
    return(len(final)) 
",0.0007379952495832,0.0142695973389009,0.0002548142381946,0.0002744153334404,0.0002972832778937,0.7819383144378662,0.6813170909881592,0.7281680703163147,0.6901986598968506
22,Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","def odd_Average(n): 
    odd = 0
    for i in range(0, n): 
        if (n % i!= 0): 
            odd += 1
    return odd / i ",0.008937663444811,0.1322673652771425,0.003464145281068,0.0036373525451214,0.0038287921527593,0.8366233110427856,0.8104934692382812,0.8233511447906494,0.8130327463150024
23,Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","def shell_sort(arr):
    arr_len = len(arr)
    while not arr_len:
        arr_len = len(arr)
        arr[0] = arr[0]
        arr_len = len(arr)
        shift_down(arr, 0, len(arr) - 1)
        shift_down(arr, 1, len(arr))
    return arr",0.0053934394703563,0.136126170084719,0.0017670224001381,0.0018377032961437,0.0019142742668163,0.8048171997070312,0.7665532231330872,0.7852193117141724,0.7702150940895081
24,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","def check_monthnum_number(monthnum1):
  if(monthnum1 == 2 or monthnum1 == 3 or monthnum1 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 7):
    return True
  else:
    return False",0.141543757252386,0.3666666666666667,0.1379310344827586,0.1071428571428571,0.074074074074074,0.9430691003799438,0.947735607624054,0.9453965425491333,0.9472668170928955
25,Write a function to check if a binary tree is balanced or not.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","class Node: 
	def is_balanced_tree(self, data): 
	if (data == None): 
		return False
	if (is_balanced): 
		return True
	else: 
		return False",0.0080704683699123,0.0560581701899123,0.0215838944046721,0.005733221951241,0.000611543674799,0.8740808963775635,0.7463238835334778,0.8051660656929016,0.7573940753936768
26,Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","def is_undotify(n) : 
    return False",0.0034357762028603,0.0163942334683755,0.0068309306118231,0.000910790748243,0.0013661861223646,0.8778730034828186,0.766581118106842,0.8184611201286316,0.77642422914505
27,Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","def third_limit_sum(nums):
  sum_of_three = list(filter(lambda nums:nums>0,nums))
  return sum_of_three",0.0200347043294414,0.1516326649281583,0.0086647237101804,0.0101088443285438,0.0121306131942526,0.8303921818733215,0.7963342666625977,0.8130066990852356,0.7996138334274292
28,"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result","def extract_data(list1, n):
    result = [i for i in list1 if len(list1)!= n]
    return result",0.2388387087719123,0.4915680337594688,0.2872800197295597,0.2062523218571197,0.1117200076726065,0.9077380299568176,0.8393651247024536,0.8722136616706848,0.8457353711128235
29,Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] ","def split(s): 
    return (ord(s[0]) + 1)  ",0.0347870055454239,0.238843770191263,0.0143306262114757,0.0179132827643447,0.0238843770191263,0.8376961946487427,0.8369921445846558,0.8373439908027649,0.8370624780654907
30,"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","def entringer_num(n, k):
  if (k == 0):
    return 2
  else:
    return 3",0.077395510749037,0.1368597717199395,0.0933134807181405,0.0615868972739727,0.0456199239066464,0.865718424320221,0.8271394371986389,0.8459893465042114,0.8308418989181519
31,Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum","def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",0.02239302892148,0.2361832763705073,0.0429424138855467,0.0047236655274101,0.0052485172526779,0.857208251953125,0.8087321519851685,0.8322649002075195,0.813331663608551
32,Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","def count_char(str1):
  count_chars = 0
  for i in range(len(str1)):
    if ((i == ord(str1[i]) - ord('a')) or
      count_chars += 1
  return count_chars",0.2021780303733923,0.3809523809523809,0.25,0.1578947368421052,0.111111111111111,0.8429790735244751,0.8961607217788696,0.8687567114830017,0.8905425071716309
33,Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","def volume_triangle(n,k):
  volume=(3*n*k)*(3*n*k)
  return volume",0.0192445964740191,0.1204776847648808,0.007529855297805,0.01003980706374,0.0150597105956101,0.8307621479034424,0.8273292779922485,0.8290421962738037,0.827671229839325
34,Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",0.9060835530358324,0.9622641509433962,0.9230769230769232,0.8823529411764706,0.86,0.9936277866363525,0.9931333065032959,0.9933804869651794,0.9931826591491699
35,Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","def chain_pairs(pairs):
    if len(pairs)>1:
        return [len(pairs[i]) for i in range(len(pairs))]
    elif len(pairs)==1:
        return [[arr[i] for arr in pairs]!= 1]
    else:
        return [sorted(pairs[i]) for i in range(len(pairs))]",0.0169579403944771,0.1019494488252939,0.0385554279193838,0.0200809520413457,0.0010477018456354,0.7809605002403259,0.7750903964042664,0.7780143618583679,0.7756734490394592
36,Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            return i; 
            break;      
    return res; ",0.8482942955247808,0.9192232297295908,0.8757816782300826,0.8283908947760739,0.7764867033740642,0.9904480576515198,0.9901831746101379,0.9903156161308289,0.9902096390724182
37,Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n): 
        for j in range(0, i): 
            if (pow(C[i], k) % 2 == 0): 
                C[i] = C[j] + C[j - 1] 
            else: 
                C[j] = C[j - 1] + C[j - 1",0.0044533235276909,0.0408163265306122,0.0020833333333333,0.002127659574468,0.0021739130434782,0.7001026272773743,0.7948770523071289,0.7444857358932495,0.7842603325843811
38,Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","def smallest_Power_of_2(n):
    res = 0; 
    for i in range(n, 0, -1):
        if ((i & (i - 1)) == 0):
            res = i; 
            break;      
    return res; ",0.0193067840007765,0.2726860124691876,0.0355059912069254,0.0037049729955052,0.0038733808589373,0.8702117800712585,0.8819595575332642,0.8760462999343872,0.8807705640792847
39,Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ","def get_Inv_Count(arr,n):
    inv_count = 0
    for i in range(n):
        if (arr[i] > arr[i - 1]):
            inv_count += 1
    return inv_count ",0.4048173772179957,0.5926545765453743,0.467885192009506,0.3704091103408589,0.2614652543582534,0.9630993008613586,0.9506860971450806,0.9568524360656738,0.9519129395484924
40,Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ","def vowels(string):
    vowels = set(string.lowercase)
    for i in range(len(string)):
        if string[i] in vowels:
            return True
    return False",0.0162673926003057,0.2352941176470588,0.00625,0.0066666666666666,0.0071428571428571,0.7871851325035095,0.7786096334457397,0.7828739285469055,0.77945876121521
41,Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","import re
def split_list(text):
 return (re.findall('[A-Z][^A-Z]*', text))",0.274941620352113,0.8571428571428571,0.6666666666666666,0.4,0.025,0.9879979491233826,0.9758183360099792,0.9818703532218933,0.9770227074623108
42,Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
","def consecutive_unique_nums(nums):
    result = 0
    for i in nums:
        if i == 1:
            result = 1
    return result",0.0278211574132683,0.1933328004401418,0.0614115954339274,0.0217499400495159,0.0023199936052817,0.7922210693359375,0.7246633768081665,0.7569378018379211,0.7308961749076843
43,Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","def find_max_palindic(arr, n): 
	n = len(arr) 
	dp = [0 for i in range(n)] 
	dp[0] = 1
	for i in range(n): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return max(dp)",0.013991234602843,0.1082056036900238,0.0371956762684456,0.0095988841983085,0.0009918847004918,0.7956258058547974,0.766673743724823,0.7808815240859985,0.7694737911224365
44,"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n","import math 
def check_abundant(n): 
	if (n % 3 == 0): 
		return True
	else: 
		return False",0.0141625579695809,0.238843770191263,0.0051180807898127,0.005511779312106,0.0059710942547815,0.8094877600669861,0.7293038964271545,0.7673066854476929,0.7366002202033997
45,Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","def move_zero(arr, n):
    a = [0 for i in range(n)]
    x = [ i for i in range(n)]
    if x == 0:
        x.extend(a)
    else:
        x.extend(a[i:])
    return (x)",0.0641616842963892,0.4127124026191912,0.1428619855220277,0.0742882324714544,0.0038691787745549,0.8151458501815796,0.8334589600563049,0.8242006301879883,0.8315906524658203
46,Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)","import re
def extract_num(text1):
  result = re.findall('[0-9]+[.](\d{4})+', text1)
  return result",0.0971702834321306,0.4093653765389909,0.1819401673506626,0.1023413441347477,0.0116961536153997,0.8436818718910217,0.8415824174880981,0.8426308035850525,0.8417919278144836
47,Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","def next_Square(n) :
    for i in range(n):
        if ((n % i) == 0):
            return i;
    return next_Square(n)",0.0136791921231218,0.1176470588235294,0.00625,0.0066666666666666,0.0071428571428571,0.8258880972862244,0.8068376183509827,0.8162516951560974,0.8087029457092285
48,Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result","def check_sorted(list1, lst):
    sorted_list = sorted(list1)
    if sorted_list:
        return True
    else:
        return False",0.0204480073602183,0.2307692307692307,0.0083333333333333,0.009090909090909,0.01,0.8388868570327759,0.7877573370933533,0.8125185370445251,0.7925881147384644
49,Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","def find_lcm(x, y): 
    if x % y == 0: 
        return y 
    return find_lcm(x, y) ",0.0293582437175291,0.1434408172382763,0.0686554338918245,0.0371883600247383,0.0020284560013493,0.8898134827613831,0.8249191641807556,0.8561383485794067,0.830979585647583
50,Write a function to extract values between quotation marks of a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))","import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))",0.2055668084502598,0.7142857142857143,0.5,0.2,0.025,0.9374648928642273,0.9695335626602173,0.9532296061515808,0.9662282466888428
51,Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","def find_gcd(x,y):
  if x < y:
    return y
  else:
    return x * y",0.0140738017953637,0.131016170829785,0.02838683701312,0.0030967458559767,0.0034064204415744,0.8701378107070923,0.8240105509757996,0.8464462757110596,0.828402042388916
52,Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","def count_Solution(n): 
    res = 1
    for i in range(1,n): 
        if (n % i == 0): 
            return i 
        res = res * (1 - math.pow(i, 2)) / i 
    return res ",0.0091525416206989,0.1379310344827586,0.0035714285714285,0.0037037037037037,0.0038461538461538,0.7529998421669006,0.7314636707305908,0.7420755624771118,0.7335616946220398
53,Write a function to convert rgb color to hsv color.,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","def hsv_to_rgb(hsv):
    if (len(rgb) == 3):
        return rgb
    else:
        return hsv_to_hsv(rgb[0], rgb[1])",4.523834123871312e-05,0.0007400431440559,1.6146395870312545e-05,1.77610354573438e-05,1.9734483841493103e-05,0.7783611416816711,0.6492179036140442,0.7079481482505798,0.6601712107658386
54,Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","def count_Range(list1, m, n):
    result = 0
    for x in list1:
        if (x < m):
            result+= 1
    return result",0.1982071767842719,0.4044977363479903,0.2372054626732042,0.1506952351100356,0.1067424582029419,0.8906376957893372,0.8820292949676514,0.8863126039505005,0.8828825950622559
55,Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","def largest_sum(nums):
     return max(nums)  ",0.0579505347073395,0.3032653298563167,0.0202176886570877,0.0303265329856316,0.0606530659712633,0.952663004398346,0.9104548096656799,0.9310807585716248,0.9145066738128662
56,Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","def multiply_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)",0.855526185871245,0.9285714285714286,0.8461538461538461,0.8333333333333334,0.8181818181818182,0.9972545504570007,0.9972545504570007,0.9972545504570007,0.9972545504570007
57,Write a python function to find minimum sum of factors of a given number.,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum","import math 
def min_Sum_Of_Factors(n): 
    if (n % 2!= 0): 
        return 0
    res = 1
    for i in range(2,n + 1): 
        fact = 1
        for j in range(i + 1,n): 
            fact = fact * i 
            while (fact % 2 == 0): 
                break 
            res *= fact 
            n >>= 1 
    return res ",0.0150373076548423,0.2653061224489796,0.0416666666666666,0.002127659574468,0.0021739130434782,0.8132928609848022,0.8559460043907166,0.8340744972229004,0.8514804244041443
58,Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","def octagonal_num(n): 
	return int(n * (7 * n - 5) / 2) ",0.1002515743147813,0.5,0.1818181818181818,0.1,0.0111111111111111,0.8662312030792236,0.8980863690376282,0.8818712830543518,0.8947957754135132
59,Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","def sort_counter(nums):
    arr_len = len(nums)
    heap = [0] * (arr_len + 1)
    heap = [0] * (arr_len + 1)
    while True:
        if heapq.heappush(heap, [nums[i] for i in range(heap_len)])
        else:
            heapq.heappush(heap, [nums[i] for i in range(heap_len)])
            i = 0
    return heap",0.0060813896958098,0.075,0.0025641025641025,0.0026315789473684,0.0027027027027027,0.6594536900520325,0.7490806579589844,0.7014156579971313,0.7390363216400146
60,"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","def assign_pairs(test_tup):
  res = [tuple(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2)]
  res_dict = dict(res_tup)
  res = [(key, val) for key, val in res_dict.items()]
  return (res_dict) ",0.1155664798541668,0.3076923076923076,0.1599999999999999,0.0833333333333333,0.0434782608695652,0.8209302425384521,0.8575335144996643,0.8388327956199646,0.8537269830703735
61,Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ","def list_strings(input_list):
  result = map(lambda x:x.strip(), input_list)
  return list(result)",0.0603072536040776,0.4444444444444444,0.125,0.0142857142857142,0.0166666666666666,0.858592689037323,0.8932532668113708,0.8755800724029541,0.8896617889404297
62,Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","import re
def put_spaces(text):
  return (re.sub('[a-z]([A-Z])','\\1 ', text))",0.1303642066657795,0.4412484512922977,0.2521419721670273,0.1470828170974326,0.0176499380516919,0.9340057373046875,0.8852617144584656,0.908980667591095,0.8899059891700745
63,Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","def count_nums(nums):
    count = 0
    for x in nums:
        if x == counts:
            count += 1
    return count ",0.0715224153123931,0.420426430625229,0.1669340239247233,0.0591224668066728,0.0063063964593784,0.8711670637130737,0.8520490527153015,0.8615020513534546,0.8539230227470398
64,Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","def first_duplicate(nums):
    nums_set = set(nums)    
    result = next((el for el in nums if nums_set.add(el)!= 1),-1) 
    return result",0.0139426006778547,0.3068424540643743,0.0046574301063342,0.0049679254467565,0.005322777264382,0.8688535094261169,0.8619198799133301,0.8653727769851685,0.8626082539558411
65,Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","def max_sum_of_rectangles(n, k): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(1, k): 
		for j in range(1, n+1): 
			if (dp[i] - dp[j]) % k == 0: 
				dp[i] = dp[j - 1] + dp[i - 2] + dp[j - 1] 
			if",0.0658860251710076,0.2291666666666666,0.0851063829787233,0.0434782608695652,0.0222222222222222,0.7961963415145874,0.789405345916748,0.7927862405776978,0.7900792360305786
66,Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ","def first_element(lst): 
    return next((x[0] for x in lst),-1) ",0.0392814650900513,0.5,0.0142857142857142,0.0166666666666666,0.02,0.8677928447723389,0.9346701502799988,0.8999907970428467,0.9275220632553101
67,Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","def remove_list(list1, list2):
    result = [n for n in list1 if n not in list2]
    return result",0.3673341329152363,0.7647058823529411,0.5,0.3333333333333333,0.1428571428571428,0.9758009910583496,0.9629873633384705,0.9693518280982971,0.9642535448074341
68,Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","def filter_dict(test_dict, name):
  res = {key: test_dict[key] for key in test_dict if not test_dict[key] == name}
  return  (res)
",0.0169065364648562,0.3333333333333333,0.0058823529411764,0.00625,0.0066666666666666,0.8658840656280518,0.8695026636123657,0.8676896095275879,0.8691393733024597
69,Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","def check_Length(string) : 
    return (ord(string[0]) == ord('A')) 
    and (check_Length(string) == 1) : 
        return True
    else : 
        return False",0.0103571332640692,0.1781056634527651,0.0037716493437056,0.0040073774276872,0.0042745359228663,0.8249439001083374,0.7792277336120605,0.8014343976974487,0.7835700511932373
70,Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","def min_Swaps(str1, str2) : 
    count = 0
    for i in range(len(str1)) : 
        if (str1[i]!= str2[i]) : 
            count += 1
    if (count % 2 == 0): 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",0.0337480412427134,0.2078651681472542,0.089235046931902,0.0368094568594095,0.0018998429346792,0.8150771856307983,0.811139702796936,0.8131036758422852,0.8115317821502686
71,Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","def max_run_of_uppercase(str1):
	n = len(str1)
	max_run = -1
	for i in range(1, n+1):
		if ((str1[i] == str2[i]) or (str1[i] == str2[i]), -1)):
			max_run = max(max_run,i)
	return max_run",0.0090584843936028,0.2286290212490106,0.00296778056429,0.0030864917868616,0.0032150956113142,0.8172237277030945,0.8041824102401733,0.810650646686554,0.8054677844047546
72,Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","def check_value(seq,value): 
    s = set(seq) 
    if len(s) == 1: 
        return True
    else:
        return False",0.0074275491855267,0.0846680917129044,0.0030393673948222,0.0032926480110573,0.0035919796484262,0.7828792929649353,0.7270155549049377,0.753913938999176,0.7322405576705933
73,Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","def binary_search(arr, x):
    binary_search = binary_search(arr, 0, len(arr) - 1)
    return binary_search(arr, binary_search, len(arr))",0.0019127558201783,0.0270543945767264,0.0007283875462964,0.0007890865084878,0.0008608216456231,0.8274076581001282,0.738900899887085,0.780653715133667,0.7468902468681335
74,Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","def count_odd_Factors(n,l,r): 
    res = 1
    for i in range(2,n + 1): 
        arr = [i for i in range(r, 0, -1) if (arr[i] % 2!= 0) \
        if (arr[i] == 1 and arr[i] % 2 == 0): 
            res = res + 1
    return res ",0.0050976158023,0.0465116279069767,0.0023809523809523,0.0024390243902439,0.0025,0.7406169176101685,0.7759325504302979,0.7578635215759277,0.7722501158714294
75,Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ","def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ",0.176341011666461,0.4503586444258919,0.1970319069363277,0.1244412043808385,0.0875697364161456,0.966887891292572,0.9536809325218201,0.960239052772522,0.9549853801727295
76,Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","def max_of_two( x, y ):
    if x > y:
        return x
    return y",0.0219728138749971,0.3076923076923076,0.0083333333333333,0.009090909090909,0.01,0.876299262046814,0.9008101224899292,0.8883856534957886,0.8982975482940674
77,Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","def sort_dict(d):
  sorted_dict = sorted(d.items(), key = lambda x: x[1])
  return sorted_dict",0.0495569629279098,0.3833518394288847,0.1672808026598769,0.0092004441462932,0.0102227157181035,0.9004783630371094,0.883024275302887,0.8916659355163574,0.8847392201423645
78,Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","def reverse_Vow(string):
  return (string[::-1] if string[::-1] == 'Vow' else string[::-1])",0.0015283354334129,0.0165069660169221,0.0006113691117378,0.000687790250705,0.0007860460008058,0.8211196660995483,0.73459792137146,0.7754528522491455,0.7424208521842957
79,Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ","def even_num(n): 
    count = 0
    for i in range(1, n + 1): 
        if (i % 2 == 0): 
            count+=1 
        else: 
            count+=1 
    return count  ",0.0297652304785097,0.1976475143071251,0.051657873057544,0.0270588858872849,0.0028411830181649,0.8575804233551025,0.8521372675895691,0.854850172996521,0.8526784181594849
80,Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ","def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",0.0090091134743073,0.0799999999999999,0.0041666666666666,0.0043478260869565,0.0045454545454545,0.8266181349754333,0.8815767765045166,0.8532133102416992,0.875754177570343
81,Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","def next_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x",0.017574285132979,0.3296203151002218,0.0059930966381858,0.0065924063020044,0.007324895891116,0.9247995018959045,0.8842533826828003,0.9040719866752625,0.8881473541259766
82,Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","def volume_cuboid(l,n):
  volume = l * l * l
  return volume",0.044116293593227,0.2727272727272727,0.1,0.0111111111111111,0.0125,0.9382169246673584,0.9197801351547241,0.9289070963859558,0.9215912222862244
83,Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","from collections import defaultdict
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ",0.015276780223747,0.2222222222222222,0.0058823529411764,0.00625,0.0066666666666666,0.7799289226531982,0.8447214365005493,0.8110331296920776,0.8377617001533508
84,Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","import re
def remove_uppercase(str1):
 remove_upper = lambda text: re.sub('[A-Z]', '', text)
 result =  remove_upper(str1)
  return (result)",1.0,1.0,1.0,1.0,1.0,0.9941803812980652,0.9942242503166199,0.9942023158073425,0.9942198395729065
85,Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","def count_Unset_Bits(n):  
    count = 0
    while (n): 
        count += 1
        n >>= 1
    return count ",0.0616579111872177,0.288376528636972,0.1685317375151135,0.0907478586619842,0.0032770060072383,0.9453206658363342,0.8911951780319214,0.9174603223800659,0.8963271975517273
86,Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","def decode_list(list1):
    return [len(x) for x in list1]",0.0028455397870727,0.0362198785171257,0.0010348536719178,0.0012073292839041,0.001448795140685,0.8344966769218445,0.7576526999473572,0.7942202687263489,0.764694333076477
87,Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",0.0188897963468497,0.25,0.0571428571428571,0.0029411764705882,0.003030303030303,0.8484925031661987,0.8328689336776733,0.8406081199645996,0.8344054222106934
88,Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","def find_snake(n): 
	snake = [[0 for i in range(n)] for j in range(n)] 
	snake[0][0] = 1
	for i in range(1, n+1): 
		snake[i] = deci_value(snake[i - 1][0], i - 1) 
	return (snake[n - 1] - s[n]) ",0.0259463344265598,0.2258872488031037,0.0664374261185599,0.0171126703638714,0.0017647441312742,0.8438015580177307,0.824028491973877,0.8337978720664978,0.8259640336036682
89,Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","def find_average(test_list):
  res = sum(map(lambda x: x[1] / x[0], test_list))
  return (res) ",0.0221625475730487,0.3066814715431077,0.0083640401329938,0.0092004441462932,0.0102227157181035,0.8269590735435486,0.8099863529205322,0.8183847069740295,0.8116522431373596
90,Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","def multi_ples(n):
	dp = [0]*(n + 1) 
	dp[0] = 1
	for i in range(1, n+1):
		dp[i] = dp[i - 1] + 1
	return dp[n]",0.0094104899579516,0.0833333333333333,0.0043478260869565,0.0045454545454545,0.0047619047619047,0.7951158881187439,0.8189276456832886,0.8068461418151855,0.8164824843406677
91,Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","def find_equilib(array, n):
  for i in range(n):
    if (array[i] == arr[i]):
      return i",0.0178549227302464,0.2139279224910752,0.0331078927664759,0.0036117701199791,0.0039729471319771,0.8687920570373535,0.7823095321655273,0.8232858777046204,0.790175199508667
92,Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","def is_Diff(n): 
    i = 1
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False",0.0186964259949365,0.1818181818181818,0.0625,0.0032258064516129,0.0033333333333333,0.7457430958747864,0.8468532562255859,0.7930886149406433,0.8355249166488647
93,Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","def hex_range(r,l):
    return int(r * (l - 1) / (l - 1)) ",0.0006228081829379,0.006945733488531,0.0002525721268556,0.0002778293395412,0.0003086992661569,0.7578880786895752,0.6793307065963745,0.7164624333381653,0.6864458918571472
94,Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm ",0.0585645823327536,0.4166666666666667,0.1304347826086956,0.0454545454545454,0.0047619047619047,0.957706868648529,0.9668340682983398,0.9622488021850586,0.9659134745597839
95,Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result","def anagram_string(nums):
  result = list(filter(lambda x: x =='string', nums))
  return result",0.1840598775095172,0.4039231756892703,0.2538945675761128,0.1410525375422848,0.0793420523675352,0.9155323505401611,0.8609026670455933,0.8873775005340576,0.8660704493522644
96,Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ",0.0805111000764593,0.4705882352941176,0.1875,0.0666666666666666,0.0071428571428571,0.8850868940353394,0.9195385575294495,0.9019837975502014,0.9159731864929199
97,"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","def eulerian_number(n, m): 
	if (n == 0): 
		return 1
	return (2 * m + 1) / (n - 1) ",0.1037292163926622,0.2710690619157996,0.1430642271222275,0.0649199013831957,0.0459849301464303,0.9149521589279175,0.9055691957473755,0.9102364778518677,0.9064988493919373
