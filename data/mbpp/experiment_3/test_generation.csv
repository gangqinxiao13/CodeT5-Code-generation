text,code,generation
Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ","def longest_subseq_with_longest_subseq(arr): 
	n = len(arr) 
	longest_subseq = [1]*n 
	for i in range (1, n): 
		for j in range(0, i): 
			if ((arr[i] > arr[j]) and (l == i) or (arr[i] < l[j]): 
				longest_subseq[i] = longest_subseq[j]+1
	for i in range(n):"
Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","def odd_Sum(n): 
    sum = 0
    for i in range(0,n) : 
        if (i % 2 == 0) : 
            sum = sum + i 
    return sum"
Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","import re
def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if i % 2 == 0:
        str2 = str2 + str1[i - 1]
 return str2"
Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","def sum_positivenum(n): 
	x = [0]*(n + 1) 
	res = 1
	while (n): 
		res *= (n - 1) 
		n = n + 1
	return res
def sum_positivenum(n): 
	x = [0] * (n + 1)
	for i in range(1, n):
		x[i] = 1
		for i in range(1, n):
			res[i"
Write a python function to count the pairs with xor as an odd number.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ","def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; "
Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","def remove_consecutive_duplicates(l):
    return [i for i in l if l[:i] == l[i + 1:]]"
Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","def nCr_mod(n, r): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] "
Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","def check_key(dict, key):
  if key in dict:
    return True
  else:
    return False"
Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())","def is_lower(string):
  return (string.lower())"
Write a function to return true if the password is valid.,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","def check_password(password):
  if any(password == password for i in range(1,n)):
    return True
  else:
    return False"
Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","def remove_k_words(text, k):
  return (text) 
"
Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","def add_list(test_tup):
  test_tup = list(test_tup)
  test_tup.append(test_str)
  return (test_tup) "
Write a function to get the sum of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))","def number_sum(n):
  sum = 0
  for num in range(1,n):
    sum = sum + num
  return sum"
Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","def insert_string(list,string):
 list = [v for v in list for k in (string, k)]
 return list"
Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","def similar_elements(test_list1, test_list2):
  res = set(test_list1) & set(test_list2)
  return (res) "
Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False","def check_num(string):
  n = len(string)
  if n > 0:
    return True
  else:
    return False"
Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1","import math 
def get_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)"
Write a python function to find the maximum length of sublist.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ","def Find_Max_Len_Of_List(lst): 
    maxList = max((x) for x in lst) 
    return maxList"
Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","def zip_list(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) "
Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","def adjacent_elements(test_tup):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup, test_tup[1:]))
  return (res) "
Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) ","def find_rectangular(n): 
	if (n == 0): 
		return 1
	if (n == 1): 
		return 1
	return find_rectangular(n - 1) + find_rectangular(n - 2)"
Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","def count_vowels(str):
    n = len(str)
    for i in range(1,n):
        if ord(str[i]) in 'a' and ord(str[i]) in 'aeiou':
            n = n% ord(str[i])
    return n"
Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","def odd_Average(n): 
    if n % 2!= 0: 
        return n 
    else: 
        return 0"
Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","def shell_sort(my_list):
    arr_len = len(my_list)
    while arr_len > 1:
        child = my_list[0]
        child.sort()
        arr_len = int(child.sort()[0])
        child.sort()
    return arr_len
def sort_list(my_list):
    arr = sorted(my_list, key=lambda x: x[1])
    return arr_len"
Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","def check_monthnum_number(monthnum1):
  if(monthnum1 == 2):
    return True
  else:
    return False"
Write a function to check if a binary tree is balanced or not.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","def check_balanced(node): 
	if node == Node: 
		return True
	if node == Node: 
		return False
	if node == Node: 
		return True
	else:
		return False"
Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","def is_undotify(n): 
	temp = n 
	n1 = 0
	temp = 0
	while temp > 0: 
		temp = int(temp / 10) 
		n1 += 1
		temp = int(temp / 10) 
		if (temp == n1): 
			return True
		elif (temp > n2): 
			return False
		temp = n2 
	return False"
Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","def sum_of_three(nums):
    sum = 0
    for i in nums:
        sum = sum + i*i       
    return sum"
"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result","def extract_sublists(list1):
    result = []
    for i in list1:
        result.append(i)
    return result"
Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] ","def split_String(str): 
    return (str[0])"
"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","def entringer_num(n, k):
  if (k == 0):
    return 1
  if ((n == 1):
    return 2
  if ((n == 2):
    return 3
  or (n == 3):
    return 4
 "
Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum","def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])"
Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","def count_char(str1):
  count_char= 0
  for i in range(len(str1)):
    if str1[i] == str2[i]:
      count_char += 1
  return count_char"
Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","def volume_triangular(a,b,c): 
    if a == 0 or b == 0: 
        return 0
    elif a == 1: 
        return 1
    elif b == 2: 
        return 2
    else:
        return a * a + b * b "
Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result"
Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","def longest_chain(arr): 
    if len(arr)>1: 
        return arr[0] 
    arr.sort() 
    result = 1
    for i in range(len(arr)): 
        if arr[i] == arr[i+1]: 
            result = arr[i] 
    return result"
Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; "
Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","def Odd_Num_Coeff(n): 
    res = 1 
    if (n == 0): 
        return 1
    res *= (1 - n) 
    return res "
Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","def smallest_Power_of_2(n): 
    res = 1; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; "
Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ","def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        if (arr[i] > arr[i + 1]): 
            inv_count += 1
    return inv_count "
Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ","def vowels(string):
    vowels = set(string.ascii_lowercase)
    return [x for x in string if not vowels.issubset(x)]"
Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","import re
def split_list(text):
 return (re.findall('[A-Z][^A-Z]*', text))"
Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
","def consecutive_unique_nums(nums):
    result = defaultdict(int)
    for x in nums:
        result[x] += 1
    return result"
Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","def largest_palindic(arr): 
	n = len(arr) 
	L = [0 for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for x in range(2, n): 
		for i in range(n): 
			if arr[i] == arr[i] and i!= i: 
				L[i][i] = max(L[i][i], L[i]) 
			else: 
"
"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n","import math 
def check_abundant(n): 
	if (n % 2 == 0): 
		return True
	if (n == 1): 
		return False
	if (n == 2): 
		return True
	if (n == 3): 
		return False
	sum = 0
	for i in range(1,n): 
		sum = sum + i 
		if (sum == i): 
			sum = sum + i 
			sum = sum"
Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i!= 0]
    x.extend(a)
    return (x)"
Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)","import re
def extract_max_num(text):
  return (re.findall(r""\b\d+"", text))"
Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","def next_greater_than(n):
    if (n % 2 == 0):
        return n
    if ((n == 1) :
        return 1
    elif ((n == 2) :
        return 2
    else:
        return n "
Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result","def check_sorted(l):
    if len(l) == 1:
        return False
    if l in list.keys():
        return True
    else:
        return False"
Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","def find_lcm(x, y): 
    num1 = 1
    num2 = 1
    while num1 > 0: 
        num1 = num1 // 2
        num2 = num2 // 2
        if num1 % 2 == 0: 
            num1 = num1
            num2 = num2 
        else: 
            num1 = num1
    return num1 "
Write a function to extract values between quotation marks of a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))","import re
def extract_quotation(text):
  return (re.findall(r'""(.*?)""', text))"
Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","def find_gcd(x, y): 
	if(x==y): 
		return y 
	a, b = y, x 
	return a 
def find_gcd(x, y): 
	if(x<=y): 
		return x 
	a, b = y, x % y 
	return find_gcd(x, y)"
Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","def Check_Solution(n): 
    if (n < 2): 
        return 0
    res = 1
    while (n % 2 == 0): 
        res *= (2 * n) 
        n = n / 2 
    return res "
Write a function to convert rgb color to hsv color.,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","def rgb_to_hsv(rgb):
    h = float(rgb[0])
    s = rgb[1]
    v = float(rgb[2])
    colorsys.rgb_to_hsv(rgb, h, s)
    return colorsys.hsv_to_rgb(rgb)"
Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","def count_Range_list(list1):
    m = len(list1)
    result = 0
    for i in list1:
        if (i < m):
            result += 1
    return result"
Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","def largest_Sum(arr): 
    max = arr[0] 
    for i in range(1, len(arr)): 
        if arr[i] > max: 
            max = arr[i] 
    return max"
Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","def multiply_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)"
Write a python function to find minimum sum of factors of a given number.,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum","import math 
def min_Sum_of_Factors(n): 
    res = 1
    if (n % 2!= 0): 
        return 0
    res *= 2 
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0): 
            count= count + 1
            n = n // i 
            curr_sum = curr_sum +"
Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","def is_octagonal(n): 
	return int(n * (7 * n + 5) / 2) "
Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","def sort_by_value(x):
    y = x * x
    return y"
"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","def assign_pair(test_list):
  temp = [tuple(i) for i in test_list]
  res = [tuple(i) for i in temp]
  return (res) "
Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ","def list_strings(nums):
    result = map(lambda x:x ** 2, nums) 
    return result"
Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","import re
def capitalize_spaces(text):
  return (re.sub('[A-Z]', '',text))"
Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","def count_int(list):
    count = 0
    for i in list:
        if i == 1:
            count = count + 1
    return count"
Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","def first_duplicate(nums):
    arr_len = len(nums)
    first_duplicate = next((el for el in nums if nums.count(el) > 1),-1)
    return first_duplicate"
Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","def max_sum_pairwise(n, k): 
	dp = [0] * (k + 1) 
	dp[0] = 0
	for i in range(1, n): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
		if (dp[1] > n): 
			dp[1] = max(dp[1], i) 
		else: 
			dp[1] = max(dp[1], i) 
	"
Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ","def Find_First(lst): 
    return [item[0] for item in lst] "
Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","def remove_list(list1, list2):
    result = [i for i in list1 if i not in list2]
    return result"
Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","def filter_dict(test_dict):
  res = {k: v for k, v in test_dict.items() if v}
  return (res) "
Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","def check_Two(string): 
    s = string.strip() 
    if (s == s): 
        return True
    else: 
        return False"
Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","def min_Swaps(str1): 
    count = 0
    for i in range(len(str1)) : 
        if (str1[i] == '{'): 
            count += 1
    if (count % 2 == 0): 
        return ""Input is not an integer!"" 
    elif (count % 2 == 1): 
        return ""Input must be bigger than 0!"" 
    else: 
        return ""Input must be bigger than 0!"" 
def min_Swaps(str1): 
        count = count"
Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","def max_upper_char(str1):
    dict = {}
    for i in range (len(str1)):
        if str1[i] == str2[i] and i!= ord('A') - 1:
            dict[ord(str1[i])] = 1
    for i in range(len(str1)):
        if dict[i] == str2[i] and len(dict[i]) >= 2:
            dict[i] = max(dict.get(i, i), i"
Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","def check_value(seq,value): 
    if value in seq: 
        return True
    else: 
        return False"
Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","def binary_search(my_list, item):
    binary_search = binary_search(my_list, item)
    return binary_search(my_list, item)"
Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","import math 
def count_odd_Factors(arr,n): 
    res = 1
    while (n % 2!= 0): 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0): 
            count= count + 1
            n = n // i 
            curr_term *= i 
            curr_sum += curr"
Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ","def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n) : 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; "
Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","def max_of_two( x, y ): 
    if x > y: 
        return x 
    return y"
Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","def sort_dict(my_dict):
    result = {key: my_dict[key] for key in sorted(my_dict.keys())}
    return result"
Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","def reverse_Vow(string): 
    for char in string: 
        if char in vowels: 
            return char  
    return''"
Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ","def even_average(n): 
    even_average = 0
    for i in range(0, n): 
        if (i % 2 == 0): 
            even_average = even_average + i 
    return even_average"
Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ","def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist "
Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","def next_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x"
Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","def volume_cuboid(l,w,h):
  volume = (l * (w + h) * (2 * w + h)) / (1 - l)
  return volume"
Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","def freq_element(test_tup):
  res = {}
  for ele in test_tup:
    res[ele] = res.get(ele, 0) + 1
  return (str(res)) "
Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[a-z]', '', text)
  result =  remove_upper(str1)
  return (result)"
Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","def count_Unset_Bits(n): 
    count = 0; 
    while (n): 
        count += n & 1
        n >>= 1
    return count; "
Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","def decode_list(list1):
    for i in list1:
        if len(i)!= len(list1):
            list1 = [i]
    return list1"
Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; "
Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","def find_ssch_num(n): 
	res = [0] * (n + 1) 
	for i in range(2, n) : 
		res[i] = (res[i] * (2 * i + 1)) % n 
	return res[n] "
Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","def average_values(test_list):
  res = sum(map(sum, test_list))
  return (res) "
Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","def count_multiples(n):
    if (n < 2):
        return 1
    res = 0
    for i in range(0, n) :
        count = 0
        for j in range(0, i):
            if (arr[i] * arr[j]) % n == 0:
                res += 1
    return res"
Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","def find_equilib(arr, n):
  for i in range(n):
    if arr[i] == arr[i + 1]:
      return i"
Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","def is_Diff(n): 
    i = 1
    while i*i <= n: 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False"
Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","def hex_range(start,end):
    return int(math.log2(end - start,end) + 1)"
Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm "
Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result","def str_to_list(str1):
    result = list(map(lambda x: x[0::-1], str1)) 
    return result"
Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","def neg_count(list1):
  neg_count= 0
  for num in list1: 
    if num <= 0: 
      neg_count += 1
  return neg_count "
"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","def eulerian_number(n):
  if (n == 0):
    return 1
  else:
    m = n // 2
  return (m) "
