text,code,generation
"Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .","xml.etree.ElementTree.tostring(element, method=""xml"")","xml.etree.ElementTree.tostring(element, method=""xml"")"
`word` will usually be a user ’ s password as typed at a prompt or in a graphical interface .,crypt.crypt(word),crypt.crypt(word)
Return the stateth completion for `text` . With arguments `state`.,"Completer.complete(text, state)","Completer.complete(text,state)"
"Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .",os.get_exec_path(env=None),os.get_exec_path(env=None)
"Returns a new instance of the Formatter class . The `style` parameter can be one of ‘ % ’ , ‘ { ‘ or ‘ $ ’ and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .",logging.Formatter(style='%'),logging.Formatter(style='%')
Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .,"sorted(iterable, reverse=False)","def sort_sorted(iterable, reverse=False):
    result = sorted(iterable, reverse=False)
    return result"
Return the stateth completion for `text` . With arguments `state`.,"Completer.complete(text, state)","Completer.complete(text,state)"
A class to handle HTTP Cookies . With arguments `cookiejar`.,urllib.request.HTTPCookieProcessor(cookiejar=None),urllib.request.HTTPCookieProcessor(cookiejar=None)
"Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn ’ t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .","compile(source, filename, mode, flags=0)","compile(source, filename, mode, optimize=-1)"
Read up to `n` bytes .,stream_reader.read(n=-1),stream_reader.read(n=-1)
Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .,"ensurepip.bootstrap(root=None, upgrade=False)","ensurepip.bootstrap(root=None, upgrade=False)"
"Return a bytes object containing the values `v1` , `v2` , … packed according to the `format` string format .","struct.pack(format, v1, v2)","struct.pack(format, v1, v2)"
Enable `capability` ( see RFC 5161 ) .,IMAP4.enable(capability),IMAP4.enable(capability)
"A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .","mailbox.Maildir(dirname, create=True)","mailbox.Maildir(dirname, create=True)"
Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.,"HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)","def update_authenticated(self, uri, is_authenticated=False):
    """"""Recalc the authenticated user with the given uri, if the user does not exist and will take any additional
    auth_params.push_auth(self, uri, is_authenticated, auth_params)
    return True"
Return a context manager that closes `thing` upon completion of the block .,contextlib.closing(thing),contextlib.closing(thing)
"Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .","CookiePolicy.domain_return_ok(domain, request)","CookiePolicy.domain_return_ok(domain, request)"
"Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.",ArgumentParser.set_defaults(**kwargs),ArgumentParser.set_defaults(**kwargs)
Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.,"calendar.calendar(year, l=1)","calendar.calendar(year, l=1)"
"Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.","zipfile.ZipInfo(1, 1, 0, 0, 0))","zipfile.ZipInfo(1, 1, 0, 0, 0))"
Create an instance of the FileInput class . With arguments `bufsize`.,fileinput.input(bufsize=0),fileinput.input(bufsize=0)
Base class for warnings about deprecated features when those warnings are intended for other Python developers.,DeprecationWarning,DeprecationWarning
Return an iterator over the variables stored in the `context` object .,iter(context),iter(context)
"Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.","platform.java_ver('', ''), '', ''), vendor='')","platform.java_ver('', ''), '', ''), vendor='')"
"If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .","config_parser.set(section, option, value)","config_parser.set(section, option, value)"
"Objects that when printed , print a message like “ Use quit ( ) or Ctrl-D ( i.e .",exit(),quit()
"Same as compilest ( st , `filename` ) .",ST.compile(filename='<syntax-tree>'),ST.compile(filename='<syntax-tree>')
"Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .",tempfile.mktemp(prefix='tmp'),"tempfile.mktemp(prefix='tmp', dir=None)"
"Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.",turtle.ScrolledCanvas(master),turtle.ScrolledCanvas(master)
Return the value for `var` if var has the value in the context object . Return `default` otherwise .,"context.get(var, default)","context.get(var, default)"
Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .,"bisect.bisect_left(a, x, lo=0)","import bisect
def insert_point(a, x, y, l):
    i = bisect.bisect_left(a, x, l)
    return i"
"This method makes a backup of a SQLite database even while it ’ s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .","connection.backup(target, pages=0)","connection.backup(target, pages=0, name=""main"")"
"Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .","sorted(iterable, key=None, reverse=False)","def extract_sorted(iterable, key, reverse=False):
    result = sorted(iterable, key=key, reverse=reverse)
    return result"
Sets the callable `application` as the WSGI application that will receive requests .,wsgi_server.set_app(application),wsgi_server.set_app(application)
Return a year ’ s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.,"html_calendar.formatyearpage(theyear, css='calendar.css')","html_calendar.formatyearpage(theyear, css='calendar.css')"
"Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .","test_loader.discover(start_dir, pattern='test*.py')","test_loader.discover(start_dir, pattern='test*.py')"
Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.,"calendar.prcal(year, l=0)","calendar.prcal(year, l=0)"
Return True if the values `a` and `b` are close to each other and False otherwise .,"cmath.isclose(a, b)","cmath.isclose(a,b)"
Return the item of d with key key.,d[key],d[key]
Write all items ( as machine values ) to the file object `f` .,array.tofile(f),array.tofile(f)
Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol ’ s write ( ) method .,"pprint.PrettyPrinter(indent=1, stream=None)","pprint.PrettyPrinter(indent=1, stream=None)"
"Example : With arguments `poly`, `fill`, `outline`.","shape.addcomponent(poly, fill, outline=None)","shape.addcomponent(poly, fill, outline=None)"
"Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .","turtle.circle(radius, steps=None)","turtle.circle(radius, steps=None)"
Send AUTHINFO commands with the `user` name and `password` .,NNTP.login(password=None),NNTP.login(user=None)
Add element `elem` to the set .,set.add(elem),set.add(elem)
"Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .","window.hline(y, x, ch, n)","window.hline(y, x, ch, n)"
All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .,tarfile.TarFile(encoding=ENCODING),tarfile.TarFile(encoding=ENCODING)
Test x for membership in s.,x in s,x in s
"Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.","IMAP4.fetch(message_set, message_parts)","IMAP4.fetch(message_set, message_parts)"
Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .,"smtpd.SMTPChannel(server, conn, addr)","smtpd.SMTPChannel(server, conn, addr)"
Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .,"asyncio.wait_for(aw, timeout, loop=None)","asyncio.wait_for(aw, timeout, loop=None)"
"Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.","email.contentmanager.get_content(msg, errors='replace')","email.contentmanager.get_content(msg, errors='replace')"
"Loader that wraps Python ’ s “ classic ” import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.","pkgutil.ImpLoader(fullname, file, filename, etc)","pkgutil.ImpLoader(fullname, file, filename, etc)"
Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .,"stream_reader.read(size, chars)","stream_reader.read(size, chars)"
"Example : With arguments `poly`, `fill`, `outline`.","shape.addcomponent(poly, fill, outline=None)","shape.addcomponent(poly, fill, outline=None)"
"Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.","struct.pack(v1, v2)","import re
def pack_v1(v1, v2):
  return (re.sub(r""^{v1,v2}"", v1, v2))"
Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .,datetime.__format__(format),"import datetime
def format_time(format, format_str):
  return (datetime.strftime(format_str, format=format_str))"
Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .,@functools.lru_cache(maxsize=128),"@functools.lru_cache(maxsize=128)
def max_size_custom(f):
    return maxsize"
"Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .",pdb.set_trace(header=None),"def debug_stack_frame(header=None):
  if header is not None:
    if header is not None:
      return header
  else:
    return stack_frame[0]"
"Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .","sysconfig.get_paths(scheme, vars, expand)","sysconfig.get_paths(scheme, vars, expand)"
Return True if `func` is a coroutine function .,asyncio.iscoroutinefunction(func),asyncio.iscoroutinefunction(func)
"Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .","doctest.run_docstring_examples(f, globs, optionflags=0)","doctest.run_docstring_examples(f, globs, optionflags=0)"
"Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.","warnings.filterwarnings(action, message='')","warnings.filterwarnings(action, message='', module=None)"
Raised when an operation or function is applied to an object of inappropriate type.,TypeError,TypeError
"Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .",socket.shutdown(how),socket.shutdown(how)
"Retrieve whole message number `which` , and set its seen flag .",POP3.retr(which),"POP3.retr(which, [0, 1])"
"Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.","Pattern.sub(repl, string, count=0)","import re
def repl(string,repl, count):
  return (re.sub(r""(\w+)"", repl, string, count))"
A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .,cmd.Cmd(completekey='tab'),cmd.Cmd(completekey='tab')
"Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .",IMAP4.search(charset),IMAP4.search(charset)
Base class for C callable foreign functions.,ctypes._FuncPtr,ctypes._FuncPtr
Call `func` with arguments `args` and keyword arguments `kwds` .,"pool.apply(func, args)","pool.apply(func, args)"
Return the number of items in the dictionary `d` .,len(d),"def count_dit(d):
  count=0
  for i in d:
    count = count + 1
  return count"
Insert a new item with value `x` in the array before position `i` .,"array.insert(i, x)","array.insert(i, x)"
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.","calendar.prcal(year, w=0, c=6)","calendar.prcal(year, w=0, c=6)"
"Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .","os.truncate(path, length)","os.truncate(path, length)"
Raised when the second argument of a division or modulo operation is zero.,ZeroDivisionError,"def div_of_two(n,m): 
	div_with_zero = 0
	for i in range(n): 
		div_with_zero = (div_with_zero * i) % 0
	return div_with_zero"
Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .,str.lstrip(chars),str.lstrip(chars)
"Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .","binascii.crc_hqx(data, value)","binascii.crc_hqx(data, value)"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.","print(*objects, end='\n')","print(*objects, file=sys.stdout)"
"Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .","style.theme_settings(themename, settings)","style.theme_settings(themename, settings)"
"A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.",@test.support.run_with_tz(tz),"@test.support.run_with_tz(tz)
def test_tup(tz):
  res = tz.localize(tz)
  return (res) "
"Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.","ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)","ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)"
Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .,signature.replace(parameters),"signature.replace(parameters, template, count=0)"
"Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .","TarFile.extract(member, path="""")","TarFile.extract(member, path="""")"
Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .,"open(file, mode='r', buffering=-1)","open(file, mode='r', buffering=-1)"
A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.,test.support.check_warnings(*filters),"def test_warnings(*filters):
  res = []
  for filter in filters:
    if isinstance(test, tuple):
      res.append((test, filter))
    return res"
A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands ’ respective format codes are interpreted using struct syntax .,memoryview.__eq__(exporter),memoryview.__eq__(exporter)
"This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .","__import__(name, level=0)","__import__(name, level=0)"
"Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .",multiprocessing.Process(daemon=None),"multiprocessing.Process(daemon=None, args=())"
"Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types — list , tuple , range .",list(),"def mutable_list(list1):
  list1 = list(list1)
  list2 = list(list2)
  return list1"
"Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .","pickletools.dis(pickle, indentlevel=4)","pickletools.dis(pickle, out=None, indentlevel=4)"
Return True if the values `a` and `b` are close to each other and False otherwise .,"cmath.isclose(a, b)","cmath.isclose(a,b)"
"The main configuration parser . When `strict` is True ( the default ) , the parser won ’ t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.","configparser.ConfigParser(':'), ';'), strict=True)","configparser.ConfigParser(':'), ';'), strict=True)"
"This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it ’ s doing .","modulefinder.ModuleFinder(path=None, debug=0)","modulefinder.ModuleFinder(path=None, debug=0)"
"Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .","isinstance(object, classinfo)","isinstance(object, classinfo)"
A generic version of collections.deque . With arguments `deque`.,typing.Deque(deque),typing.Deque(deque)
"Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .","imp.load_module(name, file, pathname, description)","importlib.machinery.ModuleSpec(name, file, pathname, description)"
This class constructor creates an instance of a “ statistics object ” from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.,"pstats.Stats(*filenames or profile, stream=sys.stdout)","pstats.Stats(*filenames or profile, stream=sys.stdout)"
"If the `prompt` argument is present , it is written to standard output without a trailing newline .",input(),input()
"The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .","eval(expression, globals)","eval(expression, globals, locals)"
"The `year` , `month` and `day` arguments are required . With arguments `hour`.","datetime.datetime(year, month, day, hour=0)","datetime.datetime(year, month, day, hour=0)"
"Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .","urllib.parse.quote(string, encoding=None)","urllib.parse.quote(string, encoding=None)"
All arguments are optional . With arguments `hour`.,datetime.time(hour=0),"datetime.time(hour=0, minute=0)"
"Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .","binascii.b2a_qp(data, quotetabs=False, header=False)","binascii.b2a_qp(data, quotetabs=False, header=False)"
"Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .","isinstance(object, classinfo)","isinstance(object, classinfo)"
"Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.",array.frombytes(s),array.frombytes(s)
"This method makes a backup of a SQLite database even while it ’ s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .","connection.backup(target, progress=None)","connection.backup(target, progress=None, base_size=None)"
Scroll the screen or scrolling region upward by `lines` lines .,window.scroll(lines=1),window.scroll(lines=1)
"Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .",queue_listener.__init__(level=NOTSET),queue_listener.append(new_queue)
Log in as the given `user` .,FTP.login(user='anonymous'),FTP.login(user='anonymous')
"Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .","os.sendfile(out, in, offset, count, flags=0)","os.sendfile(out, in, offset, count, flags=0)"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2, c=6)","text_calendar.formatyear(theyear, w=2, l=1)"
All arguments are optional . With arguments `second`.,datetime.time(second=0),"def second_arg(first,second=None):
  if first is None:
    return False
  else:
    first_arg = first + 1
  return first_arg"
"Return a new datetime object whose `date` components are equal to the given date object ’ s , and whose `time` components are equal to the given time object ’ s .","datetime.combine(date, time)","datetime.combine(date, time)"
Clone this node . Setting `deep` means to clone all child nodes as well .,Node.cloneNode(deep),Node.cloneNode(deep)
"Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .",chain_map.new_child(m=None),"def new_child(map, m, new_child):
    result = map.new_child(m, new_child, m)
    return result"
"The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .","eval(expression, globals, locals)","eval(expression, globals, locals)"
Checkpoint mailbox on server .,IMAP4.check(),IMAP4.check()
"Return True if the underlying mapping has a key key, else False.",key in proxy,"def is_key(key):
  if key in proxy:
    return True
  else:
    return False"
"Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .","complex(real, imag)","complex(real, imag, real, imag)"
Write the pickled representation of the object `obj` to the open `file` object file .,"pickle.dump(obj, file)","pickle.dump(obj, file)"
Write `data` to the output file .,aifc.writeframes(data),aifc.writeframes(data)
Format a `form` in HTML .,cgi.print_form(form),"def format_form(form):
  return (form)"
The sole value of the type NoneType.,None,None
Set the size and position of the main window . With arguments `width`.,"turtle.setup(width=_CFG""width"")","turtle.setup(width=_CFG""width"", height=_CFG""height"")"
"Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel ’ s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\r\n ' ( CRLF ) .","BaseCookie.output(header='Set-Cookie:', sep='\r\n')","BaseCookie.output(header='Set-Cookie:', sep='\r\n')"
"Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .","itertools.count(start=0, step=1)","def count_evening_digits(start, stop, step):
	for i in range(0, stop):
		if (start < stop):
			return (start, stop)
		if (stop - start):
				return (i, step)"
Set `handler` as the new event loop exception handler .,loop.set_exception_handler(handler),loop.set_exception_handler(handler)
"Run the specified WSGI application , `app` .",base_handler.run(app),base_handler.run(app)
This function supports dynamic execution of Python code . `object` must be either a string or a code object .,exec(object),"exec(object, object)"
The true value of the bool type.,True,True
Locate the insertion point for `x` in `a` to maintain sorted order .,"bisect.bisect_left(a, x)","import bisect
def insert_point(a, x, y):
    i = bisect.bisect_left(a, x)
    return i"
Wait until a `predicate` becomes true .,condition.wait_for(predicate),"def wait_for(predicate, t):
  if predicate:
    return t
  else:
    return ('No!')"
"Set the size and position of the main window . With arguments `width`, `height`.","turtle.setup(width=_CFG""width"", height=_CFG""height"")","turtle.setup(width=_CFG""width"", height=_CFG""height"")"
"Fused multiply-add . With arguments `other`, `third`.","decimal.fma(other, third)","def multiply_add(other, third):
    return (other * third) + one"
"Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.","curses.ungetmouse(id, x, y, z, bstate)","curses.ungetmouse(id, x, y, z, bstate)"
Return True if `obj` is either of :,asyncio.isfuture(obj),"def check_element(obj, obj2): 
  if (obj2 is not None): 
    return True
  else: 
    return False"
"Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .","pickletools.dis(pickle, indentlevel=4)","pickletools.dis(pickle, out=None, indentlevel=4)"
Sends `data` to the remote server .,IMAP4.send(data),IMAP4.send(data)
"This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .","gettext.find(domain, all=False)","gettext.find(domain, all=False)"
A Cursor instance has the following attributes and methods.,sqlite3.Cursor,sqlite3.Cursor
Returns the greeting string sent by the POP3 server .,POP3.getwelcome(),POP3.getwelcome()
"Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .","ast.parse(source, filename='<unknown>', mode='exec')","ast.parse(source, filename='<unknown>', mode='exec')"
This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.,"urllib.error.ContentTooShortError(msg, content)","urllib.error.ContentTooShortError(msg, content)"
"Codec details when looking up the codec registry . With arguments `encode`, `decode`.","codecs.CodecInfo(encode, decode)","codecs.CodecInfo(encode, decode)"
"Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .","subprocess.run(args, stdout=None)","subprocess.run(args, stdout=None)"
Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.,multiprocessing.Queue(maxsize),multiprocessing.Queue(maxsize)
Return the value of the named attribute of `object` . `name` must be a string .,"getattr(object, name)","getattr(object, name)"
Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.,ArgumentParser.parse_args(args=None),ArgumentParser.parse_args(args=None)
Permanently remove deleted items from selected mailbox .,IMAP4.expunge(),IMAP4.expunge()
"Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .",message.set_default_type(ctype),message.set_default_type(ctype)
Checks if an object appears to be a valid `element` object .,xml.etree.ElementTree.iselement(element),xml.etree.ElementTree.iselement(element)
"Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.",email.contentmanager.get_content(msg),email.contentmanager.get_content(msg)
"Decompress `data` , a bytes-like object .",bz2.decompress(data),bz2.decompress(data)
"Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .",config_parser.read(filenames),config_parser.read(filenames)
"Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.","logging.handlers.HTTPHandler(host, url, method='GET')","logging.handlers.HTTPHandler(host, url, method='GET', uri='/', method='GET')"
"Convert an integer number to a lowercase hexadecimal string prefixed with “ 0x ” . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .",hex(x),"def int_to_hex(x):
        result = int("""".join(map(chr, x)), 16)
        return result"
Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.,multiprocessing.Queue(maxsize),multiprocessing.Queue(maxsize)
Increments the progress bar ’ s value by `amount` .,widget.step(amount=None),widget.step(amount=None)
Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.,"SMTP.login(user, password)","SMTP.login(user, password)"
"This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .","__import__(name, fromlist=())","__import__(name, fromlist=(), tolist=(), fromlist=())"
"Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .","doc_test_runner.run(test, clear_globs=True)","doc_test_runner.run(test_class, clear_globs=True)"
"Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .","chunk.Chunk(file, inclheader=False)","chunk.Chunk(file, inclheader=False, size=0)"
"Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.","msilib.Feature(db, id, title, desc, display, parent=None)","msilib.Feature(db, id, title, desc, display, level=1, attributes=0)"
"This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .",unittest.TestSuite(tests=()),unittest.TestSuite(tests=())
Return a Document that represents the `string` . With arguments `parser`.,"xml.dom.minidom.parseString(string, parser=None)","xml.dom.minidom.parseString(string, parser=None)"
This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object ’ s attributes .,"delattr(object, name)","delattr(object, name)"
Exception raised on any errors.,IMAP4.error,"def error_handler(error):
  return (error)"
Create a new ArgumentParser object . With arguments `epilog`.,argparse.ArgumentParser(epilog=None),argparse.ArgumentParser(epilog=None)
Create a new ArgumentParser object . With arguments `parents`.,argparse.ArgumentParser(parents=),argparse.ArgumentParser(parents=)
"Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.","logging.handlers.HTTPHandler(host, url, method='GET')","logging.handlers.HTTPHandler(host, url, method='GET', uri='/', method='GET')"
Update the `values` in the Morsel dictionary with the values in the dictionary values .,Morsel.update(values),Morsel.update(values)
Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.,"calendar.prcal(year, w=0)","calendar.prcal(year, w=0)"
"A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.",typing.NewType(typ),"typing.NewType(typename, (), type)"
"The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .",policy.header_source_parse(sourcelines),from email.header import Header
Run the command described by `args` . With arguments `shell`.,"subprocess.run(args, shell=False)","subprocess.run(args, shell=False)"
"The version number of this module, as a string.",sqlite3.version,"import sys 
def get_version(path): 
    return sys.version_info"
"Guess the type of a file based on its filename or URL , given by `url` .",mimetypes.guess_type(url),mimetypes.guess_type(url)
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.",print(*objects),"print(*objects, file=sys.stdout)"
"Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .","itertools.count(start=0, step=1)","def count_evening_digits(start, stop, step):
	for i in range(0, stop):
		if (start < stop):
			return (start, stop)
		if (stop - start):
				return (i, step)"
"When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str ’ s encode ( ) method ; it defaults to 'replace ' .","email.utils.collapse_rfc2231_value(value, errors='replace')","email.utils.collapse_rfc2231_value(value, errors='replace')"
"Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .","doctest.run_docstring_examples(f, globs, name=""NoName"")",import doctest
"Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.","ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)","ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)"
Construct a new Decimal object based from `value` .,"decimal.Decimal(value=""0"")","decimal.Decimal(value=""0"")"
"Pretend `count` lines have been `changed` , starting with line `start` .","window.touchline(start, count, changed)","window.addnth(start, count, changed)"
"Parses an XML section into an element tree incrementally , and reports what ’ s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .","xml.etree.ElementTree.iterparse(source, parser=None)","xml.etree.ElementTree.iterparse(source, parser=None)"
Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .,base_manager.start(initializer),base_manager.start(initializer)
Return a generator of groups with up to `n` lines of context .,sequence_matcher.get_grouped_opcodes(n=3),"def group_sequence(n,m):
	items = [list(iterable) for _ in range(n)]
	for i in range(m):
		items.extend(map(next, items))
	return items"
"Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .","winreg.CreateKeyEx(key, sub_key, reserved=0)","winreg.CreateKeyEx(key, sub_key, reserved=0)"
"Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .","gettext.ngettext(singular, plural, n)","from django.utils import translation, resend_with_singular, format_string, format_dict"
"Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .","CookieJar.extract_cookies(response, request)","CookieJar.extract_cookies(response, request)"
Send a STARTTLS command .,IMAP4.starttls(),IMAP4.start()
"Return data for response `code` if received , or None .",IMAP4.response(code),"IMAP4.response(code, response)"
"The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.","argparse.FileType(mode='r', bufsize=-1)","argparse.FileType(mode='r', bufsize=-1)"
"The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .",eval(expression),"eval(expression, globals, locals)"
"Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .",os._exit(n),os._exit(n)
"Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.","Morsel.setdefault(key, value=None)","Morsel.setdefault(key, value=None)"
"Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .",bdb.canonic(filename),bdb.canonic(filename)
"For a date d , str ( d ) is equivalent to d.isoformat ( ) .",date.__str__(),"def is_date_iso(d):
    if not d:
        return False
    m, d = map(str, d.split('.'))
    return True"
Reload a previously imported `module` .,imp.reload(module),imp.reload(module)
"Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of “ zip ” ( if the zlib module is available ) , “ tar ” , “ gztar ” ( if the zlib module is available ) , “ bztar ” ( if the bz2 module is available ) , or “ xztar ” ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .","shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)","from tarfile import BZ2,TACHA_BASE_DIR, get_archive_format, zip_file_format
def create_archive(base_name, format):
    base_dir = os.path.join(base_dir, format)
    zip_file = BZ2File(base_name, format)
    base_dir = os.path.join(base_dir, 'zip')
    return (base_dir, zip_file, base_name, format)"
"Delete any character at ( `y` , `x` ) .",window.delch(y),window.delch(y)
Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .,logging.handlers.QueueHandler(queue),logging.handlers.QueueHandler(queue)
Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.,"textwrap.wrap(text, **kwargs, width=70)","textwrap.wrap(text, **kwargs, width=70)"
"Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.","ArgumentParser.add_argument(name or flags..., action, nargs, const)","ArgumentParser.add_argument(name or flags..., action)"
"This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .","HTTPConnection.request(method, url, body=None)","HTTPConnection.request(method, url, body=None)"
Turn turtle right by `angle` units .,turtle.right(angle),turtle.right(angle)
"Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .","filecmp.cmp(f1, f2, shallow=True)","filecmp.cmp(f1, f2, shallow=True)"
Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .,"test_case.assertRaisesRegex(exception, regex)","test_case.assertRaisesRegex(exception, regex)"
"Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .","os.walk(top, topdown=True)","def walk(dir, topdown=True, bottom=False):
  if topdown:
    if not os.path.isdir(dir):
      topdown = True
      elif topdown:
      topdown = False
    else:
      topdown = True
    return topdown,"
"Bind the socket to a free port and return the port number . With arguments `sock`, `host`.","test.support.bind_port(sock, host=HOST)","test.support.bind_port(sock, host=HOST)"
Return the current contents of history item at `index` .,readline.get_history_item(index),"def get_history_item(index, index):
  res = list(get_history_item(index))
  return (res)"
This method is called to handle the end `tag` of an element ( e.g .,HTMLParser.handle_endtag(tag),HTMLParser.handle_endtag(tag)
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .",timeit.timeit(timer=<default timer>),timeit.timeit(timer=<default timer>)
This exception is derived from RuntimeError.,NotImplementedError,NotImplementedError
"Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .","wsgiref.simple_server.make_server(host, port, app)","wsgiref.simple_server.make_server(host, port, app)"
An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .,"http.client.HTTPConnection(host, blocksize=8192)","http.client.HTTPConnection(host, blocksize=8192)"
"numeric argument to operation (if any), otherwise None",arg,arg = float(arg)
"Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .","urllib.parse.unquote(string, errors='replace')","urllib.parse.unquote(string, encoding='utf-8', errors='replace')"
"Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .","window.addnstr(y, x, str, n)","window.addnstr(y, x, str, n)"
Return the tuple as described in getmarkers ( ) for the mark with the given `id` .,aifc.getmark(id),"aifc.getmark(id) == id:
  return amark"
"Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .","logging.handlers.TimedRotatingFileHandler(filename, utc=False)","logging.handlers.TimedRotatingFileHandler(filename, utc=False)"
"Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.","compileall.compile_path(skip_curdir=True, force=False)","compileall.compile_path(skip_curdir=True, force=False)"
Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.,"os.link(src, dst, follow_symlinks=True)","os.link(src, dst, follow_symlinks=True)"
"Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.","weakref.finalize(obj, func, *args, **kwargs)","weakref.finalize(obj, func, *args, **kwargs)"
"Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .",IMAP4.search(charset),IMAP4.search(charset)
Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.,"os.link(src, dst, follow_symlinks=True)","os.link(src, dst, follow_symlinks=True)"
"Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .","winsound.PlaySound(sound, flags)","winsound.PlaySound(sound, flags)"
"Convert `params` into an XML-RPC request . Python ’ s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .","xmlrpc.client.dumps(params, allow_none=False)","xmlrpc.client.dumps(params, allow_none=False)"
Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .,email.header.Header(s=None),email.header.Header(s=None)
Sends `data` to the remote server .,IMAP4.send(data),IMAP4.send(data)
"Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :",ArgumentParser.add_mutually_exclusive_group(required=False),ArgumentParser.add_mutually_exclusive_group(required=False)
Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.,inspect.cleandoc(doc),"def clean_whatever(doc, doc_len):
  res = []
  for func in doc_len:
    if not isinstance(func, type):
      res.append(func.__doc__)
  return (res) "
Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .,trace.Trace(timing=False),trace.Trace(timing=False)
Return a new sorted list from the items in `iterable` .,sorted(iterable),"def sort_sublists(iterable): 
    pass"
"Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .","random.shuffle(x, random)","def shuffle_random(x, y, random):
  if random is None:
    random = random.normal(0, 1, 100)
    if y == 0:
      return x,y,z
  else:
    return x,y,z"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.",print(*objects),"print(*objects, file=sys.stdout)"
"For existing code calling readfp ( ) with arguments which don ’ t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .",config_parser.readfp(fp),"config_parser.readfp(fp, readfp=None)"
Store the value from `stdout` .,test.support.record_original_stdout(stdout),test.support.record_original_stdout(stdout)
"Adds a new tab to the notebook . With arguments `child`, `**kw`.","widget.add(child, **kw)","widget.add(child, **kw)"
"Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .",getpass.getpass(prompt='Password: '),getpass.getpass(prompt='Password: ')
Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .,"dataclasses.asdict(instance, dict_factory=dict)","dataclasses.asdict(instance, dict_factory=dict)"
"This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.","null_importer.find_module(fullname, path)","importlib.machinery.ModuleSpec(fullname, path)"
Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.,collections.OrderedDict(items),"def rearrange_dict(dict1, items):
    result = {}
    for key, value in dict1.items():
        result.update(value)
    return result"
Maps a logging level name to a syslog priority name . With arguments `levelname`.,sys_log_handler.mapPriority(levelname),"sys_log_handler.mapPriority(levelname, 'DEBUG')"
"Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .","sysconfig.get_paths(scheme, vars, expand)","sysconfig.get_paths(scheme, vars, expand)"
Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .,"ZipFile.open(name, pwd=None)","ZipFile.open(name, pwd=None)"
Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .,test.support.strip_python_strerr(stderr),test.support.strip_python_strerr(stderr)
"Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value “ end ” , specifying where in the list of parent ’ s children to insert the new item . With arguments `**kw`.","widget.insert(parent, index, **kw)","wsgiref.simple_item(parent, index, **kw)"
Locate the insertion point for `x` in `a` to maintain sorted order .,"bisect.bisect_left(a, x)","import bisect
def insert_point(a, x, y):
    i = bisect.bisect_left(a, x)
    return i"
"Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .","chunk.Chunk(file, align=True, bigendian=True)","def make_chunk(file, align, bigendian=True, bigendian=False):
    return chunk(file, align, bigendian=True, bigendian=True)"
"Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.","element.makeelement(tag, attrib)","element.makeelement(tag, attrib)"
This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .,parser.st2list(st),parser.st2list(st)
"Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .","bz2.open(filename, compresslevel=9)","bz2.open(filename, mode='r', compresslevel=9)"
"Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.",mailcap.findmatch(caps),"mailcap.findmatch(caps, 'view')"
Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .,"open(file, opener=None)","open(file, opener=None)"
Write `data` to the output file .,aifc.writeframes(data),aifc.writeframes(data)
"Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .","socket.sendfile(file, count=None)","socket.sendfile(file, count=0, count=0)"
"Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .","platform.libc_ver(executable=sys.executable, lib='')",platform.libc_ver(lib='')
"This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .",cgitb.text(info),cgitb.text(info)
"Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .",vars(object),vars()
Set `loop` as a current event loop for the current OS thread .,asyncio.set_event_loop(loop),asyncio.set_event_loop(loop)
"Run the `cmd` shell command . With arguments `**kwds`, `stdin`.","asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)","asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)"
"Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .",wsgiref.headers.Headers(headers),wsgiref.headers.Headers(headers)
"Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types — list , tuple , range . With arguments `start`, `stop`.","range(start, stop)","def __getitem__(self, name):
    return (list(range(start, stop)), list(range(start, stop)))"
Add `prefix` to the beginning of selected lines in `text` .,"textwrap.indent(text, prefix)","textwrap.indent(text, prefix)"
"Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .","gzip.open(filename, compresslevel=9)","gzip.open(filename, mode='rb', compresslevel=9)"
"( Only supported on BSD . ) With arguments `ident`, `data`.","select.kevent(ident, data=0)","select.kevent(ident, data=0)"
Return a str version of `object` .,str(),"import sys 
def str_version(object):
  str_version=sys.maxsize 
  return str_version"
All arguments are optional . With arguments `microsecond`.,datetime.time(microsecond=0),"def datetime_to_microsecond(microsecond):
  return (microsecond+(datetime.timedelta(microsecond=0)), )"
"For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .","test.support.checksizeof(test, o, size)","test.support.check_sizeof(test, o, size)"
"Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .",email.utils.decode_params(params),email.utils.decode_params(params)
"Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .","ftplib.FTP(host='', user='')","ftplib.FTP(host='', user='')"
Set the `boundary` parameter of the Content-Type header to boundary .,message.set_boundary(boundary),message.set_boundary(boundary)
"Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.",ValueError,ValueError
Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .,"os.getrandom(size, flags=0)","os.getrandom(size, flags=0)"
Reload a previously imported `module` .,imp.reload(module),imp.reload(module)
"Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .","logging.handlers.NTEventLogHandler(appname, logtype='Application')","logging.handlers.NTEventLogHandler(appname, logtype='Application')"
Insert an entry into the list of warnings filter specifications . With arguments `action`.,warnings.filterwarnings(action),warnings.filterwarnings(action)
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.","print(*objects, end='\n')","print(*objects, file=sys.stdout)"
Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .,executor.shutdown(wait=True),executor.shutdown(wait=True)
"Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP ‘ Authorization ’ header using Basic authentication . With arguments `url`.","logging.handlers.HTTPHandler(host, url, credentials=None)","logging.handlers.HTTPHandler(host, url, credentials=None)"
Create an instance of the FileInput class . With arguments `inplace`.,fileinput.input(inplace=False),fileinput.input(inplace=False)
"Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .","pyclbr.readmodule(module, path=None)","pyclbr.readmodule(module, path=None, module_spec=None)"
Raised when an attribute reference (see Attribute references) or assignment fails.,AttributeError,AttributeError
"Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn ’ t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .","compile(source, filename, mode, optimize=-1)","compile(source, filename, mode, optimize=-1)"
An implementation of the built-in __import__ ( ) function . With arguments `name`.,importlib.__import__(name),importlib.__import__(name)
"Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .","window.addnstr(y, x, str, n)","window.addnstr(y, x, str, n)"
Get a list of frame records for a `traceback` ’ s frame and all inner frames . With arguments `context`.,"inspect.getinnerframes(traceback, context=1)","inspect.getinnerframes(traceback, context=1)"
"Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .","formatter.add_label_data(format, counter)","formatter.add_label_data(format, counter)"
"Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.",array.frombytes(s),array.frombytes(s)
Return a list of all the keys used in the dictionary `d` .,list(d),list(d.keys())
"A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .",asyncio.Queue(maxsize=0),asyncio.Queue(maxsize=0)
"Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .",datetime.isoformat(sep='T'),"import datetime, time, timezone;
def date_to_decimal(date,sep=T):
        dt = datetime.datetime(1980, 1, 6, 58, 10, 0)
        dt_format = '%Y-%m-%d %H:%M:%S'
        if date_to_format < 'T':
            dt = datetime.datetime(1980, 1, 6, 0, 0)
        dt = datetime.datetime(1980, 1, 6, 0, 0)
        return dt"
Set the size and position of the main window . With arguments `width`.,"turtle.setup(width=_CFG""width"")","turtle.setup(width=_CFG""width"", height=_CFG""height"")"
Write a list of `lines` to the stream .,io_base.writelines(lines),io_base.writelines(lines)
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.","calendar.prcal(year, w=0, l=0)","calendar.prcal(year, w=0, l=0)"
"When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .","email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')","email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii',
    fallback_header='Set-Cookie:', re.sub(r'[\W_]+', '.', value))"
Return a string containing a printable representation of an `object` .,repr(object),repr(object)
"Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.","email.contentmanager.get_content(msg, errors='replace')","email.contentmanager.get_content(msg, errors='replace')"
"Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .","@functools.lru_cache(maxsize=128, typed=False)","@functools.lru_cache(maxsize=128, typed=False)
def wrap_maxsize_funct(f, maxsize, typed_arg):
    res = []
    if not isinstance(f, type):
        res.append(type, *args, **typed_arg)
    else:
        res.append(maxsize, type, typed_arg)
    res.sort()
    return (res) "
"The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .",email.headerregistry.Address(username=''),email.headerregistry.Address(username='')
Return an iterator over the keys of the dictionary . With arguments `d`.,iter(d),iter(d.values())
"This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.","breakpoint(*args, **kws)","breakpoint(*args, **kws)"
Transform a method into a static method.,@staticmethod,"@staticmethod
def transform_static(fn):
    return fn.__get__(instance, fromlist=[''])
"
"Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.","zipfile.ZipInfo(1, 1, 0, 0, 0))","zipfile.ZipInfo(1, 1, 0, 0, 0))"
Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .,"SSLContext.wrap_bio(incoming, outgoing)","SSLContext.wrap_bio(incoming, outgoing, ssl_version=2)"
"Convert an integer number to a lowercase hexadecimal string prefixed with “ 0x ” . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .",hex(x),"def int_to_hex(x):
        result = int("""".join(map(chr, x)), 16)
        return result"
"Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .",ArgumentParser.add_subparsers(title),ArgumentParser.add_subparsers(title)
"Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .","winreg.CreateKeyEx(key, sub_key, reserved=0)","winreg.CreateKeyEx(key, sub_key, reserved=0)"
"Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.","warnings.simplefilter(action, lineno=0, append=False)","warnings.simplefilter(action, lineno=0, append=False)"
Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .,str.lstrip(chars),str.lstrip(chars)
"Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types — list , tuple , range . With arguments `start`, `stop`.","range(start, stop)","def __getitem__(self, name):
    return (list(range(start, stop)), list(range(start, stop)))"
"Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .",ArgumentParser.add_subparsers(title),ArgumentParser.add_subparsers(title)
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.",timeit.timeit(stmt='pass'),"timeit.timeit(stmt='pass', timer=<default timer>)"
"Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .","compileall.compile_dir(dir, maxlevels=10)","compileall.compile_dir(dir, maxlevels=10)"
"Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.",ArgumentParser.set_defaults(**kwargs),ArgumentParser.set_defaults(**kwargs)
"Returns a new instance of the Formatter class . The `style` parameter can be one of ‘ % ’ , ‘ { ‘ or ‘ $ ’ and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .",logging.Formatter(style='%'),logging.Formatter(style='%')
Clear the internal type cache .,sys._clear_type_cache(),sys._clear_type_cache()
Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.,"epoll.poll(timeout=-1, maxevents=-1)","epoll.poll(timeout=-1, maxevents=-1)"
Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .,"fcntl.flock(fd, operation)","fcntl.flock(fd, operation)"
"Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.","message.set_param(param, value, replace=False)","message.set_param(param, value, replace=False)"
Enable `capability` ( see RFC 5161 ) .,IMAP4.enable(capability),IMAP4.enable(capability)
"Return the value for `key` if key is in the dictionary , else `default` .","dict.get(key, default)","dict.get(key, default)"
"Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .","str.replace(old, new, count)","import re
def copy(str, new, count):
  new_len=len(str)
  count=str.count(new)
  return (new_len, count, new_words)"
Record the function `handler` as the handler for `key` .,"content_manager.add_get_handler(key, handler)","def show_key(key,handler):
  print(key, handler)
  return exit()"
"Parses an XML section into an element tree incrementally , and reports what ’ s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .","xml.etree.ElementTree.iterparse(source, parser=None)","xml.etree.ElementTree.iterparse(source, parser=None)"
Add `prefix` to the beginning of selected lines in `text` .,"textwrap.indent(text, prefix)","textwrap.indent(text, prefix)"
"Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .","urllib.parse.unquote(string, encoding='utf-8')","urllib.parse.unquote(string, encoding='utf-8', errors='replace')"
This method is called to handle the end `tag` of an element ( e.g .,HTMLParser.handle_endtag(tag),HTMLParser.handle_endtag(tag)
Return a property attribute .,property(),"def property(self): 
    return self._property"
Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .,"shutil.register_archive_format(name, function)","shutil.register_archive_format(name, function)"
Return a floating point number constructed from a number or string `x` .,float(),float(x)
"Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.","test_loader.loadTestsFromNames(names, module=None)","test_loader.loadTestsFromNames(names, module_names)"
Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .,"itertools.repeat(object, times)","def wrapper(object, times):
    for i in range(times):
        object.append(next(i))
    return object, times"
A Cursor instance has the following attributes and methods.,sqlite3.Cursor,sqlite3.Cursor
"Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .","locale.format_string(format, val, grouping=False)","locale.format_string(format, val, grouping=False)"
"Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .",os.get_exec_path(env=None),os.get_exec_path(env=None)
Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.,tracemalloc.start(nframe: int=1),"def memory_allocator(nframe):
  caller=tracemalloc(nframe: int=1)
  return caller"
Install a timer that calls `fun` after `t` milliseconds .,"turtle.ontimer(fun, t=0)","def tearDown(fun, t=0):
  if (t == 0):
    return None
  else:
    returnfun"
"Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.","Cmd.completedefault(text, line, begidx, endidx)","Cmd.completedefault(text, line, begidx, endidx)"
Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .,"curses.init_pair(pair_number, fg, bg)","import math
def change_pair(pair_number, fg, bg):
    m, n = len(pair_number), 0
    temp = 0
    while (temp > 0):
        if (pair_number % 10 == 0):
            temp = pair_number * 10
        colors = [cm.YlOrRd(i, bg) for i in range(n)]
            if (temp == 0):
                colors = [cm.YlOrRd(i, bg) for i in range(n"
"Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .","locale.currency(val, symbol=True)","locale.currency(val, symbol=True)"
Return an iterator `object` .,iter(object),iter(object)
"The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .",email.utils.formataddr(pair),email.utils.formataddr(pair)
"Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .","os.walk(top, followlinks=False)","def walk_dir(dir_name, followlinks=False):
  res = []
  for root, dirs, files in os.walk(dir_name, topdown=True):
    for name in files:
      if not followlinks:
        continue
        res.append((os.path.join(root, name), followlinks=False))
      break
  return (res)"
Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .,trace.Trace(count=1),trace.Trace(count=1)
"This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.","sys.excepthook(type, value, traceback)","sys.excepthook(type, value, traceback)"
Install a timer that calls `fun` after `t` milliseconds .,"turtle.ontimer(fun, t=0)","def tearDown(fun, t=0):
  if (t == 0):
    return None
  else:
    returnfun"
"This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.","bdb.Breakpoint(self, file, line)","bdb.Breakpoint(self, file, line, temporary=0)"
"Set the size and position of the main window . With arguments `width`, `height`.","turtle.setup(width=_CFG""width"", height=_CFG""height"")","turtle.setup(width=_CFG""width"", height=_CFG""height"")"
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.","timeit.repeat(stmt='pass', repeat=5)","timeit.repeat(stmt='pass', repeat=5)"
"Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .",int(),"int(x, type(x))"
Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .,"zipapp.create_archive(source, interpreter=None)","zipapp.create_archive(source, interpreter=None)"
Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\n ' ) characters added to it .,"base64.a85encode(b, wrapcol=0)","base64.a85encode(b, wrapcol=0)"
"Write the `row` parameter to the writer ’ s file object , formatted according to the current dialect .",csvwriter.writerow(row),csvwriter.writerow(row)
Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .,all(iterable),"def all_empty(iterable):
  if len(iterable) == 0:
    return False
  else:
    return True"
"Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .",SummaryInformation.GetProperty(field),SummaryInformation.Get(field)
Return True if the values `a` and `b` are close to each other and False otherwise .,"cmath.isclose(a, b)","cmath.isclose(a,b)"
Return the nameprepped version of `label` .,encodings.idna.nameprep(label),"import coffee
def get_preped_name(label):
  return list(coffee.name_prepped_label(label))"
"Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.","window.chgat(y, x, num, attr)","window.chgat(y, x, num, attr)"
"Convert an integer number to an octal string prefixed with “ 0o ” . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .",oct(x),"def octal_to_int(x):
        s = '%s%s' % (x, y)
        return s"
Mock objects limit the results of dir ( some_mock ) to useful results .,mock.__dir__(),mock.__dir__()
Return the complex number x with polar coordinates `r` and `phi` .,"cmath.rect(r, phi)","import cmath
def polar_rect(r, phi):
  cn=complex(r, phi)
  return cn"
Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .,@functools.lru_cache(maxsize=128),"@functools.lru_cache(maxsize=128)
def max_size_custom(f):
    return maxsize"
"Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.","DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)","def flatten_entity(name, publicId, systemId, ndata):
  for name, method in inspect.getmembers(name, id, systemId, ndata):
    print(name, method, name, publicId, systemId, ndata)
  return (name, publicId, systemId, ndata)"
A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .,asyncio.Semaphore(value=1),"asyncio.Semaphore(value, value=1)"
Set the list of `labels` on the message to labels .,babyl_message.set_labels(labels),babyl_message.set_labels(labels)
"Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .","dataclasses.make_dataclass(cls_name, fields, init=True)","dataclasses.make_dataclass(cls_name, fields, init=True)"
The true value of the bool type.,True,True
Remove the `event` from the queue .,scheduler.cancel(event),scheduler.cancel(event)
"Pop and return the smallest item from the `heap` , maintaining the heap invariant .",heapq.heappop(heap),"import heapq as hq
def heap_sort(heap):
  hq.heapify(heap)
  hq.heapify(heap)
  return heap[0]"
"Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .","shutil.copytree(src, dst, symlinks=False, ignore=None)","shutil.copytree(src, dst, symlinks=False, ignore=None)"
"Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.","inspect.getattr_static(obj, attr, default=None)","inspect.getattr_static(obj, attr, default=None)"
Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .,"os.tcsetpgrp(fd, pg)","os.tcsetpgrp(fd, pg)"
"Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 . The optional parameter `endpos` limits how far the string will be searched ; it will be as if the string is endpos characters long , so only the characters from pos to endpos - 1 will be searched for a match .","Pattern.search(string, pos, endpos)","import re
def find_pat(string, pos, endpos):
    pattern = re.compile(r'(\w+\S*(\w+))', re.IGNORECASE)
    string, pos, endpos = 0, 0, 0
    result = re.search(pattern, string, pos, endpos)
    return result.groups()"
"The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.","argparse.FileType(mode='r', bufsize=-1)","argparse.FileType(mode='r', bufsize=-1)"
"Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.","loop.getaddrinfo(host, port)","loop.getaddrinfo(host, port)"
"Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .","os.waitid(idtype, id, options)","os.waitid(idtype, id, options)"
Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .,BaseTransport.get_extra_info(name),BaseTransport.get_extra_info(name)
Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .,context_var.reset(token),context_var.reset(token)
"Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .","test_loader.discover(start_dir, pattern='test*.py')","test_loader.discover(start_dir, pattern='test*.py')"
"Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .",wsgiref.headers.Headers(headers),wsgiref.headers.Headers(headers)
"Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .","urllib.request.urlopen(url, data=None, context=None)","urllib.request.urlopen(url, data=None, context=None)"
Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .,"incremental_encoder.encode(object, final)","def encode(object, final, count):
    if not isinstance(object, dict):
        return None
    final, count = 0, 0
    for i in range(0, count):
        if not final:
            final[i] = object()
        else:
            final[i] = object()
        count += 1
    return final, count"
"Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .",tempfile.mktemp(prefix='tmp'),"tempfile.mktemp(prefix='tmp', dir=None)"
"Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .","dataclasses.make_dataclass(cls_name, fields)","dataclasses.make_dataclass(cls_name, fields)"
Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.,"asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)","asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)"
Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .,"max(iterable, key)","max(iterable, key)"
A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.,xmlrpc.client.ServerProxy(uri),xmlrpc.client.ServerProxy(uri)
Create an instance of the FileInput class . With arguments `inplace`.,fileinput.input(inplace=False),fileinput.input(inplace=False)
"Set a Cookie if policy says it ’ s OK to do so . With arguments `cookie`, `request`.","CookieJar.set_cookie_if_ok(cookie, request)","CookieJar.set_cookie_if_ok(cookie, request)"
"Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .",parser.parsestr(text),parser.parsestr(text)
"Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .","urllib.request.urlretrieve(url, filename=None)","urllib.request.urlretrieve(url, filename=None, data=None)"
Method called on an input `line` when the command prefix is not recognized .,Cmd.default(line),Cmd.default(line)
Checks if an object appears to be a valid `element` object .,xml.etree.ElementTree.iselement(element),xml.etree.ElementTree.iselement(element)
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2, l=1)","text_calendar.formatyear(theyear, w=2, l=1)"
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.","calendar.prcal(year, w=0, m=3)","calendar.prcal(year, w=0, m=3)"
`word` will usually be a user ’ s password as typed at a prompt or in a graphical interface .,crypt.crypt(word),crypt.crypt(word)
This exception is raised when a writable mailbox has its status changed by the server.,IMAP4.readonly,IMAP4.readonly
"Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .","sysconfig.get_paths(scheme, vars, expand)","sysconfig.get_paths(scheme, vars, expand)"
"Return the MIME part that is the best candidate to be the “ body ” of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.","email_message.get_body('html', 'plain'), preferencelist=('related')","email_message.get_body('html', 'plain'), preferencelist=('related')"
Return a new sorted list from the items in `iterable` .,sorted(iterable),"def sort_sublists(iterable): 
    pass"
"Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.","DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)","def flatten_entity(name, publicId, systemId, ndata):
  for name, method in inspect.getmembers(name, id, systemId, ndata):
    print(name, method, name, publicId, systemId, ndata)
  return (name, publicId, systemId, ndata)"
"Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.","test.support.check_free_after_iterating(test, iter, cls)","def check_free_after_iterating(test_, iter, cls):
  res = True
  for element in iter:
    if not isinstance(element, type):
      res = False
      break
  return (res) "
"Return a str version of `object` . With arguments `encoding`, `errors`.","str(encoding='utf-8', errors='strict')","import sys 
def str_version(encoding, errors):
    return (str(encoding), str(errors))"
A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .,multiprocessing.Condition(lock),multiprocessing.Condition(lock)
"This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .",cgitb.text(info),cgitb.text(info)
"Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .","winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)","winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)"
"This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .","email.iterators.typed_subpart_iterator(msg, maintype='text')","email.iterators.typed_subpart_iterator(msg, maintype='text')"
Seek to the specified frame number . With arguments `pos`.,aifc.setpos(pos),"aifc.setpos(pos, pos + 1)"
"Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.","oss_mixer_device.set(control, (left, right))","oss_mixer_device.set(control, (left, right))"
"Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .","re.search(pattern, string)","import re
def first_match(string, pattern):
  match = re.search(pattern, string)
  return match.start()"
Set the `font` style .,writer.new_font(font),writer.new_font(font)
"Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.","message.set_param(param, value)","message.set_param(param, value, header='Content-Type', requote=True)"
"Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.","curses.is_term_resized(nlines, ncols)","def resize_term(nlines,ncol):
  res = True
  for i in range(0, nlines):
    if (nlines % 2):
      res = False
      break
  return (res) "
"Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.","test_case.addCleanup(function, *args, **kwargs)","test_case.addCleanup(function, *args, **kwargs)"
"Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .",int(),"int(x, type(x))"
"Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .",socket.socketpair(family),socket.socketpair(family)
Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .,"os.tcsetpgrp(fd, pg)","os.tcsetpgrp(fd, pg)"
"Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.",tzinfo.utcoffset(dt),tzinfo.utcoffset(dt)
"Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.","string.capwords(s, sep=None)","import re
def split_text(text, sep=None):
     return (re.sub(""[,.]"", "":"", text))"
"Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .","@functools.lru_cache(maxsize=128, typed=False)","@functools.lru_cache(maxsize=128, typed=False)
def wrap_maxsize_funct(f, maxsize, typed_arg):
    res = []
    if not isinstance(f, type):
        res.append(type, *args, **typed_arg)
    else:
        res.append(maxsize, type, typed_arg)
    res.sort()
    return (res) "
"Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .","doctest.testsource(module, name)","importlib.import_module(module, name)"
"Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.","json.loads(s, **kw)","json.loads(s, **kw, s=None)"
Byte-compile all the .py files found along sys.path . With arguments `quiet`.,compileall.compile_path(quiet=0),compileall.compile_path(quiet=0)
Return the value of the named attribute of `object` . `name` must be a string .,"getattr(object, name)","getattr(object, name)"
Create a new ArgumentParser object . With arguments `epilog`.,argparse.ArgumentParser(epilog=None),argparse.ArgumentParser(epilog=None)
"Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.","loop.getaddrinfo(host, port, family=0, type=0)","loop.getaddrinfo(host, port, family=0, type=0)"
"Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value “ end ” , specifying where in the list of parent ’ s children to insert the new item . With arguments `**kw`.","widget.insert(parent, index, **kw)","wsgiref.simple_item(parent, index, **kw)"
Create an instance of the FileInput class . With arguments `inplace`.,fileinput.input(inplace=False),fileinput.input(inplace=False)
Add the file `name` to the archive . This can be avoided by setting `recursive` to False .,"TarFile.add(name, recursive=True)","import zipfile
def add_archive_format(name, recursive=True):
    archive = zipfile.ZipFile(name, recursive=True)
    for name in ['file1', 'file2', 'file3']:
        archive.add(name, recursive=True)
    return archive"
"All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .",doctest.testmod(report=True),doctest.testmod(globs=None)
"Example : With arguments `poly`, `fill`.","shape.addcomponent(poly, fill)","shape.addcomponent(poly, fill)"
"Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.","IMAP4.fetch(message_set, message_parts)","IMAP4.fetch(message_set, message_parts)"
"Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .","message.get_payload(i=None, decode=False)","message.get_payload(i=None, decode=False)"
"The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .","hashlib.scrypt(password, salt, n, r, p)","hashlib.scrypt(password, salt, n, r, p)"
Send `data` to the `sock` socket .,"loop.sock_sendall(sock, data)","loop.sock_sendall(sock, data)"
"Return True if d has a key key, else False.",key in d,"def check_key(d):
  if d:
    return True
  else:
    return False"
Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .,ensurepip.bootstrap(root=None),ensurepip.bootstrap(root=None)
"Returns a logger which is a descendant to this logger , as determined by the `suffix` .",queue_listener.getChild(suffix),queue_listener.getChild(suffix)
"For common and simple use cases , no other functionality is required . With arguments `compare`.",dataclasses.field(compare=True),"def common_data(compare,compare):
    if isinstance(compare, common_data):
        return True
    else:
        return False"
"Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .","bytes.translate(table, delete=b'')","bytes.translate(table, delete=b'')"
Reads one line from the remote server .,IMAP4.readline(),IMAP4.readline()
"A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object ’ s read ( ) method to obtain bytestrings to yield .",wsgiref.util.FileWrapper(filelike),"wsgiref.util.FileWrapper(filelike, lsize, filelike)"
"Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .",vars(),vars()
"Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .","base64.b64decode(s, validate=False)","base64.b64decode(s, validate=False)"
Set the scrolling region from line `top` to line `bottom` .,"window.setscrreg(top, bottom)","window.setscrreg(top, bottom)"
"Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .","lock.acquire(blocking=True, timeout=-1)","from threading import Lock, timedelta as time
def create_lock(timeout, block, name):
  lock = Lock()
  while (lock.acquire(True):
    if not isinstance(lock, int):
      return False
    block = lock.acquire(True)
  if (block!= None):
    return block or not isinstance(lock, int):
    return False"
"Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.","test_case.addCleanup(function, *args, **kwargs)","test_case.addCleanup(function, *args, **kwargs)"
"A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .","mailbox.Maildir(dirname, create=True)","mailbox.Maildir(dirname, create=True)"
"This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .","exec(object, globals, locals)","exec(object, globals, locals)"
Return the complex number x with polar coordinates `r` and `phi` .,"cmath.rect(r, phi)","import cmath
def polar_rect(r, phi):
  cn=complex(r, phi)
  return cn"
Integer value to control debugging output.,IMAP4.debug,IMAP4.debug
"Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .","difflib.diff_bytes(dfunc, a, b, lineterm=b'\n')","def dfunc_bis(dfunc, a, b, lineterm=b'\n'):
    """"""b'format the given list is the same as dfunc\n    and the new list is the same as b""""""
    b'format_str = lambda s, e, d: str(s), e, d)
    return b'format_str(dfunc, a, b, lineterm=b'\n')"
"Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .","compileall.compile_dir(dir, maxlevels=10)","compileall.compile_dir(dir, maxlevels=10)"
Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.,exit_stack.enter_context(cm),"def __exit__(self, cm, *args): 
    if cm is None: 
        return None
    stack, exit_val = 0, 0
    while (exit_val * cm > 0): 
        stack.append((cm, (exit_val * cm)) 
        exit_val = stack.pop() 
        if (exit_val < 0): 
            stack.append(cm) 
        else: 
            stack.append(exit_val) 
    return stack"
"Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.","csv.DictReader(f, *args, **kwds)","csv.DictReader(f, *args, **kwds)"
Set the size and position of the main window . With arguments `width`.,"turtle.setup(width=_CFG""width"")","turtle.setup(width=_CFG""width"", height=_CFG""height"")"
"Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.","text_calendar.formatyear(theyear, m=3)","text_calendar.formatyear(theyear, m=3)"
"Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.","message.set_param(param, value, header='Content-Type', language='')","message.set_param(param, value, language='')"
"Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .","getattr(object, name, default)","getattr(object, name, default)"
Set the environment variable named `key` to the string `value` .,"os.putenv(key, value)","os.putenv(key, value)"
"An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.","importlib.__import__(name, globals=None)","importlib.__import__(name, locals=None)"
Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .,robot_file_parser.crawl_delay(useragent),robot_file_parser = CrawlFileParser(useragent=None)
Method called on an input `line` when the command prefix is not recognized .,Cmd.default(line),Cmd.default(line)
"Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.","ctypes.memset(dst, c, count)","ctypes.memset(dst, c, count)"
Authenticate command — requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :,"IMAP4.authenticate(mechanism, authobject)","IMAP4.authenticate(me diameter, authobject, method='GET', authheader=None)"
"Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.",asyncio.open_connection(family=0),asyncio.open_connection(family=0.5)
Translate an Internet `port` number and protocol name to a service name for that service .,socket.getservbyport(port),"import socket
def translate_email(email, port):
        pass"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.",print(*objects),"print(*objects, file=sys.stdout)"
"Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :",argparse.ArgumentParser(description=None),argparse.ArgumentParser(description=None)
"This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.","fcntl.ioctl(fd, request)","fcntl.ioctl(fd, request, 0)"
"Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .",bdb.canonic(filename),bdb.canonic(filename)
Convert a binary file with filename `input` to binhex file `output` .,"binhex.binhex(input, output)","binhex.binhex(input, output)"
Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .,"shutil.copyfileobj(fsrc, fdst)","shutil.copyfileobj(fsrc, fsrc, path=None)"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.",print(*objects),"print(*objects, file=sys.stdout)"
"This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.",@dataclasses.dataclass(eq=True),"@dataclasses.dataclass(eq=True)
def wrapper(cls, *args, **kwargs):
  return cls(fn(*args, **kwargs))"
"This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .","HTTPConnection.request(method, url, body=None)","HTTPConnection.request(method, url, body=None)"
This is identical to m.group ( `g` ) .,Match.__getitem__(g),Match.__getitem__(g)
An implementation of the built-in __import__ ( ) function . With arguments `name`.,importlib.__import__(name),importlib.__import__(name)
Create a shared dict object and return a proxy for it . With arguments `mapping`.,sync_manager.dict(mapping),sync_manager.dict(mapping)
"For common and simple use cases , no other functionality is required . With arguments `metadata`.",dataclasses.field(metadata=None),"def data_classes(metadata=None):
  return (metadata)"
"Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`, `args`.","test.support.check_free_after_iterating(test, iter, cls, args=())","def check_free_after_iterating(test_, iter, cls, args=()):
  res = True
  for index, ele in enumerate(test_, start, end):
    if not isinstance(ele, type):
      res = False
      break
  return (res, index, cls, args)"
"Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .","SSLContext.wrap_socket(sock, session=None)","SSLContext(sock, session=None)"
"Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .",IMAP4.select(readonly=False),IMAP4.select(readonly=False)
Copy `infile` to `outfile` through the pipe .,"Template.copy(infile, outfile)","Template.copy(infile, outfile)"
"This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .",@dataclasses.dataclass(order=False),"@dataclasses.dataclass(order=False)
def ordered_class(cls):
    dataclasses = []
    for name, value in inspect.getmembers(cls):
        if name not in dataclasses:
            dataclasses.append(name)
            name = value
    return dataclasses"
"Run the `cmd` shell command . With arguments `**kwds`, `stdin`.","asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)","asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)"
Return the number of the color-pair set by the attribute value `attr` .,curses.pair_number(attr),"def get_pair_number(attr):
    clust1 = 0
    for i in range(0, len(attr)):
        if attr[i] == 'pair':
            clust1 += 1
    return clust1"
"Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .","ast.parse(source, filename='<unknown>', mode='exec')","ast.parse(source, filename='<unknown>', mode='exec')"
"Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .",socket.shutdown(how),socket.shutdown(how)
This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .,xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1'),xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')
Called when a connection is made . The `transport` argument is the transport representing the connection .,BaseProtocol.connection_made(transport),"BaseProtocol.connection_made(transport, transport)"
"Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .","pickletools.dis(pickle, out=None)",pickletools.dis(pickle)
"Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .","lzma.open(filename, format=None)","lzma.open(filename, format=None)"
This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it ’ s doing .,modulefinder.ModuleFinder(debug=0),"modulefinder.ModuleFinder(debug=0, filename=None)"
Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .,context_var.reset(token),context_var.reset(token)
Enable `capability` ( see RFC 5161 ) .,IMAP4.enable(capability),IMAP4.enable(capability)
Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .,all(iterable),"def all_empty(iterable):
  if len(iterable) == 0:
    return False
  else:
    return True"
Remove the first occurrence of `value` .,deque.remove(value),"def remove_first_occurence(value):
  count = 0
  for i in range(0, len(value)):
    if value[i] == value:
      count += 1
  return count"
This function is deprecated in this module . With arguments `qs`.,cgi.parse_qs(qs),"import urllib.request, urllib.parse, urllib.error"
"Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.","colorsys.rgb_to_yiq(r, g, b)","colorsys.rgb_to_yiq(r, g, b)"
"Write text - the string representation of `arg` - at the current turtle position according to `align` ( “ left ” , “ center ” or right ” ) and with the given `font` . With arguments `8`, `""normal"")`.","turtle.write(arg, 8, ""normal""))","turtle.write(arg, 8, ""normal""), font=(""Arial"")"
Store the value from `stdout` .,test.support.record_original_stdout(stdout),test.support.record_original_stdout(stdout)
"A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .",asyncio.Queue(maxsize=0),asyncio.Queue(maxsize=0)
"Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.","socket.sendmsg_afalg(msg, op, iv)","socket.sendmsg_afalg(msg, op, iv)"
Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .,"loop.connect_read_pipe(protocol_factory, pipe)","loop.connect_read_pipe(protocol_factory, pipe)"
"A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .",doctest.DocTestFinder(parser=DocTestParser()),"def extract_doc_test_parser(test_list, parser):
  res = []
  for name, value in test_list:
    if isinstance(value, doc_test_parser.DocTestDescription):
      res.append(doc_test_parser.DocTestDescription(value, parser))
  return (res) "
"With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .",gc.collect(generation=2),gc.collect(generation=2)
The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .,"fractions.Fraction(numerator=0, denominator=1)","def find_fractions(num1,num2,denominator,denominator): 
	dp = [0] * (num1 + num2) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, num1+1): 
		dp[i] = dp[i - 1] 
		if (num1 >= 0 and dp[i] < 0): 
			dp[i] = dp[i - 2] 
	return dp[n]"
"Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.","bdb.get_stack(f, t)","def get_data(f,t):
	list = []
	for i in range(0, t):
		list.append(f[i])
	return list"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2, l=1)","text_calendar.formatyear(theyear, w=2, l=1)"
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.","calendar.prcal(year, w=0, l=0)","calendar.prcal(year, w=0, l=0)"
"This exception is raised when a system function returns a system-related error , including I/O failures such as “ file not found ” or “ disk full ” ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.","OSError(errno, strerror, filename)","OSError(errno, strerror, filename)"
"Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.","wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)","wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)"
"Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .","mimetypes.guess_type(url, strict=True)","mimetypes.guess_type(url, strict=True)"
"Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.","compileall.compile_path(skip_curdir=True, force=False)","compileall.compile_path(skip_curdir=True, force=False)"
"Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .","webbrowser.open(url, new=0)","webbrowser.open(url, new=0)"
"Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .","base64.b64decode(s, validate=False)","base64.b64decode(s, validate=False)"
"Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of “ FLAGS ” , “ +FLAGS ” , or “ -FLAGS ” , optionally with a suffix of “ .SILENT ” . With arguments `message_set`, `flag_list`.","IMAP4.store(message_set, command, flag_list)","IMAP4.store(message_set, command, flag_list)"
Base class for warnings about deprecated features when those warnings are intended for other Python developers.,DeprecationWarning,DeprecationWarning
Connect to the given `host` and `port` .,FTP.connect(port=0),"FTP.connect(host='', port=0)"
"Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.",cab.commit(database),cab.commit(database)
"Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .","test_loader.discover(start_dir, pattern='test*.py')","test_loader.discover(start_dir, pattern='test*.py')"
Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .,msilib.CreateRecord(count),"msilib.CreateRecord(count, count)"
"The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object ’ s attributes , False if not .","hasattr(object, name)","doctest.testmod(object, name)"
"When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str ’ s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .","email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')","email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')"
Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .,urllib.parse.urlunparse(parts),urllib.parse.urlunparse(parts)
"For a date d , str ( d ) is equivalent to d.isoformat ( ) .",date.__str__(),"def is_date_iso(d):
    if not d:
        return False
    m, d = map(str, d.split('.'))
    return True"
Block for `delay` seconds .,asyncio.sleep(delay),asyncio.sleep(delay)
Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .,"ensurepip.bootstrap(root=None, upgrade=False)","ensurepip.bootstrap(root=None, upgrade=False)"
Write the XML-RPC encoding of this DateTime item to the `out` stream object .,date_time.encode(out),date_time.encode(out)
Return `n` independent iterators from a single `iterable` .,"itertools.tee(iterable, n=2)","itertools.tee(iterable, n=2)"
"Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .","os.renames(old, new)","os.renames(old, new)"
"Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .",pkgutil.iter_modules(prefix=''),"importlib.machinery.ModuleSpec(path, prefix='')"
"Return data for response `code` if received , or None .",IMAP4.response(code),"IMAP4.response(code, response)"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.","text_calendar.formatyear(theyear, w=2, m=3)","text_calendar.formatyear(theyear, w=2, m=3)"
Put an `item` into the queue .,queue.put(item),queue.put(item)
"This function is useful for programs that want to emulate Python ’ s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .","code.compile_command(source, symbol=""single"")","compile(source, filename=""<input>"", mode='exec')"
"Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.","turtle.onclick(fun, btn=1, add=None)","turtle.onclick(fun, btn=1, add=None)"
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.","timeit.timeit(stmt='pass', timer=<default timer>)","timeit.timeit(stmt='pass', timer=<default timer>)"
Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.,loop.getnameinfo(sockaddr),loop.getnameinfo(sockaddr)
Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol ’ s write ( ) method .,"pprint.PrettyPrinter(indent=1, stream=None)","pprint.PrettyPrinter(indent=1, stream=None)"
This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.,stats.sort_stats(*keys),stats.sort_stats(*keys)
Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.,"xml.etree.ElementTree.SubElement(parent, tag, **extra)","xml.etree.ElementTree.SubElement(parent, tag, **extra)"
"Return True if there is a resource named `name` in the `package` , otherwise False .","importlib.resources.is_resource(package, name)","importlib.resources.is_resource(package, name)"
"Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .",date.fromtimestamp(timestamp),"import datetime
def POSIX_timestamp(timestamp):
  return datetime.fromtimestamp(timestamp, tz=None)"
Format a `form` in HTML .,cgi.print_form(form),"def format_form(form):
  return (form)"
"Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .","scheduler.enterabs(time, priority, action, argument=())","scheduler.enterabs(time, priority, action, argument=())"
"Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .","bz2.open(filename, mode='r')","bz2.open(filename, mode='r')"
"Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .","shutil.register_unpack_format(name, extensions, function)","shutil.register_unpack_format(name, extensions, function)"
Create an instance of the FileInput class . With arguments `files`.,fileinput.input(files=None),fileinput.input(files=None)
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.","calendar.prcal(year, w=0, l=0)","calendar.prcal(year, w=0, l=0)"
Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .,io_base.readlines(hint=-1),io_base.readlines(hint=-1)
"Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.","bdb.runcall(func, *args, **kwds)","bdb.runcall(func, *args, **kwds)"
"Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.","types.new_class(name, bases=())","types.new_class(name, bases=())"
Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .,fnmatch.translate(pattern),"import re
def list_regex(pattern):
  return (re.findall(pattern, pattern))"
"Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.","test_case.addCleanup(function, *args, **kwargs)","test_case.addCleanup(function, *args, **kwargs)"
"Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.","tixCommand.tix_getimage(self, name)","def tix_getimage(self, name): 
	return self._tix_getimage(self, name)"
"Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header ’ s quoting as is , otherwise the parameters will be quoted ( the default ) .","message.set_type(type, header='Content-Type', requote=True)","message.set_type(type, header='Content-Type', requote=True)"
List mailbox names in `directory` matching `pattern` .,"IMAP4.list(directory, pattern)","IMAP4.list(directory, pattern)"
Return the complex number x with polar coordinates `r` and `phi` .,"cmath.rect(r, phi)","import cmath
def polar_rect(r, phi):
  cn=complex(r, phi)
  return cn"
Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.,"epoll.poll(timeout=-1, maxevents=-1)","epoll.poll(timeout=-1, maxevents=-1)"
Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .,"random.triangular(low, high, mode)","def random_float(low, high, mode): 
    return (low, high, mode)"
"This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.","bdb.Breakpoint(self, file, line, cond=None)","bdb.Breakpoint(self, file, line, temporary=0, cond=None)"
"Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .","@test.support.bigmemtest(size, memuse, dry_run=True)","@test.support.bigmemtest(size, memuse, dry_run=True)
def test_bigmem_validate(test_case, size, avg_run, dry_run=True):
  res = unittest.TestLoader(test_case, size, dry_run, dry_run=True)
  return (res, res_init, avg_run, is_same=True)"
Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.,random.Random(seed),"import random
def pseudo_random(seed):
    if seed!= None:
        return seed
    random.Random(seed)"
Create new `mailbox` named mailbox .,IMAP4.create(mailbox),IMAP4.create(mailbox)
"Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .","gzip.open(filename, mode='rb')","gzip.open(filename, mode='rb')"
Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .,"bisect.bisect_left(a, x, hi=len(a))","import bisect
def insert_point(a, x, y, l):
    i = bisect.bisect_left(a, x, l)
    return i"
"Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .",ftplib.FTP(user=''),ftplib.FTP(passwd='')
"Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child ’ s process id , exit status indication , and resource usage information is returned . With arguments `options`.",os.wait3(options),os.wait3(options)
"Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.","logging.handlers.HTTPHandler(host, url, method='GET')","logging.handlers.HTTPHandler(host, url, method='GET', uri='/', method='GET')"
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.","calendar.prcal(year, l=0, c=6)","calendar.prcal(year, l=0, c=6)"
Raised when the user hits the interrupt key (normally Control-C or Delete).,KeyboardInterrupt,"import sys 
def quit_message(event):
  """"""\x08\x08\x08\x08\x08\x1b[; 
  return exit_message(event)"
Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .,"os.posix_fallocate(fd, offset, len)","os.posix_fallocate(fd, offset, len)"
"Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .","scheduler.enterabs(time, priority, action, argument=())","scheduler.enterabs(time, priority, action, argument=())"
"Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .","gzip.open(filename, newline=None)","gzip.open(filename, mode='rb', newline=None)"
Append a new item with value `x` to the end of the array .,array.append(x),array.append(x)
"This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.","bdb.Breakpoint(self, file, line, cond=None)","bdb.Breakpoint(self, file, line, temporary=0, cond=None)"
Return a proxy object that delegates method calls to a parent or sibling class of `type` .,super(),super()
Remove the directory named `dirname` on the server .,FTP.rmd(dirname),FTP.rmd(dirname)
Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .,"ordered_dict.move_to_end(key, last=True)","ordered_dict.move_to_end(key, last=True)"
Log in as the given `user` .,FTP.login(user='anonymous'),FTP.login(user='anonymous')
"Convert a `value` to a “ formatted ” representation , as controlled by `format_spec` .",format(value),"format(value, format_spec)"
"Decompress `data` , a bytes-like object .",bz2.decompress(data),bz2.decompress(data)
Add a `section` named section to the instance .,config_parser.add_section(section),config_parser.add_section(section)
"Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .","calendar.leapdays(y1, y2)","def leap_years(y1,y2):
    if (y1 == y2):
        return 1
    elif (y2 == y1):
        return 2
    else:
        return 1"
"Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .","urllib.parse.unquote(string, errors='replace')","urllib.parse.unquote(string, encoding='utf-8', errors='replace')"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.","print(*objects, flush=False)","print(*objects, end='\n', file=sys.stdout)"
"Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.","warnings.simplefilter(action, lineno=0, append=False)","warnings.simplefilter(action, lineno=0, append=False)"
"Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.","tarfile.open(**kwargs, mode='r', fileobj=None)","tarfile.open(**kwargs, mode='r', fileobj=None)"
Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .,"incremental_encoder.encode(object, final)","def encode(object, final, count):
    if not isinstance(object, dict):
        return None
    final, count = 0, 0
    for i in range(0, count):
        if not final:
            final[i] = object()
        else:
            final[i] = object()
        count += 1
    return final, count"
Create an object to `trace` execution of a single statement or expression .,trace.Trace(trace=1),trace.Trace(trace=1)
"Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.",bytecode.from_traceback(tb),bytecode.from_traceback(tb)
Exception raised on any errors.,IMAP4.error,"def error_handler(error):
  return (error)"
"Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .","pprint.PrettyPrinter(indent=1, depth=None)","pprint.PrettyPrinter(indent=1, depth=None)"
Read up to `n` bytes .,stream_reader.read(n=-1),stream_reader.read(n=-1)
Sets the callable `application` as the WSGI application that will receive requests .,wsgi_server.set_app(application),wsgi_server.set_app(application)
An implementation of the built-in __import__ ( ) function . With arguments `name`.,importlib.__import__(name),importlib.__import__(name)
"Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .","TarFile.add(name, filter=None)","TarFile.add(name, filter=None)"
"Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.","Packer.pack_fstring(n, s)","Packer.pack_fstring(n, s)"
"This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .",list.sort(key=None),"def sort_list(list1,key=None):
    result = list1[key]
    return result"
Remove the first occurrence of `value` .,deque.remove(value),"def remove_first_occurence(value):
  count = 0
  for i in range(0, len(value)):
    if value[i] == value:
      count += 1
  return count"
"Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .","lzma.compress(data, format=FORMAT_XZ, check=-1)","lzma.compress(data, format=FORMAT_XZ, check=-1)"
"Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .",multiprocessing.Process(daemon=None),"multiprocessing.Process(daemon=None, args=())"
"Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .","test_case.assertAlmostEqual(first, second, places=7)","test_case.assertAlmostEqual(first, second, places=7, seconds=0)"
Try to switch to UTF-8 mode .,POP3.utf8(),POP3.utf8()
"For common and simple use cases , no other functionality is required . With arguments `metadata`.",dataclasses.field(metadata=None),"def data_classes(metadata=None):
  return (metadata)"
"Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .","CookiePolicy.domain_return_ok(domain, request)","CookiePolicy.domain_return_ok(domain, request)"
"Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.","colorsys.yiq_to_rgb(y, i, q)","colorsys.yiq_to_rgb(y, i, q)"
Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .,chunk.read(size=-1),chunk.read(size=-1)
Add a `header` that will not be added to a redirected request . With arguments `key`.,"Request.add_unredirected_header(key, header)","Request.add_unredirected_header(key, header)"
Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .,dataclasses.asdict(instance),"dataclasses.asdict(instance, dict_factory=dict)"
Execute the `statement` ( given as a string or a code object ) under debugger control .,pdb.run(statement),pdb.run(statement)
Test x for membership in s.,x in s,x in s
Return the number of variables set in the context object . With arguments `proxy`.,len(proxy),len(proxy)
"This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .","exec(object, globals)","exec(object, globals, locals)"
"Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .","winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)","winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)"
"The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.","ctypes.CFUNCTYPE(restype, *argtypes)","ctypes.CFUNCTYPE(restype, *argtypes)"
Put an `item` into the queue .,queue.put(item),queue.put(item)
"Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .",logging.config.listen(verify=None),logging.config.listen(verify=None)
Return a list of all the keys used in the dictionary `d` .,list(d),list(d.keys())
"Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .","pkgutil.iter_modules(path=None, prefix='')","importlib.machinery.ModuleSpec(path, prefix='')"
"When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .","email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')","email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii',
    fallback_header='Set-Cookie:', re.sub(r'[\W_]+', '.', value))"
Create an instance of the FileInput class . With arguments `files`.,fileinput.input(files=None),fileinput.input(files=None)
Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.,profile.print_stats(sort=-1),profile.print_stats(sort=-1)
"Return True if d has a key key, else False.",key in d,"def check_key(d):
  if d:
    return True
  else:
    return False"
Append items from `iterable` to the end of the array .,array.extend(iterable),array.extend(iterable)
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.","calendar.prcal(year, w=0, l=0)","calendar.prcal(year, w=0, l=0)"
Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .,"max(iterable, key)","max(iterable, key)"
Set the current process ’ s effective user id . With arguments `euid`.,os.seteuid(euid),os.seteuid(euid)
"A buffered I/O object combining two unidirectional RawIOBase objects – one readable , the other writeable – into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .","io.BufferedRWPair(reader, writer)","io.BufferedRWPair(reader, writer)"
"For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .",datetime.__str__(),datetime.__str__()
Return True if `obj` is either of :,asyncio.isfuture(obj),"def check_element(obj, obj2): 
  if (obj2 is not None): 
    return True
  else: 
    return False"
"All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .",datetime.timedelta(days=0),"datetime.timedelta(days=0, seconds=0)"
There are three different ways to call this function : Add a turtle `shape` to TurtleScreen ’ s shapelist . With arguments `name`.,"turtle.register_shape(name, shape=None)","turtle.register_shape(name, shape=None)"
"Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.","traceback.print_exception(etype, value, tb)","traceback.print_exception(etype, value, tb)"
Checkpoint mailbox on server .,IMAP4.check(),IMAP4.check()
Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol ’ s write ( ) method .,"pprint.PrettyPrinter(indent=1, stream=None)","pprint.PrettyPrinter(indent=1, stream=None)"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2)","text_calendar.formatyear(theyear, w=2, l=1)"
Return `n` independent iterators from a single `iterable` .,"itertools.tee(iterable, n=2)","itertools.tee(iterable, n=2)"
"Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.","window.border(ls, rs, ts, bs, tl, tr, bl, br)","window.border(ls, rs, ts, bs, tl, tr, bl, br)"
"Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .","cgi.escape(s, quote=False)","html.escape(s, quote=False)"
"Decompress `data` , a bytes-like object .",bz2.decompress(data),bz2.decompress(data)
"Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.",ValueError,ValueError
"Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .",bz2.BZ2File(filename),"bz2.BZ2File(filename, mode='r')"
Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .,decimal.localcontext(ctx=None),decimal.localcontext(ctx=None)
"A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .","shelve.Shelf(dict, writeback=False)","shelve.Shelf(dict, writeback=False)"
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.","timeit.timeit(stmt='pass', setup='pass')","timeit.timeit(stmt='pass', timer=<default timer>)"
Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .,pprint.PrettyPrinter(width=80),pprint.PrettyPrinter(width=80)
"Create an instance of the FileInput class . With arguments `files`, `bufsize`.","fileinput.input(files=None, bufsize=0)","fileinput.input(files=None, bufsize=0)"
Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .,"_thread.start_new_thread(function, args)","_thread.start_new_thread(function, args)"
Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .,stream_reader.read(size),stream_reader.read(size)
"For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .","dataclasses.field(default=MISSING, default_factory=MISSING)","dataclasses.field(default=MISSING, default_factory=MISSING)"
"Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .","random.shuffle(x, random)","def shuffle_random(x, y, random):
  if random is None:
    random = random.normal(0, 1, 100)
    if y == 0:
      return x,y,z
  else:
    return x,y,z"
Insert a new item with value `x` in the array before position `i` .,"array.insert(i, x)","array.insert(i, x)"
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .",timeit.repeat(repeat=5),"timeit.repeat(repeat=5, number=1000000)"
"Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .","time.strftime(format, t)","time.strftime(format, t)"
"patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.","unittest.mock.patch(target, **kwargs, new=DEFAULT)","unittest.mock.patch(target, **kwargs, new=DEFAULT)"
"Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .","warnings.showwarning(message, category, filename, lineno, line=None)","warnings.showwarning(message, category, filename, lineno, line=None)"
"Return a list of the best “ good enough ” matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .","difflib.get_close_matches(word, possibilities, cutoff=0.6)","import re
def get_similar_words(word, possibilities, cutoff=0.6):
    list(re.findall(r""[0-9]"", text, possibilities, cutoff=0.6))"
"Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.","IMAP4.fetch(message_set, message_parts)","IMAP4.fetch(message_set, message_parts)"
Return a dictionary representing the current global symbol table .,globals(),globals()
`word` will usually be a user ’ s password as typed at a prompt or in a graphical interface .,crypt.crypt(word),crypt.crypt(word)
Return a floating point number constructed from a number or string `x` .,float(),float(x)
"Set the virtual screen cursor to `y` , `x` .","curses.setsyx(y, x)","curses.setsyx(y, x)"
"Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.","loop.start_tls(transport, protocol, sslcontext)","loop.start_tls(transport, sslcontext)"
"A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.","doctest.Example(source, want, lineno=0, indent=0)","doctest.Example(source, want, lineno=0, indent=0)"
"Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .",xml.dom.getDOMImplementation(features=()),xml.dom.getDOMImplementation(features=())
A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .,unittest.main(defaultTest=None),unittest.main(argv=None)
"This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .",cgitb.text(info),cgitb.text(info)
This is identical to m.group ( `g` ) .,Match.__getitem__(g),Match.__getitem__(g)
"Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .","compileall.compile_path(skip_curdir=True, maxlevels=0)","compileall.compile_path(skip_curdir=0, maxlevels=0)"
"When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str ’ s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .","email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')","email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')"
"Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .","locale.currency(val, symbol=True)","locale.currency(val, symbol=True)"
Write `data` to the output file .,aifc.writeframes(data),aifc.writeframes(data)
"Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .","doctest.testsource(module, name)","importlib.import_module(module, name)"
"Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .","bdb.checkfuncname(b, frame)","def check_line(b, c, d): 
	if (b == c): 
		return True
	if (a == c): 
		return False
	if (b == a): 
		return True
	if (c == d): 
		return False
	if (a == c): 
		return True
		b = b 
		c = c 
	if (b == a): 
		return True
	return False"
Return the name of the key numbered `k` as a bytes object .,curses.keyname(k),curses.keyname(k)
Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .,stream_reader.read(size),stream_reader.read(size)
Set the scrolling region from line `top` to line `bottom` .,"window.setscrreg(top, bottom)","window.setscrreg(top, bottom)"
"Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )","open(file, closefd=True)","open(file, closefd=True)"
Removes the item with the index `i` from the array and returns it .,array.pop(i),a.pop(i)
Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.,"source_loader.set_data(path, data)","source_loader.set_data(path, data)"
"Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .","sorted(iterable, key=None)","def sort_sorted(iterable, key=None):
    result = sorted(iterable, key=None)
    return result"
"True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .",Cookie.is_expired(now=None),"def is_expired(self, now, next):
    if (now > datetime.now()):
        return False
    return True"
"Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .",datetime.isoformat(timespec='auto'),"import datetime
def date_to_iso_ts(date,timespec='auto'):
    return datetime.isoformat(date, timespec='s')"
"This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .","__import__(name, level=0)","__import__(name, level=0)"
"Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.","curses.ungetmouse(id, x, y, z, bstate)","curses.ungetmouse(id, x, y, z, bstate)"
"Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .",ftplib.FTP(user=''),ftplib.FTP(passwd='')
"Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .",pdb.set_trace(header=None),"def debug_stack_frame(header=None):
  if header is not None:
    if header is not None:
      return header
  else:
    return stack_frame[0]"
"Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .","NNTP.xhdr(hdr, str, file=None)","NNTP.xhdr(hdr, str, file=None)"
Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .,"difflib.context_diff(a, b, n=3)","difflib.context_diff(a, b, n=3)"
"This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .","__import__(name, fromlist=())","__import__(name, fromlist=(), tolist=(), fromlist=())"
"Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .",datetime.isoformat(sep='T'),"import datetime, time, timezone;
def date_to_decimal(date,sep=T):
        dt = datetime.datetime(1980, 1, 6, 58, 10, 0)
        dt_format = '%Y-%m-%d %H:%M:%S'
        if date_to_format < 'T':
            dt = datetime.datetime(1980, 1, 6, 0, 0)
        dt = datetime.datetime(1980, 1, 6, 0, 0)
        return dt"
Permanently remove deleted items from selected mailbox .,IMAP4.expunge(),IMAP4.expunge()
"Fused multiply-add . With arguments `other`, `third`.","decimal.fma(other, third)","def multiply_add(other, third):
    return (other * third) + one"
This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .,"HTTPConnection.request(method, url, encode_chunked=False)","HTTPConnection.request(method, url, encode_chunked=False)"
"Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process ’ s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in “ e ” ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process ’ environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .","os.spawnle(mode, path, env)","os.spawnle(mode, path, env)"
"The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.","datetime.datetime(year, month, day, hour=0, minute=0)","datetime.datetime(year, month, day, hour=0, minute=0)"
Adds the specified `filter` filter to this logger .,queue_listener.addFilter(filter),queue_listener.addFilter(filter)
"This method makes a backup of a SQLite database even while it ’ s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .","connection.backup(target, pages=0, sleep=0.250)","connection.backup(target, pages=0, sleep=0.250)"
Return the length ( the number of items ) of an object . With arguments `s`.,len(s),len(s)
Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .,curses.textpad.Textbox(win),curses.textpad.Textbox(win)
This function causes the cgitb module to take over the interpreter ’ s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .,"cgitb.enable(display=1, context=5)","cgitb.enable(display=1, context=5)"
"Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.","inspect.getattr_static(obj, attr, default=None)","inspect.getattr_static(obj, attr, default=None)"
"Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.","save_signals.match_value(self, k, dv, v)","save_signals.match_value(self, k, dv, v)"
Add a `section` named section to the instance .,config_parser.add_section(section),config_parser.add_section(section)
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .",timeit.timeit(globals=None),timeit.timeit(globals=None)
"Disassemble a `code` object , indicating the last instruction if `lasti` was provided .","dis.disassemble(code, lasti=-1)","dis.disassemble(code, lasti=-1)"
"This method makes a backup of a SQLite database even while it ’ s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .","connection.backup(target, sleep=0.250)","connection.backup(target, sleep=0.250)"
Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .,dataclasses.asdict(instance),"dataclasses.asdict(instance, dict_factory=dict)"
Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted — its default value is '/ ' .,"urllib.parse.quote(string, safe='/')","urllib.parse.quote(string, safe='/')"
Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.,collections.OrderedDict(items),"def rearrange_dict(dict1, items):
    result = {}
    for key, value in dict1.items():
        result.update(value)
    return result"
"Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.","DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)","def flatten_entity(name, publicId, systemId, ndata):
  for name, method in inspect.getmembers(name, id, systemId, ndata):
    print(name, method, name, publicId, systemId, ndata)
  return (name, publicId, systemId, ndata)"
"`word` will usually be a user ’ s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .","crypt.crypt(word, salt=None)","hashlib.pbkdf2_hmac(password, salt, iterations)"
"Write text - the string representation of `arg` - at the current turtle position according to `align` ( “ left ” , “ center ” or right ” ) and with the given `font` . With arguments `8`, `""normal"")`.","turtle.write(arg, 8, ""normal""), font=(""Arial"")","turtle.write(arg, 8, ""normal""), font=(""Arial"")"
"Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )","open(file, closefd=True)","open(file, closefd=True)"
A positive integer specifying the number of elements in the array.,array._length_,"def positive_count(arr,n): 
    arr.sort() 
    for i in range(n): 
        arr[i] = 1
    return arr"
"`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .","callable(result, func, arguments)","def wrapper(f, *args, **kwargs):
    pass"
"Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.","operator.length_hint(obj, default=0)","def get_length_hint(obj, default):
    count, default_value = 0, 0
    for i in range(len(obj)):
        if (i % default_value!= 0):
            count = count + 1
            default_value = default_value
    return count, default_value"
Install a timer that calls `fun` after `t` milliseconds .,"turtle.ontimer(fun, t=0)","def tearDown(fun, t=0):
  if (t == 0):
    return None
  else:
    returnfun"
"Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.","platform.java_ver('', ''), '', ''), release='')","platform.java_ver('', ''), '', ''), vendor='')"
Return a generator of groups with up to `n` lines of context .,sequence_matcher.get_grouped_opcodes(n=3),"def group_sequence(n,m):
	items = [list(iterable) for _ in range(n)]
	for i in range(m):
		items.extend(map(next, items))
	return items"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2, l=1)","text_calendar.formatyear(theyear, w=2, l=1)"
Raised when the parser encounters a syntax error.,SyntaxError,SyntaxError
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, l=1)","text_calendar.formatyear(theyear, w=2, l=1)"
This function is used to turn the `capture` of warnings by logging on and off .,logging.captureWarnings(capture),logging.captureWarnings(capture)
Write the XML-RPC encoding of this DateTime item to the `out` stream object .,date_time.encode(out),date_time.encode(out)
Set the `method` which should be used to start child processes .,multiprocessing.set_start_method(method),multiprocessing.set_start_method(method)
Deprecated alias of decodebytes ( ) . With arguments `s`.,base64.decodestring(s),base64.decodestring(s)
"Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .",pkgutil.iter_modules(prefix=''),"importlib.machinery.ModuleSpec(path, prefix='')"
"The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .","hashlib.scrypt(password, salt, n, r, p, dklen=64)","hashlib.scrypt(password, salt, n, r, p)"
Set the value of `a` at index `b` to `c` .,"operator.setitem(a, b, c)","operator.__setitem__(a, b, c)"
"Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , … `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)"
"Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .",platform.libc_ver(lib=''),platform.libc_ver(lib='')
"If `selop` is not specified , returns selected `items` .",widget.selection(items=None),"def check_selection(items,selop,items):
  if selop:
    items = [item for item in items if item is not None]
    return items"
"This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .",fraction.from_decimal(dec),"def from_decimal(dec,dec):
    if dec == 0:
        return 0
    res = dec * pow(dec, 2)
    return (res) "
"Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.","Morsel.setdefault(key, value=None)","Morsel.setdefault(key, value=None)"
"Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .","filecmp.cmp(f1, f2, shallow=True)","filecmp.cmp(f1, f2, shallow=True)"
Set the value of `a` at index `b` to `c` .,"operator.setitem(a, b, c)","operator.__setitem__(a, b, c)"
Sends `data` to the remote server .,IMAP4.send(data),IMAP4.send(data)
"Return a new set object , optionally with elements taken from `iterable` .",set(),set()
"Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types — list , tuple , range .",list(),"def mutable_list(list1):
  list1 = list(list1)
  list2 = list(list2)
  return list1"
"Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .",sys.set_coroutine_origin_tracking_depth(depth),sys.set_coroutine_origin_tracking_depth(depth)
Return a str version of `object` .,str(),"import sys 
def str_version(object):
  str_version=sys.maxsize 
  return str_version"
Return an iterator over the variables stored in the `context` object .,iter(context),iter(context)
Set the current numeric umask and return the previous umask . With arguments `mask`.,os.umask(mask),os.umask(mask)
"Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .",pdb.set_trace(header=None),"def debug_stack_frame(header=None):
  if header is not None:
    if header is not None:
      return header
  else:
    return stack_frame[0]"
"Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .","platform.libc_ver(executable=sys.executable, lib='')",platform.libc_ver(lib='')
"Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .","pickletools.dis(pickle, out=None)",pickletools.dis(pickle)
"`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.","header_registry.map_to_type(self, name, cls)","def __init__(self, name, cls):
    self.name = name"
Add `sequence` to the list of sequences that include this message .,mh_message.add_sequence(sequence),mh_message.add_sequence(sequence)
A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .,"shelve.Shelf(dict, keyencoding='utf-8')","shelve.Shelf(dict, keyencoding='utf-8')"
Create a shared dict object and return a proxy for it . With arguments `mapping`.,sync_manager.dict(mapping),sync_manager.dict(mapping)
"Return the entire message flattened as a string . When optional `unixfrom` is true , the envelope header is included in the returned string . For backward compatibility reasons , `maxheaderlen` defaults to 0 , so if you want a different value you must override it explicitly ( the value specified for max_line_length in the `policy` will be ignored by this method ) .","message.as_string(unixfrom=False, maxheaderlen=0)","message.as_string(unixfrom=False, maxheaderlen=0)"
Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .,"joinable_queue.send_bytes(buffer, offset, size)","joinable_queue.send_bytes(buffer, offset, size)"
Add correct Cookie header to `request` .,CookieJar.add_cookie_header(request),CookieJar.add_cookie_header(request)
Extract all `members` from the archive to the current working directory or directory `path` .,"TarFile.extractall(path=""."", members=None)","TarFile.extractall(path=""."", members=None)"
"Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.","Request.add_header(key, val)","Request.add_header(key, val)"
"Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you ’ ll override it by specifying a filename . With arguments `caps`.","mailcap.findmatch(caps, filename='/dev/null')","mailcap.findmatch(caps, filename='/dev/null')"
"Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .",queue_listener.__init__(level=NOTSET),queue_listener.append(new_queue)
"Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .","window.addnstr(str, n)","window.addnstr(str, n)"
Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The desired output `width` is constrained using the width parameter ; the default is 80 characters .,"pprint.PrettyPrinter(indent=1, width=80)","pprint.PrettyPrinter(indent=1, width=80)"
"Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child ’ s process id , exit status indication , and resource usage information is returned . With arguments `options`.",os.wait3(options),os.wait3(options)
Open the database `file` file and return a corresponding object . The optional `flag` argument can be :,"dbm.open(file, flag='r')","dbm.open(file, flag='r')"
Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .,msilib.CreateRecord(count),"msilib.CreateRecord(count, count)"
"When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str ’ s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .","email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')","email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')"
"Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.","max(arg1, arg2, *args, key)","def largest_fourth_largest(f,1,2,3,2,1,0):
    result = max(f(1, 2, 3, 4), key = lambda x: x[1])
    return result"
Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .,"deque.index(x, start, stop)","deque.index(x, start, stop)"
"Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern “ ** ” will match any files and zero or more directories , subdirectories and symbolic links to directories .","glob.glob(pathname, recursive=False)","import glob
def list_dir_matches(pathname, recursive=False):
  res = []
  for root, dirs, files in os.walk(pathname, recursive=False):
    for name in files:
      if re.search(pattern, name):
        res.append(os.readlink(pathname, recursive=False))
      break
  return (res)"
"Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.","logging.handlers.HTTPHandler(host, url, method='GET', secure=False)","logging.handlers.HTTPHandler(host, url, method='GET', secure=False)"
A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands ’ respective format codes are interpreted using struct syntax .,memoryview.__eq__(exporter),memoryview.__eq__(exporter)
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.","calendar.prcal(year, l=0, m=3)","calendar.prcal(year, l=0, m=3)"
"Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .","os.utime(path, ns)","os.utime(path, (ns, time, new_dir))"
"Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.","email.contentmanager.get_content(msg, errors='replace')","email.contentmanager.get_content(msg, errors='replace')"
"Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.",ArgumentParser.set_defaults(**kwargs),ArgumentParser.set_defaults(**kwargs)
"Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .",date.fromtimestamp(timestamp),"import datetime
def POSIX_timestamp(timestamp):
  return datetime.fromtimestamp(timestamp, tz=None)"
The base class for all built-in exceptions.,BaseException,BaseException
"Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .","pickletools.dis(pickle, indentlevel=4)","pickletools.dis(pickle, out=None, indentlevel=4)"
"Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .","test_case.assertIsInstance(obj, cls)","test_case.assertIsInstance(obj, cls)"
Method called on an input `line` when the command prefix is not recognized .,Cmd.default(line),Cmd.default(line)
All arguments are optional . With arguments `microsecond`.,datetime.time(microsecond=0),"def datetime_to_microsecond(microsecond):
  return (microsecond+(datetime.timedelta(microsecond=0)), )"
"Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .","Telnet.expect(list, timeout=None)","import re
def check_match(list, timeout):
  res = re.sub(r""(?P<list>[-1])(\d+):(?P<len>\\d+)"", '', list)
  return (res) "
Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .,"sys.set_asyncgen_hooks(firstiter, finalizer)","sys.set_asyncgen_hooks(firstiter, finalizer)"
"This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.","warnings.warn_explicit(message, category, filename, lineno)","warnings.warn_explicit(message, category, filename, lineno, lineno, utc, False)"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.","print(*objects, end='\n')","print(*objects, file=sys.stdout)"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.",print(*objects),"print(*objects, file=sys.stdout)"
"Low level interface to kevent With arguments `changelist`, `max_events`.","kqueue.control(changelist, max_events)","kqueue.add(k, events, max_events)"
"Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.","calendar.calendar(year, w=2, m=3)","calendar.calendar(year, w=2, m=3)"
"Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .","pickletools.dis(pickle, out=None)",pickletools.dis(pickle)
Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .,"loop.connect_read_pipe(protocol_factory, pipe)","loop.connect_read_pipe(protocol_factory, pipe)"
"Return a Boolean value , i.e .",bool(),"def is_string_equal(x, y):
  if y == 'Yes':
    return True
  else:
    return False"
Identify the client using a plaintext `password` . With arguments `user`.,"IMAP4.login(user, password)","IMAP4.login(user, password)"
Execute the `statement` ( given as a string or a code object ) under debugger control .,pdb.run(statement),pdb.run(statement)
"Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.","bdb.effective(file, line, frame)","bdb.effective(file, line, frame)"
"Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.","colorsys.hls_to_rgb(h, l, s)","colorsys.hls_to_rgb(h,l,s)"
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.","calendar.prcal(year, w=0, m=3)","calendar.prcal(year, w=0, m=3)"
"Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.",array.frombytes(s),array.frombytes(s)
Wait until a `predicate` becomes true .,condition.wait_for(predicate),"def wait_for(predicate, t):
  if predicate:
    return t
  else:
    return ('No!')"
Return a callable object that calls the method `name` on its operand . With arguments `args...`.,"operator.methodcaller(name, args...)","def method_of_operator(name, args):
    res = getattr(operator, name, args)
    return res"
"Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .","gzip.open(filename, mode='rb', compresslevel=9)","gzip.open(filename, mode='rb', compresslevel=9)"
Read at most `n` bytes from file descriptor `fd` .,"os.read(fd, n)","os.read(fd, n)"
"Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .","itertools.count(start=0, step=1)","def count_evening_digits(start, stop, step):
	for i in range(0, stop):
		if (start < stop):
			return (start, stop)
		if (stop - start):
				return (i, step)"
"Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .","CookieJar.clear(domain, path)","CookieJar.clear(domain, path)"
Return a string containing a printable representation of an `object` .,repr(object),repr(object)
"A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.",typing.NewType(typ),"typing.NewType(typename, (), type)"
"Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python ’ s parser , because it always uses ' < string > ' when reading from a string .",InteractiveInterpreter.showsyntaxerror(filename=None),InteractiveInterpreter.showsyntaxerror(filename=None)
"Create an instance of the FileInput class . With arguments `files`, `bufsize`.","fileinput.input(files=None, bufsize=0)","fileinput.input(files=None, bufsize=0)"
Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .,"shelve.open(filename, flag='c')","shelve.open(filename, flag='c')"
"Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.","logging.FileHandler(filename, mode='a')","logging.FileHandler(filename, mode='a')"
"Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .","filecmp.cmp(f1, f2, shallow=True)","filecmp.cmp(f1, f2, shallow=True)"
"Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .","quopri.decode(input, output, header=False)","quopri.decode(input, output, output, header=False)"
Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .,"test_case.assertRaisesRegex(exception, regex)","test_case.assertRaisesRegex(exception, regex)"
Write a list of `lines` to the stream .,io_base.writelines(lines),io_base.writelines(lines)
"Codec details when looking up the codec registry . With arguments `encode`, `decode`.","codecs.CodecInfo(encode, decode)","codecs.CodecInfo(encode, decode)"
"Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .","AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)","AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)"
"Load a plist from a bytes object . With arguments `data`, `fmt`.","plistlib.loads(data, fmt=None)","plistlib.loads(data, fmt=None)"
Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is “ junk ” and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .,"difflib.SequenceMatcher(a='', autojunk=True)","def autojunk(a, b, c, d):
  if (a is None):
    return False
  else:
    return a + 1"
"Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of “ zip ” ( if the zlib module is available ) , “ tar ” , “ gztar ” ( if the zlib module is available ) , “ bztar ” ( if the bz2 module is available ) , or “ xztar ” ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .","shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)","from tarfile import BZ2,TACHA_BASE_DIR, get_archive_format, zip_file_format
def create_archive(base_name, format):
    base_dir = os.path.join(base_dir, format)
    zip_file = BZ2File(base_name, format)
    base_dir = os.path.join(base_dir, 'zip')
    return (base_dir, zip_file, base_name, format)"
Return True if the file system for `directory` is case-insensitive .,test.support.fs_is_case_insensitive(directory),test.support.fs_is_case_insensitive(directory)
Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .,msilib.CreateRecord(count),"msilib.CreateRecord(count, count)"
Create a new ArgumentParser object . With arguments `prog`.,argparse.ArgumentParser(prog=None),argparse.ArgumentParser(prog=None)
A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .,unittest.main(testRunner=None),unittest.main(test_loader=None)
This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .,ArgumentParser.error(message),ArgumentParser.error(message)
Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .,dataclasses.asdict(instance),"dataclasses.asdict(instance, dict_factory=dict)"
"Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .",slice(stop),"def slice_range(start, stop, step):
    result = slice(start, stop)
    return result"
"Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.",turtle.ScrolledCanvas(master),turtle.ScrolledCanvas(master)
Only available on Windows.,WindowsError,WindowsError
Each concrete class has an attribute _fields which gives the names of all child nodes.,ast._fields,ast._fields
Allow an application to set the `locale` for errors and warnings .,XMLReader.setLocale(locale),XMLReader.setLocale(locale)
"If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.",bdb.dispatch_line(frame),"def method_to_call(frame, func): 
    if (func == ""second"" or func == ""third""): 
        return True
    else: 
        return False"
Default loader . `href` is a URL . `parse` is for parse mode either “ xml ” or “ text ” . `encoding` is an optional text encoding .,"xml.etree.ElementInclude.default_loader(href, parse, encoding=None)","xml.etree.ElementInclude.default_loader(href, parse, encoding=None)"
"Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .","test_case.assertAlmostEqual(first, second, places=7)","test_case.assertAlmostEqual(first, second, places=7, seconds=0)"
Write a list of `lines` to the stream .,io_base.writelines(lines),io_base.writelines(lines)
Return a copy of the string in which each character has been mapped through the given translation `table` .,str.translate(table),str.translate(table)
"With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .",gc.collect(generation=2),gc.collect(generation=2)
Query or modify the options for the specified `column` . With arguments `**kw`.,"widget.column(column, **kw)","def set_column(column, **kw):
  res = [item for item in range(column, **kw)]
  return (res) "
Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .,logging.handlers.NTEventLogHandler(appname),logging.handlers.NTEventLogHandler(appname)
Return `r` length subsequences of elements from the input `iterable` .,"itertools.combinations(iterable, r)","def sub_sequences(iterable, r):
	for i in range(r):
		for j in range(i + 1, r):
			yield [iterable[i][j] for i in range(i + 1, r)]
	return list(sub_sequences(iterable, r))"
"Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.","operator.length_hint(obj, default=0)","def get_length_hint(obj, default):
    count, default_value = 0, 0
    for i in range(len(obj)):
        if (i % default_value!= 0):
            count = count + 1
            default_value = default_value
    return count, default_value"
Set the current numeric umask and return the previous umask . With arguments `mask`.,os.umask(mask),os.umask(mask)
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, c=6)","text_calendar.formatyear(theyear, w=2, l=1)"
Create an object used to boxcar method calls . `server` is the eventual target of the call .,xmlrpc.client.MultiCall(server),xmlrpc.client.MultiCall(server)
Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.,"calendar.prcal(year, l=0)","calendar.prcal(year, l=0)"
"The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .",group.__str__(),group[0].encode(encoding='utf-8')
Set the `font` style .,writer.new_font(font),writer.new_font(font)
Return a proxy object that delegates method calls to a parent or sibling class of `type` .,super(),super()
"Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .",ast.get_docstring(node),ast.get_docstring(node)
"Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .",Database.OpenView(sql),Database.OpenView(sql)
"A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .","doctest.DocTestFinder(verbose=False, parser=DocTestParser())","def extract_doc_test_format(test_list, verbose=False, filename='<string>',
    parser=DocTestParser()):
    result = parser.extract_doc(test_list, filename, recursive=False)
    return result"
Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.,profile.print_stats(sort=-1),profile.print_stats(sort=-1)
Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.,profile.print_stats(sort=-1),profile.print_stats(sort=-1)
"Return a new datetime object whose `date` components are equal to the given date object ’ s , and whose `time` components are equal to the given time object ’ s .","datetime.combine(date, time)","datetime.combine(date, time)"
Set a new `protocol` .,BaseTransport.set_protocol(protocol),BaseProtocol.set_protocol(protocol)
"Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.","test_loader.loadTestsFromNames(names, module=None)","test_loader.loadTestsFromNames(names, module_names)"
Compose a raw device number from the `major` and `minor` device numbers .,"os.makedev(major, minor)","os.makedev(major, minor)"
"Draw a circular dot with diameter `size` , using color . With arguments `*color`.",turtle.dot(*color),"turtle.dot(*color, size=None)"
"Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .",SummaryInformation.GetProperty(field),SummaryInformation.Get(field)
Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .,"os.sendfile(out, in, offset, count)","os.sendfile(out, in, offset, count, out_of_place, offset)"
"This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :","fcntl.lockf(fd, cmd, len=0, start=0, whence=0)","fcntl.lockf(fd, cmd, len=0, start=0, whence=0)"
"Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .","xmlparser.StartElementHandler(name, attributes)","xmlparser.StartElementHandler(name, attributes)"
"Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .","os.path.join(path, *paths)","os.path.join(path, *paths)"
Retrieve the next item from the `iterator` by calling its __next__ ( ) method .,next(iterator),"def next_item(iterator):
  next_item = next(iterator)
  return next_item"
"Return a list of the best “ good enough ” matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .","difflib.get_close_matches(word, possibilities, n=3)","difflib.get_close_matches(word, possibilities, n=3)"
"Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 . The optional parameter `endpos` limits how far the string will be searched ; it will be as if the string is endpos characters long , so only the characters from pos to endpos - 1 will be searched for a match .","Pattern.search(string, pos, endpos)","import re
def find_pat(string, pos, endpos):
    pattern = re.compile(r'(\w+\S*(\w+))', re.IGNORECASE)
    string, pos, endpos = 0, 0, 0
    result = re.search(pattern, string, pos, endpos)
    return result.groups()"
"Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.","ArgumentParser.add_argument(name or flags..., action)","ArgumentParser.add_argument(name or flags..., action)"
"Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .","os.walk(top, topdown=True)","def walk(dir, topdown=True, bottom=False):
  if topdown:
    if not os.path.isdir(dir):
      topdown = True
      elif topdown:
      topdown = False
    else:
      topdown = True
    return topdown,"
"Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .","audioop.findfactor(fragment, reference)","audioop.findfactor(fragment, reference, i, count, replacement)"
A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .,unittest.main(defaultTest=None),unittest.main(argv=None)
Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :,sys.set_coroutine_wrapper(wrapper),sys.set_coroutine_wrapper(wrapper)
Return the value of the named attribute of `object` . `name` must be a string .,"getattr(object, name)","getattr(object, name)"
Write a `prompt` and read a line .,"InteractiveConsole.raw_input(prompt="""")","InteractiveConsole.raw_input(prompt="""")"
"This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .","xml.etree.ElementTree.XMLParser(html=0, encoding=None)","xml.etree.ElementTree.XMLParser(html=0, encoding=None)"
"Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .",pickletools.dis(pickle),pickletools.dis(pickle)
Write `buf` to the SSL socket and return the number of bytes written .,SSLSocket.write(buf),SSLSocket.write(buf)
Encode the bytes-like object `s` using Base64 and return the encoded bytes .,base64.b64encode(s),base64.b64encode(s)
Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .,traceback.print_stack(f=None),"traceback.print_stack(f=None, file=None)"
"This method makes a backup of a SQLite database even while it ’ s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .","connection.backup(target, pages=0, sleep=0.250)","connection.backup(target, pages=0, sleep=0.250)"
Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .,"max(iterable, key)","max(iterable, key)"
Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .,datetime.__format__(format),"import datetime
def format_time(format, format_str):
  return (datetime.strftime(format_str, format=format_str))"
Returns socket instance used to connect to server .,IMAP4.socket(),IMAP4.socket()
Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .,ContentHandler.characters(content),ContentHandler.characters(content)
"Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.","oss_mixer_device.set(control, (left, right))","oss_mixer_device.set(control, (left, right))"
"Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .",doctest.debug_src(src),"doctest.debug_src(src, src)"
Return the absolute value of a number . With arguments `x`.,abs(x),"def absolute_value(x):
  return (abs(x))"
Return a `k` sized list of elements chosen from the `population` with replacement .,random.choices(population),"def random_element(population, k):
    max_population = max(population)
    return itertools.zip_longest(population, *args, k)"
Create a turtle . With arguments `canvas`.,turtle.RawTurtle(canvas),turtle.RawTurtle(canvas)
"Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .",Element.setAttributeNode(newAttr),Element.setAttributeNode(newAttr)
Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .,str.lstrip(chars),str.lstrip(chars)
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.","text_calendar.formatyear(theyear, l=1, m=3)","text_calendar.formatyear(theyear, w=2, m=3)"
"This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .",resource.getrusage(who),resource.getrusage(who)
"Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .","os.renames(old, new)","os.renames(old, new)"
A specification for a module ’ s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .,"importlib.machinery.ModuleSpec(name, loader)","importlib.machinery.ModuleSpec(name, loader, name)"
A generic version of collections.deque . With arguments `deque`.,typing.Deque(deque),typing.Deque(deque)
"Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .","webbrowser.register(name, constructor, preferred=False)","webbrowser.register(name, constructor, preferred=False)"
"Draw a circular dot with diameter `size` , using color . With arguments `*color`.","turtle.dot(*color, size=None)","turtle.dot(*color, size=None)"
"Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .","open(file, encoding=None)","open(file, encoding=None)"
"All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .",datetime.timedelta(microseconds=0),"datetime.timedelta(days=0, seconds=0)"
Adds the element `subelement` to the end of this element ’ s internal list of subelements .,element.append(subelement),"element.append(subelement)
return element"
"Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .","FTP.transfercmd(cmd, rest=None)","FTP.transfercmd(cmd, rest=None)"
"Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .",doctest.debug_src(src),"doctest.debug_src(src, src)"
Return the number of variables set in the context object . With arguments `proxy`.,len(proxy),len(proxy)
"Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .","lzma.compress(data, format=FORMAT_XZ, check=-1)","lzma.compress(data, format=FORMAT_XZ, check=-1)"
"Convert a `value` to a “ formatted ” representation , as controlled by `format_spec` .",format(value),"format(value, format_spec)"
"Same as compilest ( st , `filename` ) .",ST.compile(filename='<syntax-tree>'),ST.compile(filename='<syntax-tree>')
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.","timeit.timeit(stmt='pass', setup='pass')","timeit.timeit(stmt='pass', timer=<default timer>)"
"Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .","formatter.get_value(key, args, kwargs)","formatter.get_type(key, args, kwargs)"
"Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.","oss_mixer_device.set(control, (left, right))","oss_mixer_device.set(control, (left, right))"
Return True if the context has a value for var set; return False otherwise.,var in context,"def check_value(var,context): 
  res = False
  for elem in context: 
    if elem == value:
      res = True
      break
  return (res) "
Base class for C callable foreign functions.,ctypes._FuncPtr,ctypes._FuncPtr
"Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .",Match.expand(template),"import re
def sub(template, string):
  return re.sub(r""\\$"", string)"
"Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression ’ s behaviour can be modified by specifying a `flags` value .","re.compile(pattern, flags=0)","import re
def compile(pattern, flags=0):
  pattern = re.compile(pattern, flags=0)
  return (pattern.search(pattern, flags))"
Execute a `code` object .,InteractiveInterpreter.runcode(code),InteractiveInterpreter.runcode(code)
"Enable “ passive ” mode if `val` is true , otherwise disable passive mode .",FTP.set_pasv(val),FTP.set_pasv(val)
"Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.","Packer.pack_fopaque(n, data)","Packer.pack_fopaque(n, data, n)"
Return the value of the Content-Type `header` ’ s parameter `param` as a string .,message.get_param(param),message.get_param(param)
"Create a filesystem node ( file , `device` special file or named pipe ) named `path` .","os.mknod(path, device=0)","os.mknod(path, device=0)"
This function is used by check ( ) to process `tokens` generated by the tokenize module .,tabnanny.process_tokens(tokens),"def process_tokens(tokens):
  process_tokens=False
  return list(itertools.chain.from_iterable(tokens))"
Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.,"code.InteractiveConsole(filename=""<console>"")","code.InteractiveConsole(filename=""<console>"")"
Set ANNOTATIONs for `mailbox` . With arguments `entry`.,"IMAP4.setannotation(mailbox, entry)","IMAP4.setannotation(mailbox, entry)"
"Returns `x` multiplied by `y` , plus `z` .","context.fma(x, y, z)","def multiply(x,y,z):
    return (x * y,y * z)"
"Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .",SubprocessTransport.send_signal(signal),SubprocessTransport.send_signal(signal)
"Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .","mmap.find(sub, start, end)","mmap.find(sub, start, end)"
"The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .",eval(expression),"eval(expression, globals, locals)"
"Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .","turtle.circle(radius, steps=None)","turtle.circle(radius, steps=None)"
A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .,multiprocessing.Condition(lock),multiprocessing.Condition(lock)
Install a timer that calls `fun` after `t` milliseconds .,"turtle.ontimer(fun, t=0)","def tearDown(fun, t=0):
  if (t == 0):
    return None
  else:
    returnfun"
Sums `start` and the items of an `iterable` from left to right and returns the total .,"sum(iterable, start)","def sum_left(iterable, start,end):
    total = 0
    for i in iterable:
        total = total + i
    return total"
"This function causes the cgitb module to take over the interpreter ’ s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .","cgitb.enable(display=1, format=""html"")","cgitb.enable(display=1, format=""html"")"
Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.,"calendar.calendar(year, l=1)","calendar.calendar(year, l=1)"
Create a turtle . With arguments `canvas`.,turtle.RawTurtle(canvas),turtle.RawTurtle(canvas)
Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .,os.register_at_fork(before=None),"os.register_at_fork(before=None, after=None)"
Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is “ junk ” and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .,"difflib.SequenceMatcher(isjunk=None, b='')","def find_junk(a, b, c, d):
	if (a is None):
		return None
	if (b is None):
		return a
	if (a == None):
		return None
	if (b is None):
		return a
	if (b is None):
		return a
	if (a == None):
		return None
	if (b == None):
		return a
	if (b is"
"Returns a compression object , to be used for compressing data streams that won ’ t fit into memory at once . `level` is the compression level – an integer from 0 to 9 or -1 . `method` is the compression algorithm .","zlib.compressobj(level=-1, method=DEFLATED)","zlib.compressobj(level=-1, method=DEFLATED)"
"A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . If one or more filters are provided , or if the optional keyword argument `quiet` is False , it checks to make sure the warnings are as expected : each specified filter must match at least one of the warnings raised by the enclosed code or the test fails , and if any warnings are raised that do not match any of the specified filters the test fails . With arguments `*filters`.","test.support.check_warnings(*filters, quiet=True)","test_case.assertEqual(quiet, True, False)"
"Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression ’ s behaviour can be modified by specifying a `flags` value .","re.compile(pattern, flags=0)","import re
def compile(pattern, flags=0):
  pattern = re.compile(pattern, flags=0)
  return (pattern.search(pattern, flags))"
"As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \x , \u or \U escapes .",ascii(object),ascii(object)
"A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.","doctest.Example(source, want)","doctest.Example(source, want)"
Associate `dialect` with `name` .,"csv.register_dialect(name, dialect)","import csv
import operator
def install(name):
  for i in range(0, len(data), 0):
    dialect.register_dialect(name, dialect)
  return dialect"
"Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .","CookieJar.extract_cookies(response, request)","CookieJar.extract_cookies(response, request)"
Return the name of the key numbered `k` as a bytes object .,curses.keyname(k),curses.keyname(k)
"Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .","webbrowser.register(name, constructor)","webbrowser.register(name, constructor, instance=None)"
Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .,"config_parser.read_string(string, source='<string>')","config_parser.read_string(string, source='<string>', dest='<string>')"
Bootstraps pip into the current or designated environment . `verbosity` controls the level of output to sys.stdout from the bootstrapping operation .,ensurepip.bootstrap(verbosity=0),ensurepip.bootstrap(verbosity=0)
Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .,pprint.PrettyPrinter(width=80),pprint.PrettyPrinter(width=80)
Return the “ identity ” of an `object` .,id(object),"def identity(object):
  return object.__id__()"
Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .,ensurepip.bootstrap(user=False),ensurepip.bootstrap(user=False)
Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .,"logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)","logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)"
"Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , … `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)"
Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.,zip(*iterables),zip(*iterables)
"This function causes the cgitb module to take over the interpreter ’ s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .","cgitb.enable(format=""html"")","cgitb.enable(format=""html"")"
Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .,executor.shutdown(wait=True),executor.shutdown(wait=True)
Get a list of frame records for a `traceback` ’ s frame and all inner frames .,inspect.getinnerframes(traceback),inspect.getinnerframes(traceback)
Clear the internal type cache .,sys._clear_type_cache(),sys._clear_type_cache()
"Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .",urllib.parse.urlencode(query),urllib.parse.urlencode(query)
"Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :",ArgumentParser.add_mutually_exclusive_group(required=False),ArgumentParser.add_mutually_exclusive_group(required=False)
"Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .","random.choices(population, weights=None)","def random_element(population, k):
    list(population, key=None)
    if k == 0 or k == 1:
        return None
    final_list = []
    for i in range(0, n):
        total_length = 1
        for j in range(i + 1, n):
            if (population[i] > population[j]):
                final_list.append(population[i])
            else:
                final_list.append(weights[j])"
Seek to the specified frame number . With arguments `pos`.,aifc.setpos(pos),"aifc.setpos(pos, pos + 1)"
Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled—this can not be used in binary mode .,"open(file, errors=None)","open(file, errors=None)"
Return a deep copy of `x` . With arguments `memo`.,"copy.deepcopy(x, memo)","copy.deepcopy(x, memo)"
Sends `data` to the remote server .,IMAP4.send(data),IMAP4.send(data)
Connect `sock` to a remote socket at `address` .,"loop.sock_connect(sock, address)","loop.sock_connect(sock, address)"
Return True if the values `a` and `b` are close to each other and False otherwise .,"cmath.isclose(a, b)","cmath.isclose(a,b)"
"Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .",enumerate(iterable),enumerate(iterable)
"This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.","bdb.Breakpoint(self, file, line, temporary=0)","bdb.Breakpoint(self, file, line, temporary=0)"
The base class for all built-in exceptions.,BaseException,BaseException
Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .,"bisect.bisect_left(a, x, hi=len(a))","import bisect
def insert_point(a, x, y, l):
    i = bisect.bisect_left(a, x, l)
    return i"
Raised when the second argument of a division or modulo operation is zero.,ZeroDivisionError,"def div_of_two(n,m): 
	div_with_zero = 0
	for i in range(n): 
		div_with_zero = (div_with_zero * i) % 0
	return div_with_zero"
Add a header to the message with field `name` name and value `val` .,"message.__setitem__(name, val)","message.__setitem__(name, val)"
"Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .","binascii.b2a_uu(data, backtick=False)","binascii.b2a_uu(data, backtick=False)"
Increments the progress bar ’ s value by `amount` .,widget.step(amount=None),widget.step(amount=None)
"All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .",datetime.timedelta(microseconds=0),"datetime.timedelta(days=0, seconds=0)"
Returns the volume of a given mixer `control` .,oss_mixer_device.get(control),oss_mixer_device.get(control)
Base class for C callable foreign functions.,ctypes._FuncPtr,ctypes._FuncPtr
"Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .",vars(),vars()
"This function is useful for programs that want to emulate Python ’ s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .","code.compile_command(source, symbol=""single"")","compile(source, filename=""<input>"", mode='exec')"
"Returns a compression object , to be used for compressing data streams that won ’ t fit into memory at once . `level` is the compression level – an integer from 0 to 9 or -1 . `method` is the compression algorithm .","zlib.compressobj(level=-1, method=DEFLATED)","zlib.compressobj(level=-1, method=DEFLATED)"
Stop monitoring the `fd` file descriptor for read availability .,loop.remove_reader(fd),loop.remove_reader(fd)
Associate `dialect` with `name` .,"csv.register_dialect(name, dialect)","import csv
import operator
def install(name):
  for i in range(0, len(data), 0):
    dialect.register_dialect(name, dialect)
  return dialect"
Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.,"timer.repeat(repeat=5, number=1000000)","def timeit_repeat(repeat,number):
  res = tuple(repeat(number, repeat))
  return (res) "
`word` will usually be a user ’ s password as typed at a prompt or in a graphical interface .,crypt.crypt(word),crypt.crypt(word)
"All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .",datetime.timedelta(days=0),"datetime.timedelta(days=0, seconds=0)"
"Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.","warnings.filterwarnings(action, append=False)","warnings.filterwarnings(action, append=False)"
"Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.","ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)","ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)"
"Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .","gzip.open(filename, mode='rb')","gzip.open(filename, mode='rb')"
Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.,"calendar.prcal(year, w=0)","calendar.prcal(year, w=0)"
"Add the `file` with the pathname `full` to the CAB file , under the name `logical` .","cab.append(full, file, logical)","cab.append(full, file, logical)"
"Return an iterator `object` . If the second argument , `sentinel` , is given , then object must be a callable object .","iter(object, sentinel)","iter(object, sentinel)"
"All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .",datetime.timedelta(days=0),"datetime.timedelta(days=0, seconds=0)"
Return the value of the Content-Type `header` ’ s parameter `param` as a string .,message.get_param(param),message.get_param(param)
"Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 . The optional parameter `endpos` limits how far the string will be searched ; it will be as if the string is endpos characters long , so only the characters from pos to endpos - 1 will be searched for a match .","Pattern.search(string, pos, endpos)","import re
def find_pat(string, pos, endpos):
    pattern = re.compile(r'(\w+\S*(\w+))', re.IGNORECASE)
    string, pos, endpos = 0, 0, 0
    result = re.search(pattern, string, pos, endpos)
    return result.groups()"
Checkpoint mailbox on server .,IMAP4.check(),IMAP4.check()
Read data from the stream until `separator` is found .,stream_reader.readuntil(separator=b'\n'),stream_reader.readuntil(separator=b'\r\n')
"Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .","compileall.compile_dir(dir, workers=1)","compileall.compile_dir(dir, workers=1)"
"Load a plist from a bytes object . With arguments `data`, `fmt`.","plistlib.loads(data, fmt=None)","plistlib.loads(data, fmt=None)"
A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.,xmlrpc.client.ServerProxy(uri),xmlrpc.client.ServerProxy(uri)
"Convert an integer number to a lowercase hexadecimal string prefixed with “ 0x ” . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .",hex(x),"def int_to_hex(x):
        result = int("""".join(map(chr, x)), 16)
        return result"
"Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.","calendar.prcal(year, w=0, c=6)","calendar.prcal(year, w=0, c=6)"
Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .,decimal.Context(capitals=None),"def new_capitals(capitals=None):
  if len(capitals) == 0:
    return None
  else:
    return 1"
"Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .","scheduler.enterabs(time, priority, action, argument=())","scheduler.enterabs(time, priority, action, argument=())"
"Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .",platform.architecture(bits=''),platform.architecture(bits='')
Set the main `type` and subtype for the Content-Type `header` .,"message.set_type(type, header='Content-Type')","message.set_type(type, header='Content-Type')"
"Low level interface to kevent With arguments `changelist`, `max_events`.","kqueue.control(changelist, max_events)","kqueue.add(k, events, max_events)"
Add a `header` that will not be added to a redirected request . With arguments `key`.,"Request.add_unredirected_header(key, header)","Request.add_unredirected_header(key, header)"
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.",timeit.timeit(stmt='pass'),"timeit.timeit(stmt='pass', timer=<default timer>)"
Return the complex number x with polar coordinates `r` and `phi` .,"cmath.rect(r, phi)","import cmath
def polar_rect(r, phi):
  cn=complex(r, phi)
  return cn"
"A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .",io.BufferedReader(raw),io.BufferedReader(raw)
Bind `fun` to mouse-click events on this turtle . With arguments `add`.,"turtle.onclick(fun, add=None)","turtle.onclick(fun, add=None)"
This class constructor creates an instance of a “ statistics object ” from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.,pstats.Stats(*filenames or profile),pstats.Stats(*filenames or profile)
Run the command described by `args` . With arguments `shell`.,"subprocess.run(args, shell=False)","subprocess.run(args, shell=False)"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2, c=6)","text_calendar.formatyear(theyear, w=2, l=1)"
All the signal numbers are defined symbolically.,SIG*,SIG*
"Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .",asyncore.loop(timeout),"asyncore.loop(timeout, count)"
"Return a list of the best “ good enough ” matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .","difflib.get_close_matches(word, possibilities, n=3)","difflib.get_close_matches(word, possibilities, n=3)"
"Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\t'`.","header.encode(\t', linesep='\n')","header_len = len(header) 
header_re = re.compile(r'(\t\n|\r?\n){2,}')
header = header_len.sub('\n', header) 
 return header"
"Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.","filecmp.dircmp(a, b, ignore=None)","filecmp.dircmp(a, b, ignore=None, dirnames=None)"
The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.,venv.EnvBuilder(clear=False),venv.EnvBuilder(clear=False)
"Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .","signal.setitimer(which, seconds, interval=0.0)","signal.setitimer(which, seconds, interval=0.0)"
"Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .","filecmp.cmp(f1, f2)","filecmp.cmp(f1, f2)"
Return `n` independent iterators from a single `iterable` .,"itertools.tee(iterable, n=2)","itertools.tee(iterable, n=2)"
"Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.","wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)","wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)"
Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.,"xml.etree.ElementTree.SubElement(parent, tag, **extra)","xml.etree.ElementTree.SubElement(parent, tag, **extra)"
"Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .","webbrowser.register(name, constructor)","webbrowser.register(name, constructor, instance=None)"
Base class for warning categories.,Warning,"import warnings
def warning_handler(message):
  log=warnings.warn(*message)
  return log"
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.","timeit.repeat(stmt='pass', repeat=5)","timeit.repeat(stmt='pass', repeat=5)"
"If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .",locale.setlocale(category),"import locale
def set_locale(category):
  if isinstance(category, str):
    return [locale.setlocale(category, category) for category in [category] ]
  else:
    return [locale.setlocale(category, value) for value in [locale] ]"
"This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .","bdb.trace_dispatch(frame, event, arg)","bdb.trace_dispatch(frame, event, arg)"
Add a mapping from the MIME `type` type to the extension `ext` .,"mimetypes.add_type(type, ext)","mimetypes.add_type(type, ext)"
"Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .","compileall.compile_dir(dir, maxlevels=10)","compileall.compile_dir(dir, maxlevels=10)"
Translate an Internet `port` number and protocol name to a service name for that service .,socket.getservbyport(port),"import socket
def translate_email(email, port):
        pass"
Return a property attribute .,property(),"def property(self): 
    return self._property"
"Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .","test.support.detect_api_mismatch(ref_api, other_api, ignore=())","test_support.set_api_specific_api(ref_api, other_api, ignore=())"
"Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .","xml.etree.ElementTree.tostring(element, short_empty_elements=True)","xml.etree.ElementTree.tostring(element, short_empty_elements=True)"
"Run the command described by `args` . With arguments `stdin`, `shell`.","subprocess.call(args, stdin=None, shell=False)","subprocess.call(args, stdin=None, shell=False)"
Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .,email.header.Header(s=None),email.header.Header(s=None)
Finds the first subelement matching `match` .,element.find(match),element.find(match)
"Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .",email.generator.BytesGenerator(outfp),"def flatten_msg(fn):
  res = []
  for line in fn:
    new_line = line.encode(encoding='utf-8')
    if not new_line:
      res.append(line)
  return (res) "
Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.,"textwrap.wrap(text, **kwargs, width=70)","textwrap.wrap(text, **kwargs, width=70)"
"For existing code calling readfp ( ) with arguments which don ’ t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.","config_parser.readfp(fp, filename=None)","config_parser.readfp(fp, filename=None)"
"Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .",wsgiref.headers.Headers(headers),wsgiref.headers.Headers(headers)
"Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .","msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)","msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)"
Join a `thread` within `timeout` .,test.support.join_thread(thread),test.support.join_thread(thread)
"Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .","code.interact(banner=None, local=None)","def main(exit_msg,locals):
  res = []
  for i in range(0, len(locals)):
    if not isinstance(locals[i], type(string)):
      res.append(locals[i])
  return res "
Allow an application to set the `locale` for errors and warnings .,XMLReader.setLocale(locale),XMLReader.setLocale(locale)
"Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .","window.addstr(y, x, str)","window.addstr(y, x, str)"
Make an iterator that returns evenly spaced values starting with number `start` .,itertools.count(start=0),itertools.count(start=0)
"The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.","configparser.ConfigParser(':'), ';'), defaults=None)","configparser.RawConfigParser(':'), ';'), defaults=None)"
"Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types — list , tuple , range . With arguments `start`, `stop`, `step`.","range(start, stop, step)","def parse_range(start,end,step):
    res = list(range(start,end,step))
    return (res) "
"Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , … `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)"
"Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.","msilib.Feature(db, id, title, desc, display, level=1, parent=None)","msilib.Feature(db, id, title, desc, display, level=1, attributes=0)"
Read up to `n` bytes .,stream_reader.read(n=-1),stream_reader.read(n=-1)
Open the database `file` file and return a corresponding object . The optional `flag` argument can be :,"dbm.open(file, flag='r')","dbm.open(file, flag='r')"
"Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.",cab.commit(database),cab.commit(database)
This function causes the cgitb module to take over the interpreter ’ s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .,cgitb.enable(context=5),cgitb.enable(context=5)
Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.,asyncio.gather(*aws),asyncio.gather(*aws)
Return an iterator over the variables stored in the `context` object .,iter(context),iter(context)
Return the stateth completion for `text` . With arguments `state`.,"Completer.complete(text, state)","Completer.complete(text,state)"
"This class method constructs a Fraction representing the exact value of `flt` , which must be a float .",fraction.from_float(flt),"def __str__(self): 
	return str(int(self.flt))"
Return a str version of `object` .,str(object=''),"import sys 
def str_version(object):
  str_version=sys.maxsize 
  return str_version"
"Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .","os.renames(old, new)","os.renames(old, new)"
Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is “ junk ” and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .,"difflib.SequenceMatcher(isjunk=None, b='')","def find_junk(a, b, c, d):
	if (a is None):
		return None
	if (b is None):
		return a
	if (a == None):
		return None
	if (b is None):
		return a
	if (b is None):
		return a
	if (a == None):
		return None
	if (b == None):
		return a
	if (b is"
Change owner `user` and/or `group` of the given `path` .,"shutil.chown(path, user=None, group=None)","shutil.chown(path, user=None)"
"For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .",datetime.__str__(),datetime.__str__()
"Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.","test_case.addCleanup(function, *args, **kwargs)","test_case.addCleanup(function, *args, **kwargs)"
"Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .","base_selector.register(fileobj, events)","base_selector.register(fileobj, events, events)"
Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .,signature.replace(parameters),"signature.replace(parameters, template, count=0)"
"This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.","@functools.wraps(wrapped, updated=WRAPPER_UPDATES)","@functools.wraps(wrapped, updated=False)"
"Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.",directory.start_component(uuid=None),"directory_start_with_repeat(uuid=None, m=0)"
"An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .",io.StringIO(newline='\n'),io.StringIO(newline='\n')
"Convert a `value` to a “ formatted ” representation , as controlled by `format_spec` .",format(value),"format(value, format_spec)"
"A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object ’ s read ( ) method to obtain bytestrings to yield .",wsgiref.util.FileWrapper(filelike),"wsgiref.util.FileWrapper(filelike, lsize, filelike)"
Install an OpenerDirector instance as the default global `opener` .,urllib.request.install_opener(opener),urllib.request.install_opener(opener)
Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .,"pprint.PrettyPrinter(indent=1, compact=False)","pprint.PrettyPrinter(indent=1, compact=False)"
( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .,"select.epoll(sizehint=-1, flags=0)","select.epoll(sizehint=-1, flags=0)"
Returns input_charset as a string coerced to lower case .,charset.__str__(),"import re
def is_lower(text):
  return (re.sub('[a-z]', '',text))"
"If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .",BaseCookie.load(rawdata),BaseCookie.load(rawdata)
"Set an ACL for `mailbox` . With arguments `who`, `what`.","IMAP4.setacl(mailbox, who, what)","IMAP4.setacl(mailbox, who, what)"
Remove the `event` from the queue .,scheduler.cancel(event),scheduler.cancel(event)
Send NOOP to server .,IMAP4.noop(),IMAP4.noop()
"If the `prompt` argument is present , it is written to standard output without a trailing newline .",input(),input()
"Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.","oss_mixer_device.set(control, (left, right))","oss_mixer_device.set(control, (left, right))"
"As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \x , \u or \U escapes .",ascii(object),ascii(object)
"Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .","sorted(iterable, key=None)","def sort_sorted(iterable, key=None):
    result = sorted(iterable, key=None)
    return result"
"This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .",@dataclasses.dataclass(order=False),"@dataclasses.dataclass(order=False)
def ordered_class(cls):
    dataclasses = []
    for name, value in inspect.getmembers(cls):
        if name not in dataclasses:
            dataclasses.append(name)
            name = value
    return dataclasses"
Insert an `ms` millisecond pause in output .,curses.delay_output(ms),curses.delay_output(ms)
"Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :",argparse.ArgumentParser(description=None),argparse.ArgumentParser(description=None)
Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .,"array.fromfile(f, n)","array.fromfile(f, n)"
Update and return a dictionary representing the current local symbol table .,locals(),locals()
Checks if an object appears to be a valid `element` object .,xml.etree.ElementTree.iselement(element),xml.etree.ElementTree.iselement(element)
Try to switch to UTF-8 mode .,POP3.utf8(),POP3.utf8()
Get a list of frame records for a `traceback` ’ s frame and all inner frames . With arguments `context`.,"inspect.getinnerframes(traceback, context=1)","inspect.getinnerframes(traceback, context=1)"
"Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.","types.new_class(name, bases=())","types.new_class(name, bases=())"
Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .,ensurepip.bootstrap(root=None),ensurepip.bootstrap(root=None)
Allows specifying that the module named `oldname` is in fact the package named `newname` .,"modulefinder.ReplacePackage(oldname, newname)","importlib.machinery.ModuleSpec(oldname, newname)"
Write `buf` to the SSL socket and return the number of bytes written .,SSLSocket.write(buf),SSLSocket.write(buf)
"Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .",os._exit(n),os._exit(n)
Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .,trace.Trace(count=1),trace.Trace(count=1)
A SQLite database connection has the following attributes and methods:,sqlite3.Connection,sqlite3.Connection
"Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .",directory.start_component(feature=None),directory = sys.argv[1]
Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.,"super(type, object-or-type)","super(type, object-or-type, typevalue)"
A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .,cmd.Cmd(stdout=None),cmd.Cmd(stdout=None)
Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is “ junk ” and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .,"difflib.SequenceMatcher(a='', autojunk=True)","def autojunk(a, b, c, d):
  if (a is None):
    return False
  else:
    return a + 1"
Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol ’ s write ( ) method .,"pprint.PrettyPrinter(indent=1, stream=None)","pprint.PrettyPrinter(indent=1, stream=None)"
"Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .",calendar.setfirstweekday(weekday),"def set_weekday(weekday):
    if weekday not in range(0, 7):
        weekday = 0
        weekday = weekday
        month = 1
        day = 1
    temp = [None for i in range(0, 7)]
        while temp:
            if month in days:
                day += 1
            temp=date.today()
        month = temp // 10
            day = temp % 7
    return weekday, month"
Draw a circle with given `radius` .,turtle.circle(radius),turtle.circle(radius)
"Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .",doc_test_runner.run(test),doc_test_runner.run(test_list)
Reads `size` bytes from the remote server .,IMAP4.read(size),IMAP4.read(size)
"Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .",timeit.timeit(timer=<default timer>),timeit.timeit(timer=<default timer>)
"Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.","Pattern.sub(repl, string, count=0)","import re
def repl(string,repl, count):
  return (re.sub(r""(\w+)"", repl, string, count))"
"Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .",str.rsplit(maxsplit=-1),str.split(' ')[-1]
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.","text_calendar.formatyear(theyear, w=2, m=3)","text_calendar.formatyear(theyear, w=2, m=3)"
"Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn ’ t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .","compile(source, filename, mode, optimize=-1)","compile(source, filename, mode, optimize=-1)"
Returns the volume of a given mixer `control` .,oss_mixer_device.get(control),oss_mixer_device.get(control)
Set the extended filesystem `attribute` attribute on `path` to `value` .,"os.setxattr(path, attribute, value)","os.setxattr(path, attribute, value)"
Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .,"logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)","logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)"
Return a dictionary representing the current global symbol table .,globals(),globals()
Translate an Internet `port` number and protocol name to a service name for that service .,socket.getservbyport(port),"import socket
def translate_email(email, port):
        pass"
Return the nameprepped version of `label` .,encodings.idna.nameprep(label),"import coffee
def get_preped_name(label):
  return list(coffee.name_prepped_label(label))"
Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.,collections.OrderedDict(items),"def rearrange_dict(dict1, items):
    result = {}
    for key, value in dict1.items():
        result.update(value)
    return result"
"Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.","re.search(pattern, string, flags=0)","import re
def first_match(string, pattern, flags):
    pattern = re.search(pattern, string, flags=0)
    return (pattern, flags)"
"All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .",datetime.timedelta(microseconds=0),"datetime.timedelta(days=0, seconds=0)"
Return an iterator of the summarized network range given the `first` and `last` IP addresses .,"ipaddress.summarize_address_range(first, last)","ipaddress.summarize_address_range(first, last, address)"
"A shlex instance or subclass instance is a lexical analyzer object . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .",shlex.shlex(posix=False),"shlex.shlex(posix=False, posix=True)"
Set the environment variable named `key` to the string `value` .,"os.putenv(key, value)","os.putenv(key, value)"
Sets the Formatter for this handler to `fmt` .,queue_listener.setFormatter(fmt),queue_listener.setFormatter(fmt)
Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .,"deque.index(x, start)","deque.index(x, start, stop)"
"Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.",datetime.replace(hour=self.hour),"datetime.replace(hour=self.hour, minute=self.minute)"
"Set the system ’ s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it ’ s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .",sys.settrace(tracefunc),"trace_func = sdb.Trace(tracefunc, *args, **kwargs)"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.","print(*objects, flush=False)","print(*objects, end='\n', file=sys.stdout)"
"Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.","types.new_class(name, bases=())","types.new_class(name, bases=())"
Add a `callback` to be run when the Future is done .,future.add_done_callback(callback),future.add_done_callback(callback)
Create a new ArgumentParser object . With arguments `parents`.,argparse.ArgumentParser(parents=),argparse.ArgumentParser(parents=)
Specify the sampling frequency in frames per second . With arguments `rate`.,aifc.setframerate(rate),aifc.setframerate(rate)
"Fused multiply-add . With arguments `other`, `third`.","decimal.fma(other, third)","def multiply_add(other, third):
    return (other * third) + one"
"All arguments are optional . With arguments `hour`, `minute`.","datetime.time(hour=0, minute=0)","def datetime_format(hour, minute=0):
  return (hour, minute=0)"
"Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .","calendar.leapdays(y1, y2)","def leap_years(y1,y2):
    if (y1 == y2):
        return 1
    elif (y2 == y1):
        return 2
    else:
        return 1"
"Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .",bool(x),"def func(x,y):
  if x == y:
    return True
  else:
    return False"
Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .,"base64.decode(input, output)","base_64.decode(input, output)"
Increments the progress bar ’ s value by `amount` .,widget.step(amount=None),widget.step(amount=None)
"Convert an integer number to an octal string prefixed with “ 0o ” . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .",oct(x),"def octal_to_int(x):
        s = '%s%s' % (x, y)
        return s"
Set the `state` of the encoder to state .,incremental_encoder.setstate(state),"def set_state(state):
    pass"
Read up to `n` bytes .,stream_reader.read(n=-1),stream_reader.read(n=-1)
"Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .","os.lseek(fd, pos, how)","os.lseek(fd, pos, how)"
Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.,"NNTP.xover(start, end, file=None)","NNTP.xover(start,end, file=None)"
Return a `k` length list of unique elements chosen from the `population` sequence or set .,"random.sample(population, k)","def len_unique(lst, k):
    max_length = max(len(lst) for lst in lst)
    return max_length"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.","text_calendar.formatyear(theyear, w=2, m=3)","text_calendar.formatyear(theyear, w=2, m=3)"
Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .,os.register_at_fork(before=None),"os.register_at_fork(before=None, after=None)"
Put an `item` into the queue .,queue.put(item),queue.put(item)
Construct a new Decimal object based from `value` .,"decimal.Decimal(value=""0"")","decimal.Decimal(value=""0"")"
"This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :","fcntl.lockf(fd, cmd, len=0, start=0, whence=0)","fcntl.lockf(fd, cmd, len=0, start=0, whence=0)"
"Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .","style.theme_settings(themename, settings)","style.theme_settings(themename, settings)"
"Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .","difflib.context_diff(a, b, fromfile='')","difflib.context_diff(a,b, tofile='')"
Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.,"code.InteractiveConsole(filename=""<console>"")","code.InteractiveConsole(filename=""<console>"")"
Cast a memoryview to a new `format` or `shape` .,"memoryview.cast(format, shape)","memoryview.cast(format, shape)"
Retrieve the next item from the `iterator` by calling its __next__ ( ) method .,next(iterator),"def next_item(iterator):
  next_item = next(iterator)
  return next_item"
"The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .","hashlib.scrypt(password, salt, n, r, p)","hashlib.scrypt(password, salt, n, r, p)"
Return a “ memory view ” object created from the given argument . With arguments `obj`.,memoryview(obj),memoryview(obj)
Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .,context_var.reset(token),context_var.reset(token)
Reads `size` bytes from the remote server .,IMAP4.read(size),IMAP4.read(size)
Return a Document that represents the `string` . With arguments `parser`.,"xml.dom.minidom.parseString(string, parser=None)","xml.dom.minidom.parseString(string, parser=None)"
Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .,signature.replace(parameters),"signature.replace(parameters, template, count=0)"
"A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .","mailbox.Maildir(dirname, create=True)","mailbox.Maildir(dirname, create=True)"
Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.,"timer.repeat(repeat=5, number=1000000)","def timeit_repeat(repeat,number):
  res = tuple(repeat(number, repeat))
  return (res) "
"Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.","filecmp.dircmp(a, b, ignore=None, hide=None)","filecmp.dircmp(dir1, dir2, b, ignore=None, hide=None)"
This class constructor creates an instance of a “ statistics object ” from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.,pstats.Stats(*filenames or profile),pstats.Stats(*filenames or profile)
Return a property attribute .,property(),"def property(self): 
    return self._property"
"Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .","dataclasses.make_dataclass(cls_name, fields, init=True)","dataclasses.make_dataclass(cls_name, fields, init=True)"
Equivalent to not key in d.,key not in d,key not in d
"When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .","email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')","email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii',
    fallback_header='Set-Cookie:', re.sub(r'[\W_]+', '.', value))"
Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .,"ensurepip.bootstrap(root=None, user=False)","ensurepip.bootstrap(root=None, user=False)"
Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .,"xml.etree.ElementTree.fromstring(text, parser=None)","xml.etree.ElementTree.fromstring(text, parser=None)"
"Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .",IMAP4.search(charset),IMAP4.search(charset)
Allow an application to set the `locale` for errors and warnings .,XMLReader.setLocale(locale),XMLReader.setLocale(locale)
"Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types — list , tuple , range . With arguments `iterable`.",list(iterable),"def mutable_list(list1, list2):
  return list1[:]"
Add correct Cookie header to `request` .,CookieJar.add_cookie_header(request),CookieJar.add_cookie_header(request)
"Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.",cab.commit(database),cab.commit(database)
Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .,"_thread.start_new_thread(function, args)","_thread.start_new_thread(function, args)"
"Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .","quopri.decode(input, output, header=False)","quopri.decode(input, output, output, header=False)"
Return the length ( the number of items ) of an object . With arguments `s`.,len(s),len(s)
Return `number` rounded to `ndigits` precision after the decimal point .,round(number),"round(number, ndigits)"
"Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .","subprocess.run(args, stdout=None)","subprocess.run(args, stdout=None)"
Return the value of the named attribute of `object` . `name` must be a string .,"getattr(object, name)","getattr(object, name)"
This exception is derived from RuntimeError.,NotImplementedError,NotImplementedError
A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .,cmd.Cmd(stdout=None),cmd.Cmd(stdout=None)
"Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .","sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)","sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, rle)"
"Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .","webbrowser.register(name, constructor, preferred=False)","webbrowser.register(name, constructor, preferred=False)"
Read exactly `n` bytes .,stream_reader.readexactly(n),stream_reader.readexactly(n)
"Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .","xml.etree.ElementTree.tostring(element, method=""xml"")","xml.etree.ElementTree.tostring(element, method=""xml"")"
The same as the ellipsis literal “...”.,Ellipsis,"def make_elim(elim):
  returnelim"
The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either ‘ + ’ or ‘ - ‘ and numerator and denominator ( if present ) are strings of `decimal` digits .,fractions.Fraction(decimal),"def dp_get_fraction(decimal, d): 
    while (decimal == 0): 
        pass"
Send a STARTTLS command .,IMAP4.starttls(),IMAP4.start()
"Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .","turtle.numinput(title, prompt, maxval=None)","turtle.numinput(title, input_type, default=None)"
A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .,unittest.main(argv=None),unittest.main(argv=None)
Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .,"difflib.context_diff(a, b, n=3)","difflib.context_diff(a, b, n=3)"
"Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.",mailcap.findmatch(caps),"mailcap.findmatch(caps, 'view')"
"Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types — list , tuple , range . With arguments `iterable`.",tuple(iterable),"def tuple_list(iterable):
    return list(tuple_list)"
Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25–0.5 seconds ; a nonzero duration has a system dependent meaning .,"termios.tcsendbreak(fd, duration)","def make_chunk(fd, duration):
  res = []
  for i in range(1, len(fd)):
    if (fd[i] == 0):
      res.append(0)
      break
  return (res) "
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, c=6)","text_calendar.formatyear(theyear, w=2, l=1)"
"Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .",Match.expand(template),"import re
def sub(template, string):
  return re.sub(r""\\$"", string)"
Return a proxy object that delegates method calls to a parent or sibling class of `type` .,super(),super()
This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.,stats.sort_stats(*keys),stats.sort_stats(*keys)
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2, c=6)","text_calendar.formatyear(theyear, w=2, l=1)"
"Push an input source stream onto the input stack . With arguments `newstream`, `newfile`.","shlex.push_source(newstream, newfile=None)","shlex.push_source(newstream, newfile=None)"
Return an iterator `object` .,iter(object),iter(object)
"These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The “ v ” variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in “ e ” ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process ’ environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .","os.execve(path, args, env)","os.execv(path, args, kwargs)"
The Tk class is instantiated without arguments . With arguments `className`.,tkinter.Tk(className='Tk'),tkinter.Tk(className='Tk')
Read exactly `n` bytes .,stream_reader.readexactly(n),stream_reader.readexactly(n)
Return a `k` sized list of elements chosen from the `population` with replacement .,random.choices(population),"def random_element(population, k):
    max_population = max(population)
    return itertools.zip_longest(population, *args, k)"
Return a `k` length list of unique elements chosen from the `population` sequence or set .,"random.sample(population, k)","def len_unique(lst, k):
    max_length = max(len(lst) for lst in lst)
    return max_length"
Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .,SSLSocket.read(len=1024),"SSLSocket.read(len=1024, len=1024)"
Return the nameprepped version of `label` .,encodings.idna.nameprep(label),"import coffee
def get_preped_name(label):
  return list(coffee.name_prepped_label(label))"
"Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .","shlex.split(s, comments=False)","shlex.split(s, comments=False, comment='')"
assert the mock has been called with the specified `calls` .,mock.assert_has_calls(calls),mock.assert_has_calls(calls)
"Return a new datetime object whose `date` components are equal to the given date object ’ s , and whose `time` components are equal to the given time object ’ s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .","datetime.combine(date, time, tzinfo=self.tzinfo)","datetime.combine(date, time, tzinfo=self.tzinfo)"
"Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.","platform.java_ver('', ''), '', ''), vendor='')","platform.java_ver('', ''), '', ''), vendor='')"
Return a Document that represents the `string` . With arguments `parser`.,"xml.dom.minidom.parseString(string, parser=None)","xml.dom.minidom.parseString(string, parser=None)"
Returns IMAP namespaces as defined in RFC 2342 .,IMAP4.namespace(),IMAP4.namespace()
Translate an Internet `port` number and protocol name to a service name for that service .,socket.getservbyport(port),"import socket
def translate_email(email, port):
        pass"
"Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .",breakpoint.bpprint(out=None),breakpoint(*sys.argv[1:])
"Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .","divmod(a, b)","divmod(a, b)"
Add a `callback` to be run when the Future is done .,future.add_done_callback(callback),future.add_done_callback(callback)
Create an instance of the FileInput class . With arguments `backup`.,fileinput.input(backup=''),fileinput.input(backup='')
Clone this node . Setting `deep` means to clone all child nodes as well .,Node.cloneNode(deep),Node.cloneNode(deep)
"Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is ‘ view ’ , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.","mailcap.findmatch(caps, key='view')","mailcap.findmatch(caps, key='view')"
Transform a method into a static method.,@staticmethod,"@staticmethod
def transform_static(fn):
    return fn.__get__(instance, fromlist=[''])
"
"Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .","audioop.alaw2lin(fragment, width)","audioop.alaw_to_law(fragment, width, height)"
"Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types — list , tuple , range . With arguments `start`, `stop`, `step`.","range(start, stop, step)","def parse_range(start,end,step):
    res = list(range(start,end,step))
    return (res) "
Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.,"calendar.calendar(year, l=1)","calendar.calendar(year, l=1)"
"Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .","lzma.open(filename, format=None)","lzma.open(filename, format=None)"
"Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .",int(),"int(x, type(x))"
Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .,xmlparser.SetBase(base),"xmlparser.SetBase(base, base)"
"This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .","cgitb.text(info, context=5)","cgitb.text(info, context=5)"
Return a floating point number constructed from a number or string `x` .,float(x),float(x)
"Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .",platform.architecture(bits=''),platform.architecture(bits='')
"Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.","IMAP4.fetch(message_set, message_parts)","IMAP4.fetch(message_set, message_parts)"
Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.,"csv.reader(csvfile, **fmtparams, dialect='excel')","csv.reader(csvfile, **fmtparams, dialect='excel')"
"Return a new set object , optionally with elements taken from `iterable` .",set(iterable),set()
Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .,stream_reader.read(size),stream_reader.read(size)
"Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .","curses.setupterm(term=None, fd=-1)","curses.setupterm(term=None, fd=-1, verbose=0)"
"If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.",bdb.dispatch_line(frame),"def method_to_call(frame, func): 
    if (func == ""second"" or func == ""third""): 
        return True
    else: 
        return False"
"The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .","hashlib.scrypt(password, salt, n, r, p)","hashlib.scrypt(password, salt, n, r, p)"
"Adds a new tab to the notebook . With arguments `child`, `**kw`.","widget.add(child, **kw)","widget.add(child, **kw)"
Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.,"calendar.prcal(year, l=0)","calendar.prcal(year, l=0)"
The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.,venv.EnvBuilder(clear=False),venv.EnvBuilder(clear=False)
"Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .",message.attach(payload),message.attach(payload)
"Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process ’ s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in “ e ” ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process ’ environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .","os.spawnle(mode, path, env)","os.spawnle(mode, path, env)"
The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either ‘ + ’ or ‘ - ‘ and numerator and denominator ( if present ) are strings of `decimal` digits .,fractions.Fraction(decimal),"def dp_get_fraction(decimal, d): 
    while (decimal == 0): 
        pass"
"This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .","bdb.trace_dispatch(frame, event, arg)","bdb.trace_dispatch(frame, event, arg)"
"A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . If one or more filters are provided , or if the optional keyword argument `quiet` is False , it checks to make sure the warnings are as expected : each specified filter must match at least one of the warnings raised by the enclosed code or the test fails , and if any warnings are raised that do not match any of the specified filters the test fails . With arguments `*filters`.","test.support.check_warnings(*filters, quiet=True)","test_case.assertEqual(quiet, True, False)"
This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.,stats.sort_stats(*keys),stats.sort_stats(*keys)
This is identical to m.group ( `g` ) .,Match.__getitem__(g),Match.__getitem__(g)
"Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .",json_encoder.default(o),"def base_encoder(o):
    if isinstance(o, dict):
        return {'base': base}
    else:
        return o
  else:
    return default"
"Example : With arguments `poly`, `fill`.","shape.addcomponent(poly, fill)","shape.addcomponent(poly, fill)"
"Return the MIME part that is the best candidate to be the “ body ” of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.","email_message.get_body('html', 'plain'), preferencelist=('related')","email_message.get_body('html', 'plain'), preferencelist=('related')"
A class to handle HTTP Cookies . With arguments `cookiejar`.,urllib.request.HTTPCookieProcessor(cookiejar=None),urllib.request.HTTPCookieProcessor(cookiejar=None)
"Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .","isinstance(object, classinfo)","isinstance(object, classinfo)"
"Return True if d has a key key, else False.",key in d,"def check_key(d):
  if d:
    return True
  else:
    return False"
"Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .",bz2.open(filename),"bz2.open(filename, mode='r')"
Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .,formatter.assert_line_data(flag=1),"def format_line(a,flag=1): 
	print(a, flag) 
	if flag == 1: 
		return 1
	else: 
		return 1
def is_odd(a,flag=1): 
	return is_odd(a,flag) or is_even(a, flag)"
"Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.","tarfile.open(**kwargs, mode='r', fileobj=None)","tarfile.open(**kwargs, mode='r', fileobj=None)"
"Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .",code.interact(local=None),"def main():
    pass"
"Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.","ctypes.memset(dst, c, count)","ctypes.memset(dst, c, count)"
Cast a memoryview to a new `format` or `shape` .,"memoryview.cast(format, shape)","memoryview.cast(format, shape)"
"Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .",element.iter(tag=None),element.iter(tag=None)
"Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .","compileall.compile_dir(dir, quiet=0)","compileall.compile_dir(dir, quiet=0)"
"Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .","scheduler.enterabs(time, priority, action, kwargs={})","scheduler.enterabs(time, priority, action, kwargs={})"
"Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .","chunk.Chunk(file, align=True, bigendian=True)","def make_chunk(file, align, bigendian=True, bigendian=False):
    return chunk(file, align, bigendian=True, bigendian=True)"
Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .,stream_reader.read(size),stream_reader.read(size)
"Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .","formatter.get_value(key, args, kwargs)","formatter.get_type(key, args, kwargs)"
Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .,"open(file, mode='r', buffering=-1)","open(file, mode='r', buffering=-1)"
"Create a new dictionary . With arguments `iterable`, `**kwarg`.","dict(iterable, **kwarg)","dict(iterable, **kwarg)"
Set the scrolling region from line `top` to line `bottom` .,"window.setscrreg(top, bottom)","window.setscrreg(top, bottom)"
Shutdown connection to server .,IMAP4.logout(),IMAP4.logout()
Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted — its default value is '/ ' .,"urllib.parse.quote(string, safe='/')","urllib.parse.quote(string, safe='/')"
"Returns `x` multiplied by `y` , plus `z` .","context.fma(x, y, z)","def multiply(x,y,z):
    return (x * y,y * z)"
Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is “ junk ” and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .,"difflib.SequenceMatcher(a='', autojunk=True)","def autojunk(a, b, c, d):
  if (a is None):
    return False
  else:
    return a + 1"
"Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.","atexit.register(func, *args, **kwargs)","atexit.register(func, *args, **kwargs)"
Write `data` to the output file .,aifc.writeframes(data),aifc.writeframes(data)
Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .,"zipapp.create_archive(source, interpreter=None)","zipapp.create_archive(source, interpreter=None)"
"This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .","_c_data.in_dll(library, name)","_c_data.in_dll(library, name, data_length)"
Print the byte string `char` to the console without buffering .,msvcrt.putch(char),msvcrt.putch(char)
Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .,"FTP.login(user='anonymous', passwd='')","FTP.login(user='anonymous', passwd='')"
Return True if `obj` is either of :,asyncio.isfuture(obj),"def check_element(obj, obj2): 
  if (obj2 is not None): 
    return True
  else: 
    return False"
"Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .","email.utils.formatdate(timeval=None, localtime=False, usegmt=False)","email.utils.formatdate(timeval=None, localtime=False, usegmt=False)"
"Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.","print(*objects, flush=False)","print(*objects, end='\n', file=sys.stdout)"
"This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .","setattr(object, name, value)","setattr(object, name, value)"
A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .,asyncio.Semaphore(value=1),"asyncio.Semaphore(value, value=1)"
"Delete any character at ( `y` , `x` ) .",window.delch(y),window.delch(y)
Update and return a dictionary representing the current local symbol table .,locals(),locals()
Raised when a mapping (dictionary) key is not found in the set of existing keys.,KeyError,"def get_key(dictionary, key):
  if key not in dictionary:
    return None
  else:
    return (key)"
"Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .","ArgumentParser.add_subparsers(title, description)",ArgumentParser.add_subparsers(title)
Open `file` and return a corresponding file object .,open(file),open(file)
"Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .","style.theme_settings(themename, settings)","style.theme_settings(themename, settings)"
Compare the values of two Decimal instances . With arguments `other`.,decimal.compare(other),"decimal.compare(other, decimal)"
"Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.","window.chgat(y, x, attr)","window.chgat(y, x, attr)"
"Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.","Request.add_header(key, val)","Request.add_header(key, val)"
Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .,base64.b64decode(s),base64.b64decode(s)
"Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.",email.contentmanager.get_content(msg),email.contentmanager.get_content(msg)
"Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.","re.search(pattern, string, flags=0)","import re
def first_match(string, pattern, flags):
    pattern = re.search(pattern, string, flags=0)
    return (pattern, flags)"
Authenticate command — requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :,"IMAP4.authenticate(mechanism, authobject)","IMAP4.authenticate(me diameter, authobject, method='GET', authheader=None)"
Return list of `group` ids that `user` belongs to .,"os.getgrouplist(user, group)","os.getgrouplist(user, group)"
Return a floating point number constructed from a number or string `x` .,float(x),float(x)
Read exactly `n` bytes .,stream_reader.readexactly(n),stream_reader.readexactly(n)
Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.,"textwrap.shorten(text, width, **kwargs)","def truncate_text(text, **kwargs):
  text = text.replace('...', '...')
  return (text, **kwargs)"
"Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .","sorted(iterable, key=None, reverse=False)","def extract_sorted(iterable, key, reverse=False):
    result = sorted(iterable, key=key, reverse=reverse)
    return result"
"Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .",socket.socketpair(family),socket.socketpair(family)
"Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.","string.capwords(s, sep=None)","import re
def split_text(text, sep=None):
     return (re.sub(""[,.]"", "":"", text))"
"Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .","dataclasses.make_dataclass(cls_name, fields, order=False)","dataclasses.make_dataclass(cls_name, fields, init=True)"
"Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .","slice(start, stop)","def slice_range(start,end,step):
    return start,end,step"
Return a `k` sized list of elements chosen from the `population` with replacement .,"random.choices(population, k=1)","def random_element(population, k):
    max_population = max(population)
    return itertools.zip_longest(population, *args, k)"
Raised when an assert statement fails.,AssertionError,"def assert_equal(test_case, expected):
  assert len(expected) == 1
  return True
 "
"Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.",ArgumentParser.set_defaults(**kwargs),ArgumentParser.set_defaults(**kwargs)
Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .,FTP.nlst(argument),FTP.nlst(argument)
Set d[key] to value.,d[key] = value,d[key] = value
`name` and `value` are passed to BaseHeader from the header_factory call .,"email.headerregistry.BaseHeader(name, value)","email.headerregistry.BaseHeader(name, value)"
Return True if `obj` is either of :,asyncio.isfuture(obj),"def check_element(obj, obj2): 
  if (obj2 is not None): 
    return True
  else: 
    return False"
Construct a full ( “ absolute ” ) URL by combining a “ `base` URL ” ( base ) with another URL ( `url` ) .,"urllib.parse.urljoin(base, url)","import urllib.request, urllib.parse, urllib.error
def path_join(base, url):
  return urllib.parse.urljoin(base, url)"
"Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .",bool(x),"def func(x,y):
  if x == y:
    return True
  else:
    return False"
This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .,ArgumentParser.error(message),ArgumentParser.error(message)
"Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .","webbrowser.register(name, constructor)","webbrowser.register(name, constructor, instance=None)"
"( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.","mmap.mmap(fileno, length, access=ACCESS_DEFAULT)","mmap.mmap(fileno, length, access=ACCESS_DEFAULT)"
"Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .","difflib.context_diff(a, b, fromfile='')","difflib.context_diff(a,b, tofile='')"
Set the list of `labels` on the message to labels .,babyl_message.set_labels(labels),babyl_message.set_labels(labels)
"Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .","formatter.get_value(key, args, kwargs)","formatter.get_type(key, args, kwargs)"
Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The desired output `width` is constrained using the width parameter ; the default is 80 characters .,"pprint.PrettyPrinter(indent=1, width=80)","pprint.PrettyPrinter(indent=1, width=80)"
"Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .","collections.deque(iterable, maxlen)","def __init__(self, iterable, maxlen):
    self.maxlen = maxlen
    self.list = [None] * (maxlen + 1)
    new_list = []
    for i in range(0, len(iterable)):
        new_list.append(iterable[i])
        self.maxlen = maxlen
    for i in range(1, len(maxlen)):
            new_list.append(iterable[i])
    if len(maxlen < maxlen"
"Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.","ArgumentParser.add_argument(name or flags..., action)","ArgumentParser.add_argument(name or flags..., action)"
"Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .","radio_button_group.add(name, x, y, width, height, text)","radio_button_group.add(name, x, y, width, height, text)"
Specify the sampling frequency in frames per second . With arguments `rate`.,aifc.setframerate(rate),aifc.setframerate(rate)
Return a context manager that closes `thing` upon completion of the block .,contextlib.closing(thing),contextlib.closing(thing)
Write the XML-RPC encoding of this DateTime item to the `out` stream object .,date_time.encode(out),date_time.encode(out)
"Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.","codecs.open(filename, buffering=1)","open(filename, mode='r', buffering=1)"
"Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .",multiprocessing.Process(daemon=None),"multiprocessing.Process(daemon=None, args=())"
Write `data` to the output file .,aifc.writeframes(data),aifc.writeframes(data)
Connect to a `host` on a given `port` .,"SMTP.connect(host='localhost', port=0)",SMTP.connect(host='localhost')
Sends `data` to the remote server .,IMAP4.send(data),IMAP4.send(data)
This function is used to turn the `capture` of warnings by logging on and off .,logging.captureWarnings(capture),logging.captureWarnings(capture)
"These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The “ v ” variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in “ e ” ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process ’ environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .","os.execve(path, args, env)","os.execv(path, args, kwargs)"
Write `buf` to the SSL socket and return the number of bytes written .,SSLSocket.write(buf),SSLSocket.write(buf)
A positive integer specifying the number of elements in the array.,array._length_,"def positive_count(arr,n): 
    arr.sort() 
    for i in range(n): 
        arr[i] = 1
    return arr"
"This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.",@dataclasses.dataclass(eq=True),"@dataclasses.dataclass(eq=True)
def wrapper(cls, *args, **kwargs):
  return cls(fn(*args, **kwargs))"
Return True if the file system for `directory` is case-insensitive .,test.support.fs_is_case_insensitive(directory),test.support.fs_is_case_insensitive(directory)
"`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .","callable(result, func, arguments)","def wrapper(f, *args, **kwargs):
    pass"
Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.,profile.print_stats(sort=-1),profile.print_stats(sort=-1)
"Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.","filecmp.dircmp(a, b, ignore=None, hide=None)","filecmp.dircmp(dir1, dir2, b, ignore=None, hide=None)"
Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .,"stream_reader.read(size, chars)","stream_reader.read(size, chars)"
Set class that keeps weak references to its `elements` .,weakref.WeakSet(elements),weakref.WeakSet(elements)
"Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .","binascii.b2a_qp(data, quotetabs=False, header=False)","binascii.b2a_qp(data, quotetabs=False, header=False)"
"This method makes a backup of a SQLite database even while it ’ s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .","connection.backup(target, name=""main"")","connection.backup(target, name=""main"")"
Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.,"code.InteractiveConsole(filename=""<console>"")","code.InteractiveConsole(filename=""<console>"")"
Get a list of frame records for a `traceback` ’ s frame and all inner frames .,inspect.getinnerframes(traceback),inspect.getinnerframes(traceback)
Close connection established in open .,IMAP4.shutdown(),IMAP4.shutdown()
Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .,"base64.a85encode(b, pad=False)","base64.a85encode(b, pad=False)"
"Returns `x` multiplied by `y` , plus `z` .","context.fma(x, y, z)","def multiply(x,y,z):
    return (x * y,y * z)"
"Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.","zipfile.ZipInfo(1, 1, 0, 0, 0))","zipfile.ZipInfo(1, 1, 0, 0, 0))"
"Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you ’ ll override it by specifying a filename . With arguments `caps`.","mailcap.findmatch(caps, filename='/dev/null')","mailcap.findmatch(caps, filename='/dev/null')"
Draw a circle with given `radius` .,turtle.circle(radius),turtle.circle(radius)
Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :,"zipapp.create_archive(source, target=None)","zipapp.create_archive(source, target=None)"
Set ANNOTATIONs for `mailbox` . With arguments `entry`.,"IMAP4.setannotation(mailbox, entry)","IMAP4.setannotation(mailbox, entry)"
"Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .","window.addstr(str, attr)","window.addstr(str, attr)"
Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .,shake.digest(length),"def update_digest(data, length):
  res = hashlib.digest(data)
  return (res)"
"Return a guess for whether wsgi.url_scheme should be “ http ” or “ https ” , by checking for a HTTPS environment variable in the `environ` dictionary .",wsgiref.util.guess_scheme(environ),wsgiref.util.guess_scheme(environ)
Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .,"deque.index(x, start)","deque.index(x, start, stop)"
"Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .",logging.config.listen(verify=None),logging.config.listen(verify=None)
"This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .","_c_data.in_dll(library, name)","_c_data.in_dll(library, name, data_length)"
"This method makes a backup of a SQLite database even while it ’ s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .","connection.backup(target, pages=0, sleep=0.250)","connection.backup(target, pages=0, sleep=0.250)"
"Return a list of the DocTests that are defined by `obj` ’ s docstring , or by any of its contained objects ’ docstrings . The optional argument `name` specifies the object ’ s name ; this name will be used to construct names for the returned DocTests .","doc_test_finder.find(obj, name)","doc_test_list.sort(key = lambda s: s['name'], reverse=True)"
"`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .","callable(result, func, arguments)","def wrapper(f, *args, **kwargs):
    pass"
List mailbox names in `directory` matching `pattern` .,"IMAP4.list(directory, pattern)","IMAP4.list(directory, pattern)"
"Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value “ end ” , specifying where in the list of parent ’ s children to insert the new item . With arguments `**kw`.","widget.insert(parent, index, **kw)","wsgiref.simple_item(parent, index, **kw)"
Remove the first occurrence of `value` .,deque.remove(value),"def remove_first_occurence(value):
  count = 0
  for i in range(0, len(value)):
    if value[i] == value:
      count += 1
  return count"
Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .,concurrent.futures.wait(fs),concurrent.futures.wait(fs)
"This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .","__import__(name, fromlist=())","__import__(name, fromlist=(), tolist=(), fromlist=())"
Write all items ( as machine values ) to the file object `f` .,array.tofile(f),array.tofile(f)
"An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .","http.client.HTTPConnection(host, timeout)","http.client.HTTPConnection(host, timeout, port=None)"
The sole value of the type NoneType.,None,None
Set the environment variable named `key` to the string `value` .,"os.putenv(key, value)","os.putenv(key, value)"
"Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .","locale.strcoll(string1, string2)","def find_locale(string1,string2): 
	if(string1==0): 
		return -1
	if(string2==0): 
		return True
	if(string1==0): 
		return -1
	elif(string2==0): 
		return True
	else: 
		return False"
"The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .",fraction.__round__(ndigits),"def round_number(n): 
    if (n < 0): 
        return 0
    res = n 
    for i in range(1, n + 1): 
        temp = n 
        if (temp % 10 == i): 
            res = int(temp / 10) 
        temp = temp // 10 
    return res "
Write the XML-RPC encoding of this DateTime item to the `out` stream object .,date_time.encode(out),date_time.encode(out)
`word` will usually be a user ’ s password as typed at a prompt or in a graphical interface .,crypt.crypt(word),crypt.crypt(word)
"Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.","Pattern.sub(repl, string, count=0)","import re
def repl(string,repl, count):
  return (re.sub(r""(\w+)"", repl, string, count))"
"The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .","hashlib.scrypt(password, salt, n, r, p)","hashlib.scrypt(password, salt, n, r, p)"
A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .,unittest.main(argv=None),unittest.main(argv=None)
"Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.","csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')","csv.DictWriter(f, fieldnames, *args, **kwargs, extrasaction='raise')"
Set class that keeps weak references to its `elements` .,weakref.WeakSet(elements),weakref.WeakSet(elements)
"Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.","string.capwords(s, sep=None)","import re
def split_text(text, sep=None):
     return (re.sub(""[,.]"", "":"", text))"
Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.,test.support.script_helper.kill_python(p),test_tup.kill()
"Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .",parser.parsestr(text),parser.parsestr(text)
All arguments are optional and default to 0 . With arguments `hours`.,datetime.timedelta(hours=0),datetime.timedelta(hours=0)
All arguments are optional and default to 0 . With arguments `minutes`.,datetime.timedelta(minutes=0),datetime.timedelta(minutes=0)
"Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.","doctest.DocFileSuite(*paths, optionflags=0)","doctest.DocFileSuite(*paths, optionflags=0)"
Provides an overriding `level` level for all loggers which takes precedence over the logger ’ s own level .,logging.disable(level=CRITICAL),logging.disable(level=CRITICAL)
"A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .",doctest.DocTestFinder(parser=DocTestParser()),"def extract_doc_test_parser(test_list, parser):
  res = []
  for name, value in test_list:
    if isinstance(value, doc_test_parser.DocTestDescription):
      res.append(doc_test_parser.DocTestDescription(value, parser))
  return (res) "
Enable `capability` ( see RFC 5161 ) .,IMAP4.enable(capability),IMAP4.enable(capability)
Accept a connection . `sock` must be a non-blocking socket .,loop.sock_accept(sock),"loop.sock_accept(sock, socktype)"
Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .,"sys.set_asyncgen_hooks(firstiter, finalizer)","sys.set_asyncgen_hooks(firstiter, finalizer)"
"Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.","email.contentmanager.get_content(msg, errors='replace')","email.contentmanager.get_content(msg, errors='replace')"
"Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .","base_http_request_handler.send_header(keyword, value)","base_http_request_handler.send_header(keyword, value)"
Only available on Windows.,WindowsError,WindowsError
"Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.","aifc.setmark(id, pos, name)","aifc.setmark(id, pos, name)"
"Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .","code.interact(banner=None, local=None)","def main(exit_msg,locals):
  res = []
  for i in range(0, len(locals)):
    if not isinstance(locals[i], type(string)):
      res.append(locals[i])
  return res "
Integer value to control debugging output.,IMAP4.debug,IMAP4.debug
Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.,"calendar.prcal(year, l=0)","calendar.prcal(year, l=0)"
"Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .",message.attach(payload),message.attach(payload)
"Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .",int(),"int(x, type(x))"
"Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.",directory.start_component(uuid=None),"directory_start_with_repeat(uuid=None, m=0)"
Return the value of the named attribute of `object` . `name` must be a string .,"getattr(object, name)","getattr(object, name)"
Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .,chunk.read(size=-1),chunk.read(size=-1)
Set the list of supplemental group ids associated with the current process to `groups` .,os.setgroups(groups),os.setgroups(groups)
"Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern “ ** ” will match any files and zero or more directories , subdirectories and symbolic links to directories .","glob.glob(pathname, recursive=False)","import glob
def list_dir_matches(pathname, recursive=False):
  res = []
  for root, dirs, files in os.walk(pathname, recursive=False):
    for name in files:
      if re.search(pattern, name):
        res.append(os.readlink(pathname, recursive=False))
      break
  return (res)"
"Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .","Queue.put(item, block=True)","Queue.put(item, block=True)"
Transform a method into a class method.,@classmethod,"@classmethod
def transform(cls):
    return cls.__dict__"
Returns IMAP namespaces as defined in RFC 2342 .,IMAP4.namespace(),IMAP4.namespace()
"Add and return a Line control . With arguments `name`, `x`, `y`, `width`, `height`.","dialog.line(name, x, y, width, height)","dialog.line(name, x, y, width, height)"
Each concrete class has an attribute _fields which gives the names of all child nodes.,ast._fields,ast._fields
Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .,"shutil.register_archive_format(name, function)","shutil.register_archive_format(name, function)"
"Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .","sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)","sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, rle)"
A basic test runner implementation that outputs results to a `stream` . With arguments `failfast`.,unittest.TextTestRunner(failfast=False),unittest.TextTestRunner(failfast=False)
Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.,ArgumentParser.parse_args(args=None),ArgumentParser.parse_args(args=None)
"For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .",datetime.__str__(),datetime.__str__()
"Return an open file object connected to the file descriptor `fd` . With arguments `*args`, `**kwargs`.","os.fdopen(fd, *args, **kwargs)","os.fdopen(fd, *args, **kwargs)"
"Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .","logging.handlers.TimedRotatingFileHandler(filename, utc=False)","logging.handlers.TimedRotatingFileHandler(filename, utc=False)"
A SQLite database connection has the following attributes and methods:,sqlite3.Connection,sqlite3.Connection
"The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .","hashlib.scrypt(password, salt, n, r, p, dklen=64)","hashlib.scrypt(password, salt, n, r, p)"
A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands ’ respective format codes are interpreted using struct syntax .,memoryview.__eq__(exporter),memoryview.__eq__(exporter)
"Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is ‘ view ’ , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.","mailcap.findmatch(caps, key='view')","mailcap.findmatch(caps, key='view')"
Each concrete class has an attribute _fields which gives the names of all child nodes.,ast._fields,ast._fields
Set the environment variable named `key` to the string `value` .,"os.putenv(key, value)","os.putenv(key, value)"
"Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .","mimetypes.guess_type(url, strict=True)","mimetypes.guess_type(url, strict=True)"
A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.,xmlrpc.client.ServerProxy(uri),xmlrpc.client.ServerProxy(uri)
Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.,loop.getnameinfo(sockaddr),loop.getnameinfo(sockaddr)
"Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.","Packer.pack_fopaque(n, data)","Packer.pack_fopaque(n, data, n)"
"Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .","binascii.b2a_qp(data, quotetabs=False, header=False)","binascii.b2a_qp(data, quotetabs=False, header=False)"
"Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .","Queue.put(item, block=True)","Queue.put(item, block=True)"
"Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform ’ s “ shell ” syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`, `stderr`.","loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)","loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
"Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .",Database.OpenView(sql),Database.OpenView(sql)
"Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , … `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)","xmlparser.AttlistDeclHandler(elname, attname, type, default, required)"
"Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .","os.renames(old, new)","os.renames(old, new)"
A process pool object which controls a pool of worker `processes` to which jobs can be submitted .,multiprocessing.pool.Pool(processes),multiprocessing.pool.Pool(processes)
"Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .",bz2.BZ2File(filename),"bz2.BZ2File(filename, mode='r')"
"Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .","Packer.pack_farray(n, array, pack_item)","from array import array, pack_item, pack_nice
def pack_farray(n, array, pack_item):
	print(repr(array), repr(index))
	for i in range(n):
		pack_item(array, i, pack_item)
	return array"
"Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .","next(iterator, default)","def next_item(iterator, default):
    for i in iterator:
        if i == default:
            return next(iterator, default)
        else:
            next = next(iterator, default)
    return next"
Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .,time.__format__(format),"time.strftime(format, format2)"
Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .,logging.handlers.QueueHandler(queue),logging.handlers.QueueHandler(queue)
Return a proxy object that delegates method calls to a parent or sibling class of `type` .,super(),super()
Move an existing `key` to either end of an ordered dictionary .,ordered_dict.move_to_end(key),ordered_dict.move_to_end(key)
Return an iterator `object` .,iter(object),iter(object)
"Create a subprocess . With arguments `program`, `*args`, `**kwds`.","asyncio.create_subprocess_exec(program, *args, **kwds)","asyncio.create_subprocess_exec(program, *args, **kwds)"
Return a new array of bytes .,bytearray(),"def new_array(length):
    arr = [0] * length
    return arr"
"Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .","ast.parse(source, filename='<unknown>')","ast.parse(source, filename='<unknown>', mode='exec')"
"Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types — list , tuple , range . With arguments `start`, `stop`.","range(start, stop)","def __getitem__(self, name):
    return (list(range(start, stop)), list(range(start, stop)))"
Seek to the specified frame number . With arguments `pos`.,aifc.setpos(pos),"aifc.setpos(pos, pos + 1)"
"Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .","urllib.request.urlopen(url, data=None)","urllib.request.urlopen(url, data=None)"
"Return a list of the best “ good enough ” matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .","difflib.get_close_matches(word, possibilities, n=3)","difflib.get_close_matches(word, possibilities, n=3)"
"Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .",@functools.lru_cache(typed=False),"@functools.lru_cache(maxsize=128, typed=False)
def wrap_maxsize_funct(f, maxsize, typed_arg):
    res = []
    if not isinstance(f, type):
        res.append(type, *args, **typed_arg)
    else:
        res.append(maxsize, type, typed_arg)
    res.sort()
    return (res) "
"Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .","bz2_decompressor.decompress(data, max_length=-1)","bz2_decompressor.decompress(data, max_length=-1)"
"Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .","binascii.crc_hqx(data, value)","binascii.crc_hqx(data, value)"
Return a generator of groups with up to `n` lines of context .,sequence_matcher.get_grouped_opcodes(n=3),"def group_sequence(n,m):
	items = [list(iterable) for _ in range(n)]
	for i in range(m):
		items.extend(map(next, items))
	return items"
Set the list of `labels` on the message to labels .,babyl_message.set_labels(labels),babyl_message.set_labels(labels)
"Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .","complex(real, imag)","complex(real, imag, real, imag)"
"This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .",unittest.TestSuite(tests=()),unittest.TestSuite(tests=())
Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .,ensurepip.bootstrap(root=None),ensurepip.bootstrap(root=None)
"Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.","logging.LoggerAdapter(logger, extra)","logging.LoggerAdapter(logger, extra)"
Connect `sock` to a remote socket at `address` .,"loop.sock_connect(sock, address)","loop.sock_connect(sock, address)"
Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.,tracemalloc.start(nframe: int=1),"def memory_allocator(nframe):
  caller=tracemalloc(nframe: int=1)
  return caller"
"These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The “ v ” variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in “ e ” ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process ’ environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .","os.execve(path, args, env)","os.execv(path, args, kwargs)"
"Bind the socket to a free port and return the port number . With arguments `sock`, `host`.","test.support.bind_port(sock, host=HOST)","test.support.bind_port(sock, host=HOST)"
Move an existing `key` to either end of an ordered dictionary .,ordered_dict.move_to_end(key),ordered_dict.move_to_end(key)
Reads `size` bytes from the remote server .,IMAP4.read(size),IMAP4.read(size)
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.","text_calendar.formatyear(theyear, w=2, c=6)","text_calendar.formatyear(theyear, w=2, l=1)"
Test that `first` and `second` are equal .,"test_case.assertEqual(first, second)","def test_equal(first,second,first_element,second_element):
  res = True
  first_element = first_element + second_element
  second_element = second_element + first_element
  return (res) "
Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type . If `lock` is True ( the default ) then a new recursive lock object is created to synchronize access to the value .,"multiprocessing.Value(typecode_or_type, *args, lock=True)","multiprocessing.Value(typecode_or_type, *args, lock=True)"
Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .,@functools.lru_cache(maxsize=128),"@functools.lru_cache(maxsize=128)
def max_size_custom(f):
    return maxsize"
"Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .",int(x),"int(x, type(x))"
"Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.",ArgumentParser.get_default(dest),"ArgumentParser.get_default(dest, dest_key, default)"
"Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.","text_calendar.formatyear(theyear, l=1, m=3)","text_calendar.formatyear(theyear, w=2, m=3)"
"Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .","winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)","winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)"
"Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .","compileall.compile_path(skip_curdir=True, maxlevels=0)","compileall.compile_path(skip_curdir=0, maxlevels=0)"
"Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .","getattr(object, name, default)","getattr(object, name, default)"
Create a new dictionary . With arguments `**kwarg`.,dict(**kwarg),dict(**kwarg)
"Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .","zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=True)","zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=True)"
These methods immediately delete the message . With arguments `key`.,mh.__delitem__(key),"def delete_message(key, message):
  mh.__delitem__(key)
  return (mh.__str__())"
"Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.","logging.FileHandler(filename, mode='a')","logging.FileHandler(filename, mode='a')"
Run until the `future` ( an instance of Future ) has completed .,loop.run_until_complete(future),loop.run_until_complete(future)
"Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .","turtle.circle(radius, steps=None)","turtle.circle(radius, steps=None)"
"Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .","enumerate(iterable, start=0)","enumerate(iterable, start=0)"
"( Only supported on BSD . ) With arguments `ident`, `udata`.","select.kevent(ident, udata=0)","select.kevent(ident, udata=0)"
This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .,imaplib.IMAP4_stream(command),imaplib.IMAP4_stream(command)
The sole value of the type NoneType.,None,None
"Return a new frozenset object , optionally with elements taken from `iterable` .",frozenset(iterable),frozenset()
"Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .","ZipFile.open(name, mode='r', pwd=None)","ZipFile.open(name, mode='r', pwd=None)"
Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .,"ZipFile.open(name, pwd=None)","ZipFile.open(name, pwd=None)"
"If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .",locale.setlocale(category),"import locale
def set_locale(category):
  if isinstance(category, str):
    return [locale.setlocale(category, category) for category in [category] ]
  else:
    return [locale.setlocale(category, value) for value in [locale] ]"
Return a year ’ s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.,"html_calendar.formatyearpage(theyear, css='calendar.css')","html_calendar.formatyearpage(theyear, css='calendar.css')"
This function causes the cgitb module to take over the interpreter ’ s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .,cgitb.enable(context=5),cgitb.enable(context=5)
Set the `blocking` mode of the specified file descriptor . With arguments `fd`.,"os.set_blocking(fd, blocking)","os.set_blocking(fd, blocking)"
